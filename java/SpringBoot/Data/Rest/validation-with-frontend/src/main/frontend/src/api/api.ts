/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AbstractJsonSchemaPropertyObject
 */
export interface AbstractJsonSchemaPropertyObject {
    /**
     * 
     * @type {string}
     * @memberof AbstractJsonSchemaPropertyObject
     */
    'title'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AbstractJsonSchemaPropertyObject
     */
    'readOnly'?: boolean;
}
/**
 * 
 * @export
 * @interface CollectionModelItem
 */
export interface CollectionModelItem {
    /**
     * 
     * @type {CollectionModelItemEmbedded}
     * @memberof CollectionModelItem
     */
    '_embedded'?: CollectionModelItemEmbedded;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof CollectionModelItem
     */
    '_links'?: { [key: string]: Link; };
}
/**
 * 
 * @export
 * @interface CollectionModelItemEmbedded
 */
export interface CollectionModelItemEmbedded {
    /**
     * 
     * @type {Array<ItemResponse>}
     * @memberof CollectionModelItemEmbedded
     */
    'items'?: Array<ItemResponse>;
}
/**
 * 
 * @export
 * @interface CollectionModelObject
 */
export interface CollectionModelObject {
    /**
     * 
     * @type {CollectionModelObjectEmbedded}
     * @memberof CollectionModelObject
     */
    '_embedded'?: CollectionModelObjectEmbedded;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof CollectionModelObject
     */
    '_links'?: { [key: string]: Link; };
}
/**
 * 
 * @export
 * @interface CollectionModelObjectEmbedded
 */
export interface CollectionModelObjectEmbedded {
    /**
     * 
     * @type {Array<object>}
     * @memberof CollectionModelObjectEmbedded
     */
    'objects'?: Array<object>;
}
/**
 * 
 * @export
 * @interface CollectionModelOrder
 */
export interface CollectionModelOrder {
    /**
     * 
     * @type {CollectionModelOrderEmbedded}
     * @memberof CollectionModelOrder
     */
    '_embedded'?: CollectionModelOrderEmbedded;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof CollectionModelOrder
     */
    '_links'?: { [key: string]: Link; };
}
/**
 * 
 * @export
 * @interface CollectionModelOrderEmbedded
 */
export interface CollectionModelOrderEmbedded {
    /**
     * 
     * @type {Array<OrderResponse>}
     * @memberof CollectionModelOrderEmbedded
     */
    'orders'?: Array<OrderResponse>;
}
/**
 * 
 * @export
 * @interface EntityModelItem
 */
export interface EntityModelItem {
    /**
     * 
     * @type {string}
     * @memberof EntityModelItem
     */
    'itemName'?: string;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof EntityModelItem
     */
    '_links'?: { [key: string]: Link; };
}
/**
 * 
 * @export
 * @interface EntityModelOrder
 */
export interface EntityModelOrder {
    /**
     * 
     * @type {string}
     * @memberof EntityModelOrder
     */
    'orderName'?: string;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof EntityModelOrder
     */
    '_links'?: { [key: string]: Link; };
}
/**
 * 
 * @export
 * @interface Item
 */
export interface Item {
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    'type'?: string;
    /**
     * 
     * @type {{ [key: string]: AbstractJsonSchemaPropertyObject; }}
     * @memberof Item
     */
    'properties'?: { [key: string]: AbstractJsonSchemaPropertyObject; };
    /**
     * 
     * @type {Array<string>}
     * @memberof Item
     */
    'requiredProperties'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ItemRequestBody
 */
export interface ItemRequestBody {
    /**
     * 
     * @type {number}
     * @memberof ItemRequestBody
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ItemRequestBody
     */
    'itemName'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ItemRequestBody
     */
    'orders'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ItemResponse
 */
export interface ItemResponse {
    /**
     * 
     * @type {string}
     * @memberof ItemResponse
     */
    'itemName'?: string;
}
/**
 * 
 * @export
 * @interface JsonSchema
 */
export interface JsonSchema {
    /**
     * 
     * @type {string}
     * @memberof JsonSchema
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof JsonSchema
     */
    'description'?: string;
    /**
     * 
     * @type {{ [key: string]: AbstractJsonSchemaPropertyObject; }}
     * @memberof JsonSchema
     */
    'properties'?: { [key: string]: AbstractJsonSchemaPropertyObject; };
    /**
     * 
     * @type {Array<string>}
     * @memberof JsonSchema
     */
    'requiredProperties'?: Array<string>;
    /**
     * 
     * @type {{ [key: string]: Item; }}
     * @memberof JsonSchema
     */
    'definitions'?: { [key: string]: Item; };
    /**
     * 
     * @type {string}
     * @memberof JsonSchema
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof JsonSchema
     */
    '$schema'?: string;
}
/**
 * 
 * @export
 * @interface Link
 */
export interface Link {
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    'href'?: string;
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    'hreflang'?: string;
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    'deprecation'?: string;
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    'profile'?: string;
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Link
     */
    'templated'?: boolean;
}
/**
 * 
 * @export
 * @interface OrderRequestBody
 */
export interface OrderRequestBody {
    /**
     * 
     * @type {number}
     * @memberof OrderRequestBody
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderRequestBody
     */
    'orderName'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderRequestBody
     */
    'items'?: Array<string>;
}
/**
 * 
 * @export
 * @interface OrderResponse
 */
export interface OrderResponse {
    /**
     * 
     * @type {string}
     * @memberof OrderResponse
     */
    'orderName'?: string;
}
/**
 * 
 * @export
 * @interface PageMetadata
 */
export interface PageMetadata {
    /**
     * 
     * @type {number}
     * @memberof PageMetadata
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageMetadata
     */
    'totalElements'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageMetadata
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageMetadata
     */
    'number'?: number;
}
/**
 * 
 * @export
 * @interface PagedModelEntityModelItem
 */
export interface PagedModelEntityModelItem {
    /**
     * 
     * @type {PagedModelEntityModelItemEmbedded}
     * @memberof PagedModelEntityModelItem
     */
    '_embedded'?: PagedModelEntityModelItemEmbedded;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof PagedModelEntityModelItem
     */
    '_links'?: { [key: string]: Link; };
    /**
     * 
     * @type {PageMetadata}
     * @memberof PagedModelEntityModelItem
     */
    'page'?: PageMetadata;
}
/**
 * 
 * @export
 * @interface PagedModelEntityModelItemEmbedded
 */
export interface PagedModelEntityModelItemEmbedded {
    /**
     * 
     * @type {Array<EntityModelItem>}
     * @memberof PagedModelEntityModelItemEmbedded
     */
    'items'?: Array<EntityModelItem>;
}
/**
 * 
 * @export
 * @interface PagedModelEntityModelOrder
 */
export interface PagedModelEntityModelOrder {
    /**
     * 
     * @type {PagedModelEntityModelOrderEmbedded}
     * @memberof PagedModelEntityModelOrder
     */
    '_embedded'?: PagedModelEntityModelOrderEmbedded;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof PagedModelEntityModelOrder
     */
    '_links'?: { [key: string]: Link; };
    /**
     * 
     * @type {PageMetadata}
     * @memberof PagedModelEntityModelOrder
     */
    'page'?: PageMetadata;
}
/**
 * 
 * @export
 * @interface PagedModelEntityModelOrderEmbedded
 */
export interface PagedModelEntityModelOrderEmbedded {
    /**
     * 
     * @type {Array<EntityModelOrder>}
     * @memberof PagedModelEntityModelOrderEmbedded
     */
    'orders'?: Array<EntityModelOrder>;
}
/**
 * 
 * @export
 * @interface RepresentationModelObject
 */
export interface RepresentationModelObject {
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof RepresentationModelObject
     */
    '_links'?: { [key: string]: Link; };
}

/**
 * ItemEntityControllerApi - axios parameter creator
 * @export
 */
export const ItemEntityControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * delete-item
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemResourceItemDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteItemResourceItemDelete', 'id', id)
            const localVarPath = `/items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-item
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionResourceItemGet1: async (page?: number, size?: number, sort?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-item
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemResourceItemGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getItemResourceItemGet', 'id', id)
            const localVarPath = `/items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * patch-item
         * @param {string} id 
         * @param {ItemRequestBody} itemRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchItemResourceItemPatch: async (id: string, itemRequestBody: ItemRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchItemResourceItemPatch', 'id', id)
            // verify required parameter 'itemRequestBody' is not null or undefined
            assertParamExists('patchItemResourceItemPatch', 'itemRequestBody', itemRequestBody)
            const localVarPath = `/items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(itemRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * create-item
         * @param {ItemRequestBody} itemRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCollectionResourceItemPost: async (itemRequestBody: ItemRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemRequestBody' is not null or undefined
            assertParamExists('postCollectionResourceItemPost', 'itemRequestBody', itemRequestBody)
            const localVarPath = `/items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(itemRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update-item
         * @param {string} id 
         * @param {ItemRequestBody} itemRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putItemResourceItemPut: async (id: string, itemRequestBody: ItemRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putItemResourceItemPut', 'id', id)
            // verify required parameter 'itemRequestBody' is not null or undefined
            assertParamExists('putItemResourceItemPut', 'itemRequestBody', itemRequestBody)
            const localVarPath = `/items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(itemRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ItemEntityControllerApi - functional programming interface
 * @export
 */
export const ItemEntityControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ItemEntityControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * delete-item
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteItemResourceItemDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteItemResourceItemDelete(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ItemEntityControllerApi.deleteItemResourceItemDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * get-item
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollectionResourceItemGet1(page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedModelEntityModelItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCollectionResourceItemGet1(page, size, sort, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ItemEntityControllerApi.getCollectionResourceItemGet1']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * get-item
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemResourceItemGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemResourceItemGet(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ItemEntityControllerApi.getItemResourceItemGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * patch-item
         * @param {string} id 
         * @param {ItemRequestBody} itemRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchItemResourceItemPatch(id: string, itemRequestBody: ItemRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchItemResourceItemPatch(id, itemRequestBody, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ItemEntityControllerApi.patchItemResourceItemPatch']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * create-item
         * @param {ItemRequestBody} itemRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCollectionResourceItemPost(itemRequestBody: ItemRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCollectionResourceItemPost(itemRequestBody, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ItemEntityControllerApi.postCollectionResourceItemPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * update-item
         * @param {string} id 
         * @param {ItemRequestBody} itemRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putItemResourceItemPut(id: string, itemRequestBody: ItemRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putItemResourceItemPut(id, itemRequestBody, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ItemEntityControllerApi.putItemResourceItemPut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ItemEntityControllerApi - factory interface
 * @export
 */
export const ItemEntityControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ItemEntityControllerApiFp(configuration)
    return {
        /**
         * delete-item
         * @param {ItemEntityControllerApiDeleteItemResourceItemDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemResourceItemDelete(requestParameters: ItemEntityControllerApiDeleteItemResourceItemDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteItemResourceItemDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * get-item
         * @param {ItemEntityControllerApiGetCollectionResourceItemGet1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionResourceItemGet1(requestParameters: ItemEntityControllerApiGetCollectionResourceItemGet1Request = {}, options?: AxiosRequestConfig): AxiosPromise<PagedModelEntityModelItem> {
            return localVarFp.getCollectionResourceItemGet1(requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * get-item
         * @param {ItemEntityControllerApiGetItemResourceItemGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemResourceItemGet(requestParameters: ItemEntityControllerApiGetItemResourceItemGetRequest, options?: AxiosRequestConfig): AxiosPromise<EntityModelItem> {
            return localVarFp.getItemResourceItemGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * patch-item
         * @param {ItemEntityControllerApiPatchItemResourceItemPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchItemResourceItemPatch(requestParameters: ItemEntityControllerApiPatchItemResourceItemPatchRequest, options?: AxiosRequestConfig): AxiosPromise<EntityModelItem> {
            return localVarFp.patchItemResourceItemPatch(requestParameters.id, requestParameters.itemRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * create-item
         * @param {ItemEntityControllerApiPostCollectionResourceItemPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCollectionResourceItemPost(requestParameters: ItemEntityControllerApiPostCollectionResourceItemPostRequest, options?: AxiosRequestConfig): AxiosPromise<EntityModelItem> {
            return localVarFp.postCollectionResourceItemPost(requestParameters.itemRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * update-item
         * @param {ItemEntityControllerApiPutItemResourceItemPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putItemResourceItemPut(requestParameters: ItemEntityControllerApiPutItemResourceItemPutRequest, options?: AxiosRequestConfig): AxiosPromise<EntityModelItem> {
            return localVarFp.putItemResourceItemPut(requestParameters.id, requestParameters.itemRequestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteItemResourceItemDelete operation in ItemEntityControllerApi.
 * @export
 * @interface ItemEntityControllerApiDeleteItemResourceItemDeleteRequest
 */
export interface ItemEntityControllerApiDeleteItemResourceItemDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof ItemEntityControllerApiDeleteItemResourceItemDelete
     */
    readonly id: string
}

/**
 * Request parameters for getCollectionResourceItemGet1 operation in ItemEntityControllerApi.
 * @export
 * @interface ItemEntityControllerApiGetCollectionResourceItemGet1Request
 */
export interface ItemEntityControllerApiGetCollectionResourceItemGet1Request {
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof ItemEntityControllerApiGetCollectionResourceItemGet1
     */
    readonly page?: number

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof ItemEntityControllerApiGetCollectionResourceItemGet1
     */
    readonly size?: number

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof ItemEntityControllerApiGetCollectionResourceItemGet1
     */
    readonly sort?: Array<string>
}

/**
 * Request parameters for getItemResourceItemGet operation in ItemEntityControllerApi.
 * @export
 * @interface ItemEntityControllerApiGetItemResourceItemGetRequest
 */
export interface ItemEntityControllerApiGetItemResourceItemGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ItemEntityControllerApiGetItemResourceItemGet
     */
    readonly id: string
}

/**
 * Request parameters for patchItemResourceItemPatch operation in ItemEntityControllerApi.
 * @export
 * @interface ItemEntityControllerApiPatchItemResourceItemPatchRequest
 */
export interface ItemEntityControllerApiPatchItemResourceItemPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof ItemEntityControllerApiPatchItemResourceItemPatch
     */
    readonly id: string

    /**
     * 
     * @type {ItemRequestBody}
     * @memberof ItemEntityControllerApiPatchItemResourceItemPatch
     */
    readonly itemRequestBody: ItemRequestBody
}

/**
 * Request parameters for postCollectionResourceItemPost operation in ItemEntityControllerApi.
 * @export
 * @interface ItemEntityControllerApiPostCollectionResourceItemPostRequest
 */
export interface ItemEntityControllerApiPostCollectionResourceItemPostRequest {
    /**
     * 
     * @type {ItemRequestBody}
     * @memberof ItemEntityControllerApiPostCollectionResourceItemPost
     */
    readonly itemRequestBody: ItemRequestBody
}

/**
 * Request parameters for putItemResourceItemPut operation in ItemEntityControllerApi.
 * @export
 * @interface ItemEntityControllerApiPutItemResourceItemPutRequest
 */
export interface ItemEntityControllerApiPutItemResourceItemPutRequest {
    /**
     * 
     * @type {string}
     * @memberof ItemEntityControllerApiPutItemResourceItemPut
     */
    readonly id: string

    /**
     * 
     * @type {ItemRequestBody}
     * @memberof ItemEntityControllerApiPutItemResourceItemPut
     */
    readonly itemRequestBody: ItemRequestBody
}

/**
 * ItemEntityControllerApi - object-oriented interface
 * @export
 * @class ItemEntityControllerApi
 * @extends {BaseAPI}
 */
export class ItemEntityControllerApi extends BaseAPI {
    /**
     * delete-item
     * @param {ItemEntityControllerApiDeleteItemResourceItemDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemEntityControllerApi
     */
    public deleteItemResourceItemDelete(requestParameters: ItemEntityControllerApiDeleteItemResourceItemDeleteRequest, options?: AxiosRequestConfig) {
        return ItemEntityControllerApiFp(this.configuration).deleteItemResourceItemDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-item
     * @param {ItemEntityControllerApiGetCollectionResourceItemGet1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemEntityControllerApi
     */
    public getCollectionResourceItemGet1(requestParameters: ItemEntityControllerApiGetCollectionResourceItemGet1Request = {}, options?: AxiosRequestConfig) {
        return ItemEntityControllerApiFp(this.configuration).getCollectionResourceItemGet1(requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-item
     * @param {ItemEntityControllerApiGetItemResourceItemGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemEntityControllerApi
     */
    public getItemResourceItemGet(requestParameters: ItemEntityControllerApiGetItemResourceItemGetRequest, options?: AxiosRequestConfig) {
        return ItemEntityControllerApiFp(this.configuration).getItemResourceItemGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * patch-item
     * @param {ItemEntityControllerApiPatchItemResourceItemPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemEntityControllerApi
     */
    public patchItemResourceItemPatch(requestParameters: ItemEntityControllerApiPatchItemResourceItemPatchRequest, options?: AxiosRequestConfig) {
        return ItemEntityControllerApiFp(this.configuration).patchItemResourceItemPatch(requestParameters.id, requestParameters.itemRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * create-item
     * @param {ItemEntityControllerApiPostCollectionResourceItemPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemEntityControllerApi
     */
    public postCollectionResourceItemPost(requestParameters: ItemEntityControllerApiPostCollectionResourceItemPostRequest, options?: AxiosRequestConfig) {
        return ItemEntityControllerApiFp(this.configuration).postCollectionResourceItemPost(requestParameters.itemRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update-item
     * @param {ItemEntityControllerApiPutItemResourceItemPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemEntityControllerApi
     */
    public putItemResourceItemPut(requestParameters: ItemEntityControllerApiPutItemResourceItemPutRequest, options?: AxiosRequestConfig) {
        return ItemEntityControllerApiFp(this.configuration).putItemResourceItemPut(requestParameters.id, requestParameters.itemRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ItemPropertyReferenceControllerApi - axios parameter creator
 * @export
 */
export const ItemPropertyReferenceControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * patch-order-by-item-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceItemPatch: async (id: string, collectionModelObject: CollectionModelObject, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createPropertyReferenceItemPatch', 'id', id)
            // verify required parameter 'collectionModelObject' is not null or undefined
            assertParamExists('createPropertyReferenceItemPatch', 'collectionModelObject', collectionModelObject)
            const localVarPath = `/items/{id}/orders`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(collectionModelObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update-order-by-item-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceItemPut: async (id: string, collectionModelObject: CollectionModelObject, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createPropertyReferenceItemPut', 'id', id)
            // verify required parameter 'collectionModelObject' is not null or undefined
            assertParamExists('createPropertyReferenceItemPut', 'collectionModelObject', collectionModelObject)
            const localVarPath = `/items/{id}/orders`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(collectionModelObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete-order-by-item-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceIdItemDelete: async (id: string, propertyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePropertyReferenceIdItemDelete', 'id', id)
            // verify required parameter 'propertyId' is not null or undefined
            assertParamExists('deletePropertyReferenceIdItemDelete', 'propertyId', propertyId)
            const localVarPath = `/items/{id}/orders/{propertyId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete-order-by-item-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceItemDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePropertyReferenceItemDelete', 'id', id)
            const localVarPath = `/items/{id}/orders`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-order-by-item-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceItemGet: async (id: string, propertyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('followPropertyReferenceItemGet', 'id', id)
            // verify required parameter 'propertyId' is not null or undefined
            assertParamExists('followPropertyReferenceItemGet', 'propertyId', propertyId)
            const localVarPath = `/items/{id}/orders/{propertyId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-order-by-item-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceItemGet1: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('followPropertyReferenceItemGet1', 'id', id)
            const localVarPath = `/items/{id}/orders`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ItemPropertyReferenceControllerApi - functional programming interface
 * @export
 */
export const ItemPropertyReferenceControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ItemPropertyReferenceControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * patch-order-by-item-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPropertyReferenceItemPatch(id: string, collectionModelObject: CollectionModelObject, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelOrder>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPropertyReferenceItemPatch(id, collectionModelObject, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ItemPropertyReferenceControllerApi.createPropertyReferenceItemPatch']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * update-order-by-item-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPropertyReferenceItemPut(id: string, collectionModelObject: CollectionModelObject, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelOrder>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPropertyReferenceItemPut(id, collectionModelObject, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ItemPropertyReferenceControllerApi.createPropertyReferenceItemPut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * delete-order-by-item-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePropertyReferenceIdItemDelete(id: string, propertyId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePropertyReferenceIdItemDelete(id, propertyId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ItemPropertyReferenceControllerApi.deletePropertyReferenceIdItemDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * delete-order-by-item-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePropertyReferenceItemDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePropertyReferenceItemDelete(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ItemPropertyReferenceControllerApi.deletePropertyReferenceItemDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * get-order-by-item-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followPropertyReferenceItemGet(id: string, propertyId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelOrder>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followPropertyReferenceItemGet(id, propertyId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ItemPropertyReferenceControllerApi.followPropertyReferenceItemGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * get-order-by-item-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followPropertyReferenceItemGet1(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelOrder>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followPropertyReferenceItemGet1(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ItemPropertyReferenceControllerApi.followPropertyReferenceItemGet1']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ItemPropertyReferenceControllerApi - factory interface
 * @export
 */
export const ItemPropertyReferenceControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ItemPropertyReferenceControllerApiFp(configuration)
    return {
        /**
         * patch-order-by-item-Id
         * @param {ItemPropertyReferenceControllerApiCreatePropertyReferenceItemPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceItemPatch(requestParameters: ItemPropertyReferenceControllerApiCreatePropertyReferenceItemPatchRequest, options?: AxiosRequestConfig): AxiosPromise<CollectionModelOrder> {
            return localVarFp.createPropertyReferenceItemPatch(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(axios, basePath));
        },
        /**
         * update-order-by-item-Id
         * @param {ItemPropertyReferenceControllerApiCreatePropertyReferenceItemPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceItemPut(requestParameters: ItemPropertyReferenceControllerApiCreatePropertyReferenceItemPutRequest, options?: AxiosRequestConfig): AxiosPromise<CollectionModelOrder> {
            return localVarFp.createPropertyReferenceItemPut(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(axios, basePath));
        },
        /**
         * delete-order-by-item-Id
         * @param {ItemPropertyReferenceControllerApiDeletePropertyReferenceIdItemDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceIdItemDelete(requestParameters: ItemPropertyReferenceControllerApiDeletePropertyReferenceIdItemDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePropertyReferenceIdItemDelete(requestParameters.id, requestParameters.propertyId, options).then((request) => request(axios, basePath));
        },
        /**
         * delete-order-by-item-Id
         * @param {ItemPropertyReferenceControllerApiDeletePropertyReferenceItemDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceItemDelete(requestParameters: ItemPropertyReferenceControllerApiDeletePropertyReferenceItemDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePropertyReferenceItemDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * get-order-by-item-Id
         * @param {ItemPropertyReferenceControllerApiFollowPropertyReferenceItemGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceItemGet(requestParameters: ItemPropertyReferenceControllerApiFollowPropertyReferenceItemGetRequest, options?: AxiosRequestConfig): AxiosPromise<CollectionModelOrder> {
            return localVarFp.followPropertyReferenceItemGet(requestParameters.id, requestParameters.propertyId, options).then((request) => request(axios, basePath));
        },
        /**
         * get-order-by-item-Id
         * @param {ItemPropertyReferenceControllerApiFollowPropertyReferenceItemGet1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceItemGet1(requestParameters: ItemPropertyReferenceControllerApiFollowPropertyReferenceItemGet1Request, options?: AxiosRequestConfig): AxiosPromise<CollectionModelOrder> {
            return localVarFp.followPropertyReferenceItemGet1(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createPropertyReferenceItemPatch operation in ItemPropertyReferenceControllerApi.
 * @export
 * @interface ItemPropertyReferenceControllerApiCreatePropertyReferenceItemPatchRequest
 */
export interface ItemPropertyReferenceControllerApiCreatePropertyReferenceItemPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof ItemPropertyReferenceControllerApiCreatePropertyReferenceItemPatch
     */
    readonly id: string

    /**
     * 
     * @type {CollectionModelObject}
     * @memberof ItemPropertyReferenceControllerApiCreatePropertyReferenceItemPatch
     */
    readonly collectionModelObject: CollectionModelObject
}

/**
 * Request parameters for createPropertyReferenceItemPut operation in ItemPropertyReferenceControllerApi.
 * @export
 * @interface ItemPropertyReferenceControllerApiCreatePropertyReferenceItemPutRequest
 */
export interface ItemPropertyReferenceControllerApiCreatePropertyReferenceItemPutRequest {
    /**
     * 
     * @type {string}
     * @memberof ItemPropertyReferenceControllerApiCreatePropertyReferenceItemPut
     */
    readonly id: string

    /**
     * 
     * @type {CollectionModelObject}
     * @memberof ItemPropertyReferenceControllerApiCreatePropertyReferenceItemPut
     */
    readonly collectionModelObject: CollectionModelObject
}

/**
 * Request parameters for deletePropertyReferenceIdItemDelete operation in ItemPropertyReferenceControllerApi.
 * @export
 * @interface ItemPropertyReferenceControllerApiDeletePropertyReferenceIdItemDeleteRequest
 */
export interface ItemPropertyReferenceControllerApiDeletePropertyReferenceIdItemDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof ItemPropertyReferenceControllerApiDeletePropertyReferenceIdItemDelete
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof ItemPropertyReferenceControllerApiDeletePropertyReferenceIdItemDelete
     */
    readonly propertyId: string
}

/**
 * Request parameters for deletePropertyReferenceItemDelete operation in ItemPropertyReferenceControllerApi.
 * @export
 * @interface ItemPropertyReferenceControllerApiDeletePropertyReferenceItemDeleteRequest
 */
export interface ItemPropertyReferenceControllerApiDeletePropertyReferenceItemDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof ItemPropertyReferenceControllerApiDeletePropertyReferenceItemDelete
     */
    readonly id: string
}

/**
 * Request parameters for followPropertyReferenceItemGet operation in ItemPropertyReferenceControllerApi.
 * @export
 * @interface ItemPropertyReferenceControllerApiFollowPropertyReferenceItemGetRequest
 */
export interface ItemPropertyReferenceControllerApiFollowPropertyReferenceItemGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ItemPropertyReferenceControllerApiFollowPropertyReferenceItemGet
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof ItemPropertyReferenceControllerApiFollowPropertyReferenceItemGet
     */
    readonly propertyId: string
}

/**
 * Request parameters for followPropertyReferenceItemGet1 operation in ItemPropertyReferenceControllerApi.
 * @export
 * @interface ItemPropertyReferenceControllerApiFollowPropertyReferenceItemGet1Request
 */
export interface ItemPropertyReferenceControllerApiFollowPropertyReferenceItemGet1Request {
    /**
     * 
     * @type {string}
     * @memberof ItemPropertyReferenceControllerApiFollowPropertyReferenceItemGet1
     */
    readonly id: string
}

/**
 * ItemPropertyReferenceControllerApi - object-oriented interface
 * @export
 * @class ItemPropertyReferenceControllerApi
 * @extends {BaseAPI}
 */
export class ItemPropertyReferenceControllerApi extends BaseAPI {
    /**
     * patch-order-by-item-Id
     * @param {ItemPropertyReferenceControllerApiCreatePropertyReferenceItemPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemPropertyReferenceControllerApi
     */
    public createPropertyReferenceItemPatch(requestParameters: ItemPropertyReferenceControllerApiCreatePropertyReferenceItemPatchRequest, options?: AxiosRequestConfig) {
        return ItemPropertyReferenceControllerApiFp(this.configuration).createPropertyReferenceItemPatch(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update-order-by-item-Id
     * @param {ItemPropertyReferenceControllerApiCreatePropertyReferenceItemPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemPropertyReferenceControllerApi
     */
    public createPropertyReferenceItemPut(requestParameters: ItemPropertyReferenceControllerApiCreatePropertyReferenceItemPutRequest, options?: AxiosRequestConfig) {
        return ItemPropertyReferenceControllerApiFp(this.configuration).createPropertyReferenceItemPut(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete-order-by-item-Id
     * @param {ItemPropertyReferenceControllerApiDeletePropertyReferenceIdItemDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemPropertyReferenceControllerApi
     */
    public deletePropertyReferenceIdItemDelete(requestParameters: ItemPropertyReferenceControllerApiDeletePropertyReferenceIdItemDeleteRequest, options?: AxiosRequestConfig) {
        return ItemPropertyReferenceControllerApiFp(this.configuration).deletePropertyReferenceIdItemDelete(requestParameters.id, requestParameters.propertyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete-order-by-item-Id
     * @param {ItemPropertyReferenceControllerApiDeletePropertyReferenceItemDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemPropertyReferenceControllerApi
     */
    public deletePropertyReferenceItemDelete(requestParameters: ItemPropertyReferenceControllerApiDeletePropertyReferenceItemDeleteRequest, options?: AxiosRequestConfig) {
        return ItemPropertyReferenceControllerApiFp(this.configuration).deletePropertyReferenceItemDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-order-by-item-Id
     * @param {ItemPropertyReferenceControllerApiFollowPropertyReferenceItemGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemPropertyReferenceControllerApi
     */
    public followPropertyReferenceItemGet(requestParameters: ItemPropertyReferenceControllerApiFollowPropertyReferenceItemGetRequest, options?: AxiosRequestConfig) {
        return ItemPropertyReferenceControllerApiFp(this.configuration).followPropertyReferenceItemGet(requestParameters.id, requestParameters.propertyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-order-by-item-Id
     * @param {ItemPropertyReferenceControllerApiFollowPropertyReferenceItemGet1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemPropertyReferenceControllerApi
     */
    public followPropertyReferenceItemGet1(requestParameters: ItemPropertyReferenceControllerApiFollowPropertyReferenceItemGet1Request, options?: AxiosRequestConfig) {
        return ItemPropertyReferenceControllerApiFp(this.configuration).followPropertyReferenceItemGet1(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrderEntityControllerApi - axios parameter creator
 * @export
 */
export const OrderEntityControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * delete-order
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemResourceOrderDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteItemResourceOrderDelete', 'id', id)
            const localVarPath = `/orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-order
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionResourceOrderGet1: async (page?: number, size?: number, sort?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-order
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemResourceOrderGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getItemResourceOrderGet', 'id', id)
            const localVarPath = `/orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * patch-order
         * @param {string} id 
         * @param {OrderRequestBody} orderRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchItemResourceOrderPatch: async (id: string, orderRequestBody: OrderRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchItemResourceOrderPatch', 'id', id)
            // verify required parameter 'orderRequestBody' is not null or undefined
            assertParamExists('patchItemResourceOrderPatch', 'orderRequestBody', orderRequestBody)
            const localVarPath = `/orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * create-order
         * @param {OrderRequestBody} orderRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCollectionResourceOrderPost: async (orderRequestBody: OrderRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderRequestBody' is not null or undefined
            assertParamExists('postCollectionResourceOrderPost', 'orderRequestBody', orderRequestBody)
            const localVarPath = `/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update-order
         * @param {string} id 
         * @param {OrderRequestBody} orderRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putItemResourceOrderPut: async (id: string, orderRequestBody: OrderRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putItemResourceOrderPut', 'id', id)
            // verify required parameter 'orderRequestBody' is not null or undefined
            assertParamExists('putItemResourceOrderPut', 'orderRequestBody', orderRequestBody)
            const localVarPath = `/orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderEntityControllerApi - functional programming interface
 * @export
 */
export const OrderEntityControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderEntityControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * delete-order
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteItemResourceOrderDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteItemResourceOrderDelete(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderEntityControllerApi.deleteItemResourceOrderDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * get-order
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollectionResourceOrderGet1(page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedModelEntityModelOrder>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCollectionResourceOrderGet1(page, size, sort, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderEntityControllerApi.getCollectionResourceOrderGet1']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * get-order
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemResourceOrderGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelOrder>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemResourceOrderGet(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderEntityControllerApi.getItemResourceOrderGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * patch-order
         * @param {string} id 
         * @param {OrderRequestBody} orderRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchItemResourceOrderPatch(id: string, orderRequestBody: OrderRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelOrder>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchItemResourceOrderPatch(id, orderRequestBody, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderEntityControllerApi.patchItemResourceOrderPatch']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * create-order
         * @param {OrderRequestBody} orderRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCollectionResourceOrderPost(orderRequestBody: OrderRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelOrder>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCollectionResourceOrderPost(orderRequestBody, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderEntityControllerApi.postCollectionResourceOrderPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * update-order
         * @param {string} id 
         * @param {OrderRequestBody} orderRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putItemResourceOrderPut(id: string, orderRequestBody: OrderRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelOrder>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putItemResourceOrderPut(id, orderRequestBody, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderEntityControllerApi.putItemResourceOrderPut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * OrderEntityControllerApi - factory interface
 * @export
 */
export const OrderEntityControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderEntityControllerApiFp(configuration)
    return {
        /**
         * delete-order
         * @param {OrderEntityControllerApiDeleteItemResourceOrderDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemResourceOrderDelete(requestParameters: OrderEntityControllerApiDeleteItemResourceOrderDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteItemResourceOrderDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * get-order
         * @param {OrderEntityControllerApiGetCollectionResourceOrderGet1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionResourceOrderGet1(requestParameters: OrderEntityControllerApiGetCollectionResourceOrderGet1Request = {}, options?: AxiosRequestConfig): AxiosPromise<PagedModelEntityModelOrder> {
            return localVarFp.getCollectionResourceOrderGet1(requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * get-order
         * @param {OrderEntityControllerApiGetItemResourceOrderGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemResourceOrderGet(requestParameters: OrderEntityControllerApiGetItemResourceOrderGetRequest, options?: AxiosRequestConfig): AxiosPromise<EntityModelOrder> {
            return localVarFp.getItemResourceOrderGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * patch-order
         * @param {OrderEntityControllerApiPatchItemResourceOrderPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchItemResourceOrderPatch(requestParameters: OrderEntityControllerApiPatchItemResourceOrderPatchRequest, options?: AxiosRequestConfig): AxiosPromise<EntityModelOrder> {
            return localVarFp.patchItemResourceOrderPatch(requestParameters.id, requestParameters.orderRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * create-order
         * @param {OrderEntityControllerApiPostCollectionResourceOrderPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCollectionResourceOrderPost(requestParameters: OrderEntityControllerApiPostCollectionResourceOrderPostRequest, options?: AxiosRequestConfig): AxiosPromise<EntityModelOrder> {
            return localVarFp.postCollectionResourceOrderPost(requestParameters.orderRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * update-order
         * @param {OrderEntityControllerApiPutItemResourceOrderPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putItemResourceOrderPut(requestParameters: OrderEntityControllerApiPutItemResourceOrderPutRequest, options?: AxiosRequestConfig): AxiosPromise<EntityModelOrder> {
            return localVarFp.putItemResourceOrderPut(requestParameters.id, requestParameters.orderRequestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteItemResourceOrderDelete operation in OrderEntityControllerApi.
 * @export
 * @interface OrderEntityControllerApiDeleteItemResourceOrderDeleteRequest
 */
export interface OrderEntityControllerApiDeleteItemResourceOrderDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderEntityControllerApiDeleteItemResourceOrderDelete
     */
    readonly id: string
}

/**
 * Request parameters for getCollectionResourceOrderGet1 operation in OrderEntityControllerApi.
 * @export
 * @interface OrderEntityControllerApiGetCollectionResourceOrderGet1Request
 */
export interface OrderEntityControllerApiGetCollectionResourceOrderGet1Request {
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof OrderEntityControllerApiGetCollectionResourceOrderGet1
     */
    readonly page?: number

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof OrderEntityControllerApiGetCollectionResourceOrderGet1
     */
    readonly size?: number

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof OrderEntityControllerApiGetCollectionResourceOrderGet1
     */
    readonly sort?: Array<string>
}

/**
 * Request parameters for getItemResourceOrderGet operation in OrderEntityControllerApi.
 * @export
 * @interface OrderEntityControllerApiGetItemResourceOrderGetRequest
 */
export interface OrderEntityControllerApiGetItemResourceOrderGetRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderEntityControllerApiGetItemResourceOrderGet
     */
    readonly id: string
}

/**
 * Request parameters for patchItemResourceOrderPatch operation in OrderEntityControllerApi.
 * @export
 * @interface OrderEntityControllerApiPatchItemResourceOrderPatchRequest
 */
export interface OrderEntityControllerApiPatchItemResourceOrderPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderEntityControllerApiPatchItemResourceOrderPatch
     */
    readonly id: string

    /**
     * 
     * @type {OrderRequestBody}
     * @memberof OrderEntityControllerApiPatchItemResourceOrderPatch
     */
    readonly orderRequestBody: OrderRequestBody
}

/**
 * Request parameters for postCollectionResourceOrderPost operation in OrderEntityControllerApi.
 * @export
 * @interface OrderEntityControllerApiPostCollectionResourceOrderPostRequest
 */
export interface OrderEntityControllerApiPostCollectionResourceOrderPostRequest {
    /**
     * 
     * @type {OrderRequestBody}
     * @memberof OrderEntityControllerApiPostCollectionResourceOrderPost
     */
    readonly orderRequestBody: OrderRequestBody
}

/**
 * Request parameters for putItemResourceOrderPut operation in OrderEntityControllerApi.
 * @export
 * @interface OrderEntityControllerApiPutItemResourceOrderPutRequest
 */
export interface OrderEntityControllerApiPutItemResourceOrderPutRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderEntityControllerApiPutItemResourceOrderPut
     */
    readonly id: string

    /**
     * 
     * @type {OrderRequestBody}
     * @memberof OrderEntityControllerApiPutItemResourceOrderPut
     */
    readonly orderRequestBody: OrderRequestBody
}

/**
 * OrderEntityControllerApi - object-oriented interface
 * @export
 * @class OrderEntityControllerApi
 * @extends {BaseAPI}
 */
export class OrderEntityControllerApi extends BaseAPI {
    /**
     * delete-order
     * @param {OrderEntityControllerApiDeleteItemResourceOrderDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEntityControllerApi
     */
    public deleteItemResourceOrderDelete(requestParameters: OrderEntityControllerApiDeleteItemResourceOrderDeleteRequest, options?: AxiosRequestConfig) {
        return OrderEntityControllerApiFp(this.configuration).deleteItemResourceOrderDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-order
     * @param {OrderEntityControllerApiGetCollectionResourceOrderGet1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEntityControllerApi
     */
    public getCollectionResourceOrderGet1(requestParameters: OrderEntityControllerApiGetCollectionResourceOrderGet1Request = {}, options?: AxiosRequestConfig) {
        return OrderEntityControllerApiFp(this.configuration).getCollectionResourceOrderGet1(requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-order
     * @param {OrderEntityControllerApiGetItemResourceOrderGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEntityControllerApi
     */
    public getItemResourceOrderGet(requestParameters: OrderEntityControllerApiGetItemResourceOrderGetRequest, options?: AxiosRequestConfig) {
        return OrderEntityControllerApiFp(this.configuration).getItemResourceOrderGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * patch-order
     * @param {OrderEntityControllerApiPatchItemResourceOrderPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEntityControllerApi
     */
    public patchItemResourceOrderPatch(requestParameters: OrderEntityControllerApiPatchItemResourceOrderPatchRequest, options?: AxiosRequestConfig) {
        return OrderEntityControllerApiFp(this.configuration).patchItemResourceOrderPatch(requestParameters.id, requestParameters.orderRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * create-order
     * @param {OrderEntityControllerApiPostCollectionResourceOrderPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEntityControllerApi
     */
    public postCollectionResourceOrderPost(requestParameters: OrderEntityControllerApiPostCollectionResourceOrderPostRequest, options?: AxiosRequestConfig) {
        return OrderEntityControllerApiFp(this.configuration).postCollectionResourceOrderPost(requestParameters.orderRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update-order
     * @param {OrderEntityControllerApiPutItemResourceOrderPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEntityControllerApi
     */
    public putItemResourceOrderPut(requestParameters: OrderEntityControllerApiPutItemResourceOrderPutRequest, options?: AxiosRequestConfig) {
        return OrderEntityControllerApiFp(this.configuration).putItemResourceOrderPut(requestParameters.id, requestParameters.orderRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrderPropertyReferenceControllerApi - axios parameter creator
 * @export
 */
export const OrderPropertyReferenceControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * patch-item-by-order-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceOrderPatch: async (id: string, collectionModelObject: CollectionModelObject, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createPropertyReferenceOrderPatch', 'id', id)
            // verify required parameter 'collectionModelObject' is not null or undefined
            assertParamExists('createPropertyReferenceOrderPatch', 'collectionModelObject', collectionModelObject)
            const localVarPath = `/orders/{id}/items`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(collectionModelObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update-item-by-order-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceOrderPut: async (id: string, collectionModelObject: CollectionModelObject, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createPropertyReferenceOrderPut', 'id', id)
            // verify required parameter 'collectionModelObject' is not null or undefined
            assertParamExists('createPropertyReferenceOrderPut', 'collectionModelObject', collectionModelObject)
            const localVarPath = `/orders/{id}/items`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(collectionModelObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete-item-by-order-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceIdOrderDelete: async (id: string, propertyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePropertyReferenceIdOrderDelete', 'id', id)
            // verify required parameter 'propertyId' is not null or undefined
            assertParamExists('deletePropertyReferenceIdOrderDelete', 'propertyId', propertyId)
            const localVarPath = `/orders/{id}/items/{propertyId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete-item-by-order-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceOrderDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePropertyReferenceOrderDelete', 'id', id)
            const localVarPath = `/orders/{id}/items`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-item-by-order-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceOrderGet: async (id: string, propertyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('followPropertyReferenceOrderGet', 'id', id)
            // verify required parameter 'propertyId' is not null or undefined
            assertParamExists('followPropertyReferenceOrderGet', 'propertyId', propertyId)
            const localVarPath = `/orders/{id}/items/{propertyId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-item-by-order-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceOrderGet1: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('followPropertyReferenceOrderGet1', 'id', id)
            const localVarPath = `/orders/{id}/items`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderPropertyReferenceControllerApi - functional programming interface
 * @export
 */
export const OrderPropertyReferenceControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderPropertyReferenceControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * patch-item-by-order-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPropertyReferenceOrderPatch(id: string, collectionModelObject: CollectionModelObject, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPropertyReferenceOrderPatch(id, collectionModelObject, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderPropertyReferenceControllerApi.createPropertyReferenceOrderPatch']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * update-item-by-order-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPropertyReferenceOrderPut(id: string, collectionModelObject: CollectionModelObject, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPropertyReferenceOrderPut(id, collectionModelObject, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderPropertyReferenceControllerApi.createPropertyReferenceOrderPut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * delete-item-by-order-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePropertyReferenceIdOrderDelete(id: string, propertyId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePropertyReferenceIdOrderDelete(id, propertyId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderPropertyReferenceControllerApi.deletePropertyReferenceIdOrderDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * delete-item-by-order-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePropertyReferenceOrderDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePropertyReferenceOrderDelete(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderPropertyReferenceControllerApi.deletePropertyReferenceOrderDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * get-item-by-order-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followPropertyReferenceOrderGet(id: string, propertyId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followPropertyReferenceOrderGet(id, propertyId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderPropertyReferenceControllerApi.followPropertyReferenceOrderGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * get-item-by-order-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followPropertyReferenceOrderGet1(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followPropertyReferenceOrderGet1(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderPropertyReferenceControllerApi.followPropertyReferenceOrderGet1']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * OrderPropertyReferenceControllerApi - factory interface
 * @export
 */
export const OrderPropertyReferenceControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderPropertyReferenceControllerApiFp(configuration)
    return {
        /**
         * patch-item-by-order-Id
         * @param {OrderPropertyReferenceControllerApiCreatePropertyReferenceOrderPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceOrderPatch(requestParameters: OrderPropertyReferenceControllerApiCreatePropertyReferenceOrderPatchRequest, options?: AxiosRequestConfig): AxiosPromise<CollectionModelItem> {
            return localVarFp.createPropertyReferenceOrderPatch(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(axios, basePath));
        },
        /**
         * update-item-by-order-Id
         * @param {OrderPropertyReferenceControllerApiCreatePropertyReferenceOrderPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceOrderPut(requestParameters: OrderPropertyReferenceControllerApiCreatePropertyReferenceOrderPutRequest, options?: AxiosRequestConfig): AxiosPromise<CollectionModelItem> {
            return localVarFp.createPropertyReferenceOrderPut(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(axios, basePath));
        },
        /**
         * delete-item-by-order-Id
         * @param {OrderPropertyReferenceControllerApiDeletePropertyReferenceIdOrderDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceIdOrderDelete(requestParameters: OrderPropertyReferenceControllerApiDeletePropertyReferenceIdOrderDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePropertyReferenceIdOrderDelete(requestParameters.id, requestParameters.propertyId, options).then((request) => request(axios, basePath));
        },
        /**
         * delete-item-by-order-Id
         * @param {OrderPropertyReferenceControllerApiDeletePropertyReferenceOrderDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceOrderDelete(requestParameters: OrderPropertyReferenceControllerApiDeletePropertyReferenceOrderDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePropertyReferenceOrderDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * get-item-by-order-Id
         * @param {OrderPropertyReferenceControllerApiFollowPropertyReferenceOrderGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceOrderGet(requestParameters: OrderPropertyReferenceControllerApiFollowPropertyReferenceOrderGetRequest, options?: AxiosRequestConfig): AxiosPromise<CollectionModelItem> {
            return localVarFp.followPropertyReferenceOrderGet(requestParameters.id, requestParameters.propertyId, options).then((request) => request(axios, basePath));
        },
        /**
         * get-item-by-order-Id
         * @param {OrderPropertyReferenceControllerApiFollowPropertyReferenceOrderGet1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceOrderGet1(requestParameters: OrderPropertyReferenceControllerApiFollowPropertyReferenceOrderGet1Request, options?: AxiosRequestConfig): AxiosPromise<CollectionModelItem> {
            return localVarFp.followPropertyReferenceOrderGet1(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createPropertyReferenceOrderPatch operation in OrderPropertyReferenceControllerApi.
 * @export
 * @interface OrderPropertyReferenceControllerApiCreatePropertyReferenceOrderPatchRequest
 */
export interface OrderPropertyReferenceControllerApiCreatePropertyReferenceOrderPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderPropertyReferenceControllerApiCreatePropertyReferenceOrderPatch
     */
    readonly id: string

    /**
     * 
     * @type {CollectionModelObject}
     * @memberof OrderPropertyReferenceControllerApiCreatePropertyReferenceOrderPatch
     */
    readonly collectionModelObject: CollectionModelObject
}

/**
 * Request parameters for createPropertyReferenceOrderPut operation in OrderPropertyReferenceControllerApi.
 * @export
 * @interface OrderPropertyReferenceControllerApiCreatePropertyReferenceOrderPutRequest
 */
export interface OrderPropertyReferenceControllerApiCreatePropertyReferenceOrderPutRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderPropertyReferenceControllerApiCreatePropertyReferenceOrderPut
     */
    readonly id: string

    /**
     * 
     * @type {CollectionModelObject}
     * @memberof OrderPropertyReferenceControllerApiCreatePropertyReferenceOrderPut
     */
    readonly collectionModelObject: CollectionModelObject
}

/**
 * Request parameters for deletePropertyReferenceIdOrderDelete operation in OrderPropertyReferenceControllerApi.
 * @export
 * @interface OrderPropertyReferenceControllerApiDeletePropertyReferenceIdOrderDeleteRequest
 */
export interface OrderPropertyReferenceControllerApiDeletePropertyReferenceIdOrderDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderPropertyReferenceControllerApiDeletePropertyReferenceIdOrderDelete
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof OrderPropertyReferenceControllerApiDeletePropertyReferenceIdOrderDelete
     */
    readonly propertyId: string
}

/**
 * Request parameters for deletePropertyReferenceOrderDelete operation in OrderPropertyReferenceControllerApi.
 * @export
 * @interface OrderPropertyReferenceControllerApiDeletePropertyReferenceOrderDeleteRequest
 */
export interface OrderPropertyReferenceControllerApiDeletePropertyReferenceOrderDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderPropertyReferenceControllerApiDeletePropertyReferenceOrderDelete
     */
    readonly id: string
}

/**
 * Request parameters for followPropertyReferenceOrderGet operation in OrderPropertyReferenceControllerApi.
 * @export
 * @interface OrderPropertyReferenceControllerApiFollowPropertyReferenceOrderGetRequest
 */
export interface OrderPropertyReferenceControllerApiFollowPropertyReferenceOrderGetRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderPropertyReferenceControllerApiFollowPropertyReferenceOrderGet
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof OrderPropertyReferenceControllerApiFollowPropertyReferenceOrderGet
     */
    readonly propertyId: string
}

/**
 * Request parameters for followPropertyReferenceOrderGet1 operation in OrderPropertyReferenceControllerApi.
 * @export
 * @interface OrderPropertyReferenceControllerApiFollowPropertyReferenceOrderGet1Request
 */
export interface OrderPropertyReferenceControllerApiFollowPropertyReferenceOrderGet1Request {
    /**
     * 
     * @type {string}
     * @memberof OrderPropertyReferenceControllerApiFollowPropertyReferenceOrderGet1
     */
    readonly id: string
}

/**
 * OrderPropertyReferenceControllerApi - object-oriented interface
 * @export
 * @class OrderPropertyReferenceControllerApi
 * @extends {BaseAPI}
 */
export class OrderPropertyReferenceControllerApi extends BaseAPI {
    /**
     * patch-item-by-order-Id
     * @param {OrderPropertyReferenceControllerApiCreatePropertyReferenceOrderPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderPropertyReferenceControllerApi
     */
    public createPropertyReferenceOrderPatch(requestParameters: OrderPropertyReferenceControllerApiCreatePropertyReferenceOrderPatchRequest, options?: AxiosRequestConfig) {
        return OrderPropertyReferenceControllerApiFp(this.configuration).createPropertyReferenceOrderPatch(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update-item-by-order-Id
     * @param {OrderPropertyReferenceControllerApiCreatePropertyReferenceOrderPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderPropertyReferenceControllerApi
     */
    public createPropertyReferenceOrderPut(requestParameters: OrderPropertyReferenceControllerApiCreatePropertyReferenceOrderPutRequest, options?: AxiosRequestConfig) {
        return OrderPropertyReferenceControllerApiFp(this.configuration).createPropertyReferenceOrderPut(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete-item-by-order-Id
     * @param {OrderPropertyReferenceControllerApiDeletePropertyReferenceIdOrderDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderPropertyReferenceControllerApi
     */
    public deletePropertyReferenceIdOrderDelete(requestParameters: OrderPropertyReferenceControllerApiDeletePropertyReferenceIdOrderDeleteRequest, options?: AxiosRequestConfig) {
        return OrderPropertyReferenceControllerApiFp(this.configuration).deletePropertyReferenceIdOrderDelete(requestParameters.id, requestParameters.propertyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete-item-by-order-Id
     * @param {OrderPropertyReferenceControllerApiDeletePropertyReferenceOrderDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderPropertyReferenceControllerApi
     */
    public deletePropertyReferenceOrderDelete(requestParameters: OrderPropertyReferenceControllerApiDeletePropertyReferenceOrderDeleteRequest, options?: AxiosRequestConfig) {
        return OrderPropertyReferenceControllerApiFp(this.configuration).deletePropertyReferenceOrderDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-item-by-order-Id
     * @param {OrderPropertyReferenceControllerApiFollowPropertyReferenceOrderGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderPropertyReferenceControllerApi
     */
    public followPropertyReferenceOrderGet(requestParameters: OrderPropertyReferenceControllerApiFollowPropertyReferenceOrderGetRequest, options?: AxiosRequestConfig) {
        return OrderPropertyReferenceControllerApiFp(this.configuration).followPropertyReferenceOrderGet(requestParameters.id, requestParameters.propertyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-item-by-order-Id
     * @param {OrderPropertyReferenceControllerApiFollowPropertyReferenceOrderGet1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderPropertyReferenceControllerApi
     */
    public followPropertyReferenceOrderGet1(requestParameters: OrderPropertyReferenceControllerApiFollowPropertyReferenceOrderGet1Request, options?: AxiosRequestConfig) {
        return OrderPropertyReferenceControllerApiFp(this.configuration).followPropertyReferenceOrderGet1(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProfileControllerApi - axios parameter creator
 * @export
 */
export const ProfileControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        descriptor111: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/profile/items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        descriptor112: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/profile/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllFormsOfMetadata1: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfileControllerApi - functional programming interface
 * @export
 */
export const ProfileControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProfileControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async descriptor111(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.descriptor111(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProfileControllerApi.descriptor111']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async descriptor112(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.descriptor112(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProfileControllerApi.descriptor112']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllFormsOfMetadata1(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RepresentationModelObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllFormsOfMetadata1(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProfileControllerApi.listAllFormsOfMetadata1']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ProfileControllerApi - factory interface
 * @export
 */
export const ProfileControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProfileControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        descriptor111(options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.descriptor111(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        descriptor112(options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.descriptor112(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllFormsOfMetadata1(options?: AxiosRequestConfig): AxiosPromise<RepresentationModelObject> {
            return localVarFp.listAllFormsOfMetadata1(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProfileControllerApi - object-oriented interface
 * @export
 * @class ProfileControllerApi
 * @extends {BaseAPI}
 */
export class ProfileControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileControllerApi
     */
    public descriptor111(options?: AxiosRequestConfig) {
        return ProfileControllerApiFp(this.configuration).descriptor111(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileControllerApi
     */
    public descriptor112(options?: AxiosRequestConfig) {
        return ProfileControllerApiFp(this.configuration).descriptor112(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileControllerApi
     */
    public listAllFormsOfMetadata1(options?: AxiosRequestConfig) {
        return ProfileControllerApiFp(this.configuration).listAllFormsOfMetadata1(options).then((request) => request(this.axios, this.basePath));
    }
}




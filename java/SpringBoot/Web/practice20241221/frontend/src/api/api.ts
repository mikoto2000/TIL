/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AbstractJsonSchemaPropertyObject
 */
export interface AbstractJsonSchemaPropertyObject {
    /**
     * 
     * @type {string}
     * @memberof AbstractJsonSchemaPropertyObject
     */
    'title'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AbstractJsonSchemaPropertyObject
     */
    'readOnly'?: boolean;
}
/**
 * 
 * @export
 * @interface AuthorRequestBody
 */
export interface AuthorRequestBody {
    /**
     * 
     * @type {number}
     * @memberof AuthorRequestBody
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AuthorRequestBody
     */
    'name'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AuthorRequestBody
     */
    'bookMaster'?: Array<string>;
}
/**
 * 
 * @export
 * @interface AuthorResponse
 */
export interface AuthorResponse {
    /**
     * 
     * @type {string}
     * @memberof AuthorResponse
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface BookMasterAuthorRelationshipRequestBody
 */
export interface BookMasterAuthorRelationshipRequestBody {
    /**
     * 
     * @type {number}
     * @memberof BookMasterAuthorRelationshipRequestBody
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof BookMasterAuthorRelationshipRequestBody
     */
    'bookMaster'?: string;
    /**
     * 
     * @type {string}
     * @memberof BookMasterAuthorRelationshipRequestBody
     */
    'author'?: string;
}
/**
 * 
 * @export
 * @interface BookMasterRequestBody
 */
export interface BookMasterRequestBody {
    /**
     * 
     * @type {string}
     * @memberof BookMasterRequestBody
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof BookMasterRequestBody
     */
    'publicationDate': string;
    /**
     * 
     * @type {string}
     * @memberof BookMasterRequestBody
     */
    'ndcCategory': string;
    /**
     * 
     * @type {number}
     * @memberof BookMasterRequestBody
     */
    'id'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof BookMasterRequestBody
     */
    'author'?: Array<string>;
}
/**
 * 
 * @export
 * @interface BookMasterResponse
 */
export interface BookMasterResponse {
    /**
     * 
     * @type {string}
     * @memberof BookMasterResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof BookMasterResponse
     */
    'publicationDate': string;
}
/**
 * 
 * @export
 * @interface CollectionModelAuthor
 */
export interface CollectionModelAuthor {
    /**
     * 
     * @type {CollectionModelAuthorEmbedded}
     * @memberof CollectionModelAuthor
     */
    '_embedded'?: CollectionModelAuthorEmbedded;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof CollectionModelAuthor
     */
    '_links'?: { [key: string]: Link; };
}
/**
 * 
 * @export
 * @interface CollectionModelAuthorEmbedded
 */
export interface CollectionModelAuthorEmbedded {
    /**
     * 
     * @type {Array<AuthorResponse>}
     * @memberof CollectionModelAuthorEmbedded
     */
    'authors'?: Array<AuthorResponse>;
}
/**
 * 
 * @export
 * @interface CollectionModelBookMaster
 */
export interface CollectionModelBookMaster {
    /**
     * 
     * @type {CollectionModelBookMasterEmbedded}
     * @memberof CollectionModelBookMaster
     */
    '_embedded'?: CollectionModelBookMasterEmbedded;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof CollectionModelBookMaster
     */
    '_links'?: { [key: string]: Link; };
}
/**
 * 
 * @export
 * @interface CollectionModelBookMasterEmbedded
 */
export interface CollectionModelBookMasterEmbedded {
    /**
     * 
     * @type {Array<BookMasterResponse>}
     * @memberof CollectionModelBookMasterEmbedded
     */
    'bookMasters'?: Array<BookMasterResponse>;
}
/**
 * 
 * @export
 * @interface CollectionModelEntityModelBookMasterAuthorRelationship
 */
export interface CollectionModelEntityModelBookMasterAuthorRelationship {
    /**
     * 
     * @type {CollectionModelEntityModelBookMasterAuthorRelationshipEmbedded}
     * @memberof CollectionModelEntityModelBookMasterAuthorRelationship
     */
    '_embedded'?: CollectionModelEntityModelBookMasterAuthorRelationshipEmbedded;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof CollectionModelEntityModelBookMasterAuthorRelationship
     */
    '_links'?: { [key: string]: Link; };
}
/**
 * 
 * @export
 * @interface CollectionModelEntityModelBookMasterAuthorRelationshipEmbedded
 */
export interface CollectionModelEntityModelBookMasterAuthorRelationshipEmbedded {
    /**
     * 
     * @type {Array<EntityModelBookMasterAuthorRelationship>}
     * @memberof CollectionModelEntityModelBookMasterAuthorRelationshipEmbedded
     */
    'bookMasterAuthorRelationships'?: Array<EntityModelBookMasterAuthorRelationship>;
}
/**
 * 
 * @export
 * @interface CollectionModelObject
 */
export interface CollectionModelObject {
    /**
     * 
     * @type {CollectionModelObjectEmbedded}
     * @memberof CollectionModelObject
     */
    '_embedded'?: CollectionModelObjectEmbedded;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof CollectionModelObject
     */
    '_links'?: { [key: string]: Link; };
}
/**
 * 
 * @export
 * @interface CollectionModelObjectEmbedded
 */
export interface CollectionModelObjectEmbedded {
    /**
     * 
     * @type {Array<object>}
     * @memberof CollectionModelObjectEmbedded
     */
    'objects'?: Array<object>;
}
/**
 * 
 * @export
 * @interface EntityModelAuthor
 */
export interface EntityModelAuthor {
    /**
     * 
     * @type {string}
     * @memberof EntityModelAuthor
     */
    'name'?: string;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof EntityModelAuthor
     */
    '_links'?: { [key: string]: Link; };
}
/**
 * 
 * @export
 * @interface EntityModelBookMaster
 */
export interface EntityModelBookMaster {
    /**
     * 
     * @type {string}
     * @memberof EntityModelBookMaster
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof EntityModelBookMaster
     */
    'publicationDate': string;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof EntityModelBookMaster
     */
    '_links'?: { [key: string]: Link; };
}
/**
 * 
 * @export
 * @interface EntityModelBookMasterAuthorRelationship
 */
export interface EntityModelBookMasterAuthorRelationship {
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof EntityModelBookMasterAuthorRelationship
     */
    '_links'?: { [key: string]: Link; };
}
/**
 * 
 * @export
 * @interface EntityModelNdcCategory
 */
export interface EntityModelNdcCategory {
    /**
     * 
     * @type {string}
     * @memberof EntityModelNdcCategory
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof EntityModelNdcCategory
     */
    'number'?: number;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof EntityModelNdcCategory
     */
    '_links'?: { [key: string]: Link; };
}
/**
 * 
 * @export
 * @interface Item
 */
export interface Item {
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    'type'?: string;
    /**
     * 
     * @type {{ [key: string]: AbstractJsonSchemaPropertyObject; }}
     * @memberof Item
     */
    'properties'?: { [key: string]: AbstractJsonSchemaPropertyObject; };
    /**
     * 
     * @type {Array<string>}
     * @memberof Item
     */
    'requiredProperties'?: Array<string>;
}
/**
 * 
 * @export
 * @interface JsonSchema
 */
export interface JsonSchema {
    /**
     * 
     * @type {string}
     * @memberof JsonSchema
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof JsonSchema
     */
    'description'?: string;
    /**
     * 
     * @type {{ [key: string]: AbstractJsonSchemaPropertyObject; }}
     * @memberof JsonSchema
     */
    'properties'?: { [key: string]: AbstractJsonSchemaPropertyObject; };
    /**
     * 
     * @type {Array<string>}
     * @memberof JsonSchema
     */
    'requiredProperties'?: Array<string>;
    /**
     * 
     * @type {{ [key: string]: Item; }}
     * @memberof JsonSchema
     */
    'definitions'?: { [key: string]: Item; };
    /**
     * 
     * @type {string}
     * @memberof JsonSchema
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof JsonSchema
     */
    '$schema'?: string;
}
/**
 * 
 * @export
 * @interface Link
 */
export interface Link {
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    'href'?: string;
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    'hreflang'?: string;
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    'deprecation'?: string;
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    'profile'?: string;
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Link
     */
    'templated'?: boolean;
}
/**
 * 
 * @export
 * @interface NdcCategoryRequestBody
 */
export interface NdcCategoryRequestBody {
    /**
     * 
     * @type {number}
     * @memberof NdcCategoryRequestBody
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof NdcCategoryRequestBody
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof NdcCategoryRequestBody
     */
    'number'?: number;
}
/**
 * 
 * @export
 * @interface PageMapStringObject
 */
export interface PageMapStringObject {
    /**
     * 
     * @type {number}
     * @memberof PageMapStringObject
     */
    'totalElements'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageMapStringObject
     */
    'totalPages'?: number;
    /**
     * 
     * @type {PageableObject}
     * @memberof PageMapStringObject
     */
    'pageable'?: PageableObject;
    /**
     * 
     * @type {number}
     * @memberof PageMapStringObject
     */
    'size'?: number;
    /**
     * 
     * @type {Array<{ [key: string]: object; }>}
     * @memberof PageMapStringObject
     */
    'content'?: Array<{ [key: string]: object; }>;
    /**
     * 
     * @type {number}
     * @memberof PageMapStringObject
     */
    'number'?: number;
    /**
     * 
     * @type {SortObject}
     * @memberof PageMapStringObject
     */
    'sort'?: SortObject;
    /**
     * 
     * @type {boolean}
     * @memberof PageMapStringObject
     */
    'first'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageMapStringObject
     */
    'last'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PageMapStringObject
     */
    'numberOfElements'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PageMapStringObject
     */
    'empty'?: boolean;
}
/**
 * 
 * @export
 * @interface PageMetadata
 */
export interface PageMetadata {
    /**
     * 
     * @type {number}
     * @memberof PageMetadata
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageMetadata
     */
    'totalElements'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageMetadata
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageMetadata
     */
    'number'?: number;
}
/**
 * 
 * @export
 * @interface PageableObject
 */
export interface PageableObject {
    /**
     * 
     * @type {boolean}
     * @memberof PageableObject
     */
    'paged'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    'offset'?: number;
    /**
     * 
     * @type {SortObject}
     * @memberof PageableObject
     */
    'sort'?: SortObject;
    /**
     * 
     * @type {boolean}
     * @memberof PageableObject
     */
    'unpaged'?: boolean;
}
/**
 * 
 * @export
 * @interface PagedModelEntityModelAuthor
 */
export interface PagedModelEntityModelAuthor {
    /**
     * 
     * @type {PagedModelEntityModelAuthorEmbedded}
     * @memberof PagedModelEntityModelAuthor
     */
    '_embedded'?: PagedModelEntityModelAuthorEmbedded;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof PagedModelEntityModelAuthor
     */
    '_links'?: { [key: string]: Link; };
    /**
     * 
     * @type {PageMetadata}
     * @memberof PagedModelEntityModelAuthor
     */
    'page'?: PageMetadata;
}
/**
 * 
 * @export
 * @interface PagedModelEntityModelAuthorEmbedded
 */
export interface PagedModelEntityModelAuthorEmbedded {
    /**
     * 
     * @type {Array<EntityModelAuthor>}
     * @memberof PagedModelEntityModelAuthorEmbedded
     */
    'authors'?: Array<EntityModelAuthor>;
}
/**
 * 
 * @export
 * @interface PagedModelEntityModelBookMaster
 */
export interface PagedModelEntityModelBookMaster {
    /**
     * 
     * @type {PagedModelEntityModelBookMasterEmbedded}
     * @memberof PagedModelEntityModelBookMaster
     */
    '_embedded'?: PagedModelEntityModelBookMasterEmbedded;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof PagedModelEntityModelBookMaster
     */
    '_links'?: { [key: string]: Link; };
    /**
     * 
     * @type {PageMetadata}
     * @memberof PagedModelEntityModelBookMaster
     */
    'page'?: PageMetadata;
}
/**
 * 
 * @export
 * @interface PagedModelEntityModelBookMasterEmbedded
 */
export interface PagedModelEntityModelBookMasterEmbedded {
    /**
     * 
     * @type {Array<EntityModelBookMaster>}
     * @memberof PagedModelEntityModelBookMasterEmbedded
     */
    'bookMasters'?: Array<EntityModelBookMaster>;
}
/**
 * 
 * @export
 * @interface PagedModelEntityModelNdcCategory
 */
export interface PagedModelEntityModelNdcCategory {
    /**
     * 
     * @type {PagedModelEntityModelNdcCategoryEmbedded}
     * @memberof PagedModelEntityModelNdcCategory
     */
    '_embedded'?: PagedModelEntityModelNdcCategoryEmbedded;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof PagedModelEntityModelNdcCategory
     */
    '_links'?: { [key: string]: Link; };
    /**
     * 
     * @type {PageMetadata}
     * @memberof PagedModelEntityModelNdcCategory
     */
    'page'?: PageMetadata;
}
/**
 * 
 * @export
 * @interface PagedModelEntityModelNdcCategoryEmbedded
 */
export interface PagedModelEntityModelNdcCategoryEmbedded {
    /**
     * 
     * @type {Array<EntityModelNdcCategory>}
     * @memberof PagedModelEntityModelNdcCategoryEmbedded
     */
    'ndcCategories'?: Array<EntityModelNdcCategory>;
}
/**
 * 
 * @export
 * @interface RepresentationModelObject
 */
export interface RepresentationModelObject {
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof RepresentationModelObject
     */
    '_links'?: { [key: string]: Link; };
}
/**
 * 
 * @export
 * @interface SortObject
 */
export interface SortObject {
    /**
     * 
     * @type {boolean}
     * @memberof SortObject
     */
    'sorted'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SortObject
     */
    'empty'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SortObject
     */
    'unsorted'?: boolean;
}

/**
 * AuthorEntityControllerApi - axios parameter creator
 * @export
 */
export const AuthorEntityControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * delete-author
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemResourceAuthorDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteItemResourceAuthorDelete', 'id', id)
            const localVarPath = `/authors/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-author
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionResourceAuthorGet: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/authors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-author
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemResourceAuthorGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getItemResourceAuthorGet', 'id', id)
            const localVarPath = `/authors/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * patch-author
         * @param {string} id 
         * @param {AuthorRequestBody} authorRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchItemResourceAuthorPatch: async (id: string, authorRequestBody: AuthorRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchItemResourceAuthorPatch', 'id', id)
            // verify required parameter 'authorRequestBody' is not null or undefined
            assertParamExists('patchItemResourceAuthorPatch', 'authorRequestBody', authorRequestBody)
            const localVarPath = `/authors/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authorRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * create-author
         * @param {AuthorRequestBody} authorRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCollectionResourceAuthorPost: async (authorRequestBody: AuthorRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorRequestBody' is not null or undefined
            assertParamExists('postCollectionResourceAuthorPost', 'authorRequestBody', authorRequestBody)
            const localVarPath = `/authors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authorRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update-author
         * @param {string} id 
         * @param {AuthorRequestBody} authorRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putItemResourceAuthorPut: async (id: string, authorRequestBody: AuthorRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putItemResourceAuthorPut', 'id', id)
            // verify required parameter 'authorRequestBody' is not null or undefined
            assertParamExists('putItemResourceAuthorPut', 'authorRequestBody', authorRequestBody)
            const localVarPath = `/authors/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authorRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthorEntityControllerApi - functional programming interface
 * @export
 */
export const AuthorEntityControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthorEntityControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * delete-author
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteItemResourceAuthorDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteItemResourceAuthorDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorEntityControllerApi.deleteItemResourceAuthorDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-author
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollectionResourceAuthorGet(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedModelEntityModelAuthor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCollectionResourceAuthorGet(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorEntityControllerApi.getCollectionResourceAuthorGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-author
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemResourceAuthorGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelAuthor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemResourceAuthorGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorEntityControllerApi.getItemResourceAuthorGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * patch-author
         * @param {string} id 
         * @param {AuthorRequestBody} authorRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchItemResourceAuthorPatch(id: string, authorRequestBody: AuthorRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelAuthor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchItemResourceAuthorPatch(id, authorRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorEntityControllerApi.patchItemResourceAuthorPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * create-author
         * @param {AuthorRequestBody} authorRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCollectionResourceAuthorPost(authorRequestBody: AuthorRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelAuthor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCollectionResourceAuthorPost(authorRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorEntityControllerApi.postCollectionResourceAuthorPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * update-author
         * @param {string} id 
         * @param {AuthorRequestBody} authorRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putItemResourceAuthorPut(id: string, authorRequestBody: AuthorRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelAuthor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putItemResourceAuthorPut(id, authorRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorEntityControllerApi.putItemResourceAuthorPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthorEntityControllerApi - factory interface
 * @export
 */
export const AuthorEntityControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthorEntityControllerApiFp(configuration)
    return {
        /**
         * delete-author
         * @param {AuthorEntityControllerApiDeleteItemResourceAuthorDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemResourceAuthorDelete(requestParameters: AuthorEntityControllerApiDeleteItemResourceAuthorDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteItemResourceAuthorDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * get-author
         * @param {AuthorEntityControllerApiGetCollectionResourceAuthorGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionResourceAuthorGet(requestParameters: AuthorEntityControllerApiGetCollectionResourceAuthorGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PagedModelEntityModelAuthor> {
            return localVarFp.getCollectionResourceAuthorGet(requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * get-author
         * @param {AuthorEntityControllerApiGetItemResourceAuthorGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemResourceAuthorGet(requestParameters: AuthorEntityControllerApiGetItemResourceAuthorGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelAuthor> {
            return localVarFp.getItemResourceAuthorGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * patch-author
         * @param {AuthorEntityControllerApiPatchItemResourceAuthorPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchItemResourceAuthorPatch(requestParameters: AuthorEntityControllerApiPatchItemResourceAuthorPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelAuthor> {
            return localVarFp.patchItemResourceAuthorPatch(requestParameters.id, requestParameters.authorRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * create-author
         * @param {AuthorEntityControllerApiPostCollectionResourceAuthorPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCollectionResourceAuthorPost(requestParameters: AuthorEntityControllerApiPostCollectionResourceAuthorPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelAuthor> {
            return localVarFp.postCollectionResourceAuthorPost(requestParameters.authorRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * update-author
         * @param {AuthorEntityControllerApiPutItemResourceAuthorPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putItemResourceAuthorPut(requestParameters: AuthorEntityControllerApiPutItemResourceAuthorPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelAuthor> {
            return localVarFp.putItemResourceAuthorPut(requestParameters.id, requestParameters.authorRequestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthorEntityControllerApi - interface
 * @export
 * @interface AuthorEntityControllerApi
 */
export interface AuthorEntityControllerApiInterface {
    /**
     * delete-author
     * @param {AuthorEntityControllerApiDeleteItemResourceAuthorDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorEntityControllerApiInterface
     */
    deleteItemResourceAuthorDelete(requestParameters: AuthorEntityControllerApiDeleteItemResourceAuthorDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * get-author
     * @param {AuthorEntityControllerApiGetCollectionResourceAuthorGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorEntityControllerApiInterface
     */
    getCollectionResourceAuthorGet(requestParameters?: AuthorEntityControllerApiGetCollectionResourceAuthorGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<PagedModelEntityModelAuthor>;

    /**
     * get-author
     * @param {AuthorEntityControllerApiGetItemResourceAuthorGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorEntityControllerApiInterface
     */
    getItemResourceAuthorGet(requestParameters: AuthorEntityControllerApiGetItemResourceAuthorGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelAuthor>;

    /**
     * patch-author
     * @param {AuthorEntityControllerApiPatchItemResourceAuthorPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorEntityControllerApiInterface
     */
    patchItemResourceAuthorPatch(requestParameters: AuthorEntityControllerApiPatchItemResourceAuthorPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelAuthor>;

    /**
     * create-author
     * @param {AuthorEntityControllerApiPostCollectionResourceAuthorPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorEntityControllerApiInterface
     */
    postCollectionResourceAuthorPost(requestParameters: AuthorEntityControllerApiPostCollectionResourceAuthorPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelAuthor>;

    /**
     * update-author
     * @param {AuthorEntityControllerApiPutItemResourceAuthorPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorEntityControllerApiInterface
     */
    putItemResourceAuthorPut(requestParameters: AuthorEntityControllerApiPutItemResourceAuthorPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelAuthor>;

}

/**
 * Request parameters for deleteItemResourceAuthorDelete operation in AuthorEntityControllerApi.
 * @export
 * @interface AuthorEntityControllerApiDeleteItemResourceAuthorDeleteRequest
 */
export interface AuthorEntityControllerApiDeleteItemResourceAuthorDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthorEntityControllerApiDeleteItemResourceAuthorDelete
     */
    readonly id: string
}

/**
 * Request parameters for getCollectionResourceAuthorGet operation in AuthorEntityControllerApi.
 * @export
 * @interface AuthorEntityControllerApiGetCollectionResourceAuthorGetRequest
 */
export interface AuthorEntityControllerApiGetCollectionResourceAuthorGetRequest {
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof AuthorEntityControllerApiGetCollectionResourceAuthorGet
     */
    readonly page?: number

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof AuthorEntityControllerApiGetCollectionResourceAuthorGet
     */
    readonly size?: number

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof AuthorEntityControllerApiGetCollectionResourceAuthorGet
     */
    readonly sort?: Array<string>
}

/**
 * Request parameters for getItemResourceAuthorGet operation in AuthorEntityControllerApi.
 * @export
 * @interface AuthorEntityControllerApiGetItemResourceAuthorGetRequest
 */
export interface AuthorEntityControllerApiGetItemResourceAuthorGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthorEntityControllerApiGetItemResourceAuthorGet
     */
    readonly id: string
}

/**
 * Request parameters for patchItemResourceAuthorPatch operation in AuthorEntityControllerApi.
 * @export
 * @interface AuthorEntityControllerApiPatchItemResourceAuthorPatchRequest
 */
export interface AuthorEntityControllerApiPatchItemResourceAuthorPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthorEntityControllerApiPatchItemResourceAuthorPatch
     */
    readonly id: string

    /**
     * 
     * @type {AuthorRequestBody}
     * @memberof AuthorEntityControllerApiPatchItemResourceAuthorPatch
     */
    readonly authorRequestBody: AuthorRequestBody
}

/**
 * Request parameters for postCollectionResourceAuthorPost operation in AuthorEntityControllerApi.
 * @export
 * @interface AuthorEntityControllerApiPostCollectionResourceAuthorPostRequest
 */
export interface AuthorEntityControllerApiPostCollectionResourceAuthorPostRequest {
    /**
     * 
     * @type {AuthorRequestBody}
     * @memberof AuthorEntityControllerApiPostCollectionResourceAuthorPost
     */
    readonly authorRequestBody: AuthorRequestBody
}

/**
 * Request parameters for putItemResourceAuthorPut operation in AuthorEntityControllerApi.
 * @export
 * @interface AuthorEntityControllerApiPutItemResourceAuthorPutRequest
 */
export interface AuthorEntityControllerApiPutItemResourceAuthorPutRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthorEntityControllerApiPutItemResourceAuthorPut
     */
    readonly id: string

    /**
     * 
     * @type {AuthorRequestBody}
     * @memberof AuthorEntityControllerApiPutItemResourceAuthorPut
     */
    readonly authorRequestBody: AuthorRequestBody
}

/**
 * AuthorEntityControllerApi - object-oriented interface
 * @export
 * @class AuthorEntityControllerApi
 * @extends {BaseAPI}
 */
export class AuthorEntityControllerApi extends BaseAPI implements AuthorEntityControllerApiInterface {
    /**
     * delete-author
     * @param {AuthorEntityControllerApiDeleteItemResourceAuthorDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorEntityControllerApi
     */
    public deleteItemResourceAuthorDelete(requestParameters: AuthorEntityControllerApiDeleteItemResourceAuthorDeleteRequest, options?: RawAxiosRequestConfig) {
        return AuthorEntityControllerApiFp(this.configuration).deleteItemResourceAuthorDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-author
     * @param {AuthorEntityControllerApiGetCollectionResourceAuthorGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorEntityControllerApi
     */
    public getCollectionResourceAuthorGet(requestParameters: AuthorEntityControllerApiGetCollectionResourceAuthorGetRequest = {}, options?: RawAxiosRequestConfig) {
        return AuthorEntityControllerApiFp(this.configuration).getCollectionResourceAuthorGet(requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-author
     * @param {AuthorEntityControllerApiGetItemResourceAuthorGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorEntityControllerApi
     */
    public getItemResourceAuthorGet(requestParameters: AuthorEntityControllerApiGetItemResourceAuthorGetRequest, options?: RawAxiosRequestConfig) {
        return AuthorEntityControllerApiFp(this.configuration).getItemResourceAuthorGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * patch-author
     * @param {AuthorEntityControllerApiPatchItemResourceAuthorPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorEntityControllerApi
     */
    public patchItemResourceAuthorPatch(requestParameters: AuthorEntityControllerApiPatchItemResourceAuthorPatchRequest, options?: RawAxiosRequestConfig) {
        return AuthorEntityControllerApiFp(this.configuration).patchItemResourceAuthorPatch(requestParameters.id, requestParameters.authorRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * create-author
     * @param {AuthorEntityControllerApiPostCollectionResourceAuthorPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorEntityControllerApi
     */
    public postCollectionResourceAuthorPost(requestParameters: AuthorEntityControllerApiPostCollectionResourceAuthorPostRequest, options?: RawAxiosRequestConfig) {
        return AuthorEntityControllerApiFp(this.configuration).postCollectionResourceAuthorPost(requestParameters.authorRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update-author
     * @param {AuthorEntityControllerApiPutItemResourceAuthorPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorEntityControllerApi
     */
    public putItemResourceAuthorPut(requestParameters: AuthorEntityControllerApiPutItemResourceAuthorPutRequest, options?: RawAxiosRequestConfig) {
        return AuthorEntityControllerApiFp(this.configuration).putItemResourceAuthorPut(requestParameters.id, requestParameters.authorRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthorPropertyReferenceControllerApi - axios parameter creator
 * @export
 */
export const AuthorPropertyReferenceControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * patch-bookmaster-by-author-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceAuthorPatch: async (id: string, collectionModelObject: CollectionModelObject, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createPropertyReferenceAuthorPatch', 'id', id)
            // verify required parameter 'collectionModelObject' is not null or undefined
            assertParamExists('createPropertyReferenceAuthorPatch', 'collectionModelObject', collectionModelObject)
            const localVarPath = `/authors/{id}/bookMaster`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(collectionModelObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update-bookmaster-by-author-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceAuthorPut: async (id: string, collectionModelObject: CollectionModelObject, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createPropertyReferenceAuthorPut', 'id', id)
            // verify required parameter 'collectionModelObject' is not null or undefined
            assertParamExists('createPropertyReferenceAuthorPut', 'collectionModelObject', collectionModelObject)
            const localVarPath = `/authors/{id}/bookMaster`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(collectionModelObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete-bookmaster-by-author-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceAuthorDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePropertyReferenceAuthorDelete', 'id', id)
            const localVarPath = `/authors/{id}/bookMaster`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete-bookmaster-by-author-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceIdAuthorDelete: async (id: string, propertyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePropertyReferenceIdAuthorDelete', 'id', id)
            // verify required parameter 'propertyId' is not null or undefined
            assertParamExists('deletePropertyReferenceIdAuthorDelete', 'propertyId', propertyId)
            const localVarPath = `/authors/{id}/bookMaster/{propertyId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-bookmaster-by-author-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceAuthorGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('followPropertyReferenceAuthorGet', 'id', id)
            const localVarPath = `/authors/{id}/bookMaster`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-bookmaster-by-author-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceAuthorGet1: async (id: string, propertyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('followPropertyReferenceAuthorGet1', 'id', id)
            // verify required parameter 'propertyId' is not null or undefined
            assertParamExists('followPropertyReferenceAuthorGet1', 'propertyId', propertyId)
            const localVarPath = `/authors/{id}/bookMaster/{propertyId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthorPropertyReferenceControllerApi - functional programming interface
 * @export
 */
export const AuthorPropertyReferenceControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthorPropertyReferenceControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * patch-bookmaster-by-author-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPropertyReferenceAuthorPatch(id: string, collectionModelObject: CollectionModelObject, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelBookMaster>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPropertyReferenceAuthorPatch(id, collectionModelObject, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorPropertyReferenceControllerApi.createPropertyReferenceAuthorPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * update-bookmaster-by-author-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPropertyReferenceAuthorPut(id: string, collectionModelObject: CollectionModelObject, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelBookMaster>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPropertyReferenceAuthorPut(id, collectionModelObject, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorPropertyReferenceControllerApi.createPropertyReferenceAuthorPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * delete-bookmaster-by-author-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePropertyReferenceAuthorDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePropertyReferenceAuthorDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorPropertyReferenceControllerApi.deletePropertyReferenceAuthorDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * delete-bookmaster-by-author-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePropertyReferenceIdAuthorDelete(id: string, propertyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePropertyReferenceIdAuthorDelete(id, propertyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorPropertyReferenceControllerApi.deletePropertyReferenceIdAuthorDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-bookmaster-by-author-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followPropertyReferenceAuthorGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelBookMaster>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followPropertyReferenceAuthorGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorPropertyReferenceControllerApi.followPropertyReferenceAuthorGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-bookmaster-by-author-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followPropertyReferenceAuthorGet1(id: string, propertyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelBookMaster>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followPropertyReferenceAuthorGet1(id, propertyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorPropertyReferenceControllerApi.followPropertyReferenceAuthorGet1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthorPropertyReferenceControllerApi - factory interface
 * @export
 */
export const AuthorPropertyReferenceControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthorPropertyReferenceControllerApiFp(configuration)
    return {
        /**
         * patch-bookmaster-by-author-Id
         * @param {AuthorPropertyReferenceControllerApiCreatePropertyReferenceAuthorPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceAuthorPatch(requestParameters: AuthorPropertyReferenceControllerApiCreatePropertyReferenceAuthorPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<CollectionModelBookMaster> {
            return localVarFp.createPropertyReferenceAuthorPatch(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(axios, basePath));
        },
        /**
         * update-bookmaster-by-author-Id
         * @param {AuthorPropertyReferenceControllerApiCreatePropertyReferenceAuthorPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceAuthorPut(requestParameters: AuthorPropertyReferenceControllerApiCreatePropertyReferenceAuthorPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<CollectionModelBookMaster> {
            return localVarFp.createPropertyReferenceAuthorPut(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(axios, basePath));
        },
        /**
         * delete-bookmaster-by-author-Id
         * @param {AuthorPropertyReferenceControllerApiDeletePropertyReferenceAuthorDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceAuthorDelete(requestParameters: AuthorPropertyReferenceControllerApiDeletePropertyReferenceAuthorDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePropertyReferenceAuthorDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * delete-bookmaster-by-author-Id
         * @param {AuthorPropertyReferenceControllerApiDeletePropertyReferenceIdAuthorDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceIdAuthorDelete(requestParameters: AuthorPropertyReferenceControllerApiDeletePropertyReferenceIdAuthorDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePropertyReferenceIdAuthorDelete(requestParameters.id, requestParameters.propertyId, options).then((request) => request(axios, basePath));
        },
        /**
         * get-bookmaster-by-author-Id
         * @param {AuthorPropertyReferenceControllerApiFollowPropertyReferenceAuthorGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceAuthorGet(requestParameters: AuthorPropertyReferenceControllerApiFollowPropertyReferenceAuthorGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<CollectionModelBookMaster> {
            return localVarFp.followPropertyReferenceAuthorGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * get-bookmaster-by-author-Id
         * @param {AuthorPropertyReferenceControllerApiFollowPropertyReferenceAuthorGet1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceAuthorGet1(requestParameters: AuthorPropertyReferenceControllerApiFollowPropertyReferenceAuthorGet1Request, options?: RawAxiosRequestConfig): AxiosPromise<CollectionModelBookMaster> {
            return localVarFp.followPropertyReferenceAuthorGet1(requestParameters.id, requestParameters.propertyId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthorPropertyReferenceControllerApi - interface
 * @export
 * @interface AuthorPropertyReferenceControllerApi
 */
export interface AuthorPropertyReferenceControllerApiInterface {
    /**
     * patch-bookmaster-by-author-Id
     * @param {AuthorPropertyReferenceControllerApiCreatePropertyReferenceAuthorPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorPropertyReferenceControllerApiInterface
     */
    createPropertyReferenceAuthorPatch(requestParameters: AuthorPropertyReferenceControllerApiCreatePropertyReferenceAuthorPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<CollectionModelBookMaster>;

    /**
     * update-bookmaster-by-author-Id
     * @param {AuthorPropertyReferenceControllerApiCreatePropertyReferenceAuthorPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorPropertyReferenceControllerApiInterface
     */
    createPropertyReferenceAuthorPut(requestParameters: AuthorPropertyReferenceControllerApiCreatePropertyReferenceAuthorPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<CollectionModelBookMaster>;

    /**
     * delete-bookmaster-by-author-Id
     * @param {AuthorPropertyReferenceControllerApiDeletePropertyReferenceAuthorDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorPropertyReferenceControllerApiInterface
     */
    deletePropertyReferenceAuthorDelete(requestParameters: AuthorPropertyReferenceControllerApiDeletePropertyReferenceAuthorDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * delete-bookmaster-by-author-Id
     * @param {AuthorPropertyReferenceControllerApiDeletePropertyReferenceIdAuthorDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorPropertyReferenceControllerApiInterface
     */
    deletePropertyReferenceIdAuthorDelete(requestParameters: AuthorPropertyReferenceControllerApiDeletePropertyReferenceIdAuthorDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * get-bookmaster-by-author-Id
     * @param {AuthorPropertyReferenceControllerApiFollowPropertyReferenceAuthorGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorPropertyReferenceControllerApiInterface
     */
    followPropertyReferenceAuthorGet(requestParameters: AuthorPropertyReferenceControllerApiFollowPropertyReferenceAuthorGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<CollectionModelBookMaster>;

    /**
     * get-bookmaster-by-author-Id
     * @param {AuthorPropertyReferenceControllerApiFollowPropertyReferenceAuthorGet1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorPropertyReferenceControllerApiInterface
     */
    followPropertyReferenceAuthorGet1(requestParameters: AuthorPropertyReferenceControllerApiFollowPropertyReferenceAuthorGet1Request, options?: RawAxiosRequestConfig): AxiosPromise<CollectionModelBookMaster>;

}

/**
 * Request parameters for createPropertyReferenceAuthorPatch operation in AuthorPropertyReferenceControllerApi.
 * @export
 * @interface AuthorPropertyReferenceControllerApiCreatePropertyReferenceAuthorPatchRequest
 */
export interface AuthorPropertyReferenceControllerApiCreatePropertyReferenceAuthorPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthorPropertyReferenceControllerApiCreatePropertyReferenceAuthorPatch
     */
    readonly id: string

    /**
     * 
     * @type {CollectionModelObject}
     * @memberof AuthorPropertyReferenceControllerApiCreatePropertyReferenceAuthorPatch
     */
    readonly collectionModelObject: CollectionModelObject
}

/**
 * Request parameters for createPropertyReferenceAuthorPut operation in AuthorPropertyReferenceControllerApi.
 * @export
 * @interface AuthorPropertyReferenceControllerApiCreatePropertyReferenceAuthorPutRequest
 */
export interface AuthorPropertyReferenceControllerApiCreatePropertyReferenceAuthorPutRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthorPropertyReferenceControllerApiCreatePropertyReferenceAuthorPut
     */
    readonly id: string

    /**
     * 
     * @type {CollectionModelObject}
     * @memberof AuthorPropertyReferenceControllerApiCreatePropertyReferenceAuthorPut
     */
    readonly collectionModelObject: CollectionModelObject
}

/**
 * Request parameters for deletePropertyReferenceAuthorDelete operation in AuthorPropertyReferenceControllerApi.
 * @export
 * @interface AuthorPropertyReferenceControllerApiDeletePropertyReferenceAuthorDeleteRequest
 */
export interface AuthorPropertyReferenceControllerApiDeletePropertyReferenceAuthorDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthorPropertyReferenceControllerApiDeletePropertyReferenceAuthorDelete
     */
    readonly id: string
}

/**
 * Request parameters for deletePropertyReferenceIdAuthorDelete operation in AuthorPropertyReferenceControllerApi.
 * @export
 * @interface AuthorPropertyReferenceControllerApiDeletePropertyReferenceIdAuthorDeleteRequest
 */
export interface AuthorPropertyReferenceControllerApiDeletePropertyReferenceIdAuthorDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthorPropertyReferenceControllerApiDeletePropertyReferenceIdAuthorDelete
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof AuthorPropertyReferenceControllerApiDeletePropertyReferenceIdAuthorDelete
     */
    readonly propertyId: string
}

/**
 * Request parameters for followPropertyReferenceAuthorGet operation in AuthorPropertyReferenceControllerApi.
 * @export
 * @interface AuthorPropertyReferenceControllerApiFollowPropertyReferenceAuthorGetRequest
 */
export interface AuthorPropertyReferenceControllerApiFollowPropertyReferenceAuthorGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthorPropertyReferenceControllerApiFollowPropertyReferenceAuthorGet
     */
    readonly id: string
}

/**
 * Request parameters for followPropertyReferenceAuthorGet1 operation in AuthorPropertyReferenceControllerApi.
 * @export
 * @interface AuthorPropertyReferenceControllerApiFollowPropertyReferenceAuthorGet1Request
 */
export interface AuthorPropertyReferenceControllerApiFollowPropertyReferenceAuthorGet1Request {
    /**
     * 
     * @type {string}
     * @memberof AuthorPropertyReferenceControllerApiFollowPropertyReferenceAuthorGet1
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof AuthorPropertyReferenceControllerApiFollowPropertyReferenceAuthorGet1
     */
    readonly propertyId: string
}

/**
 * AuthorPropertyReferenceControllerApi - object-oriented interface
 * @export
 * @class AuthorPropertyReferenceControllerApi
 * @extends {BaseAPI}
 */
export class AuthorPropertyReferenceControllerApi extends BaseAPI implements AuthorPropertyReferenceControllerApiInterface {
    /**
     * patch-bookmaster-by-author-Id
     * @param {AuthorPropertyReferenceControllerApiCreatePropertyReferenceAuthorPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorPropertyReferenceControllerApi
     */
    public createPropertyReferenceAuthorPatch(requestParameters: AuthorPropertyReferenceControllerApiCreatePropertyReferenceAuthorPatchRequest, options?: RawAxiosRequestConfig) {
        return AuthorPropertyReferenceControllerApiFp(this.configuration).createPropertyReferenceAuthorPatch(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update-bookmaster-by-author-Id
     * @param {AuthorPropertyReferenceControllerApiCreatePropertyReferenceAuthorPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorPropertyReferenceControllerApi
     */
    public createPropertyReferenceAuthorPut(requestParameters: AuthorPropertyReferenceControllerApiCreatePropertyReferenceAuthorPutRequest, options?: RawAxiosRequestConfig) {
        return AuthorPropertyReferenceControllerApiFp(this.configuration).createPropertyReferenceAuthorPut(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete-bookmaster-by-author-Id
     * @param {AuthorPropertyReferenceControllerApiDeletePropertyReferenceAuthorDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorPropertyReferenceControllerApi
     */
    public deletePropertyReferenceAuthorDelete(requestParameters: AuthorPropertyReferenceControllerApiDeletePropertyReferenceAuthorDeleteRequest, options?: RawAxiosRequestConfig) {
        return AuthorPropertyReferenceControllerApiFp(this.configuration).deletePropertyReferenceAuthorDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete-bookmaster-by-author-Id
     * @param {AuthorPropertyReferenceControllerApiDeletePropertyReferenceIdAuthorDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorPropertyReferenceControllerApi
     */
    public deletePropertyReferenceIdAuthorDelete(requestParameters: AuthorPropertyReferenceControllerApiDeletePropertyReferenceIdAuthorDeleteRequest, options?: RawAxiosRequestConfig) {
        return AuthorPropertyReferenceControllerApiFp(this.configuration).deletePropertyReferenceIdAuthorDelete(requestParameters.id, requestParameters.propertyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-bookmaster-by-author-Id
     * @param {AuthorPropertyReferenceControllerApiFollowPropertyReferenceAuthorGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorPropertyReferenceControllerApi
     */
    public followPropertyReferenceAuthorGet(requestParameters: AuthorPropertyReferenceControllerApiFollowPropertyReferenceAuthorGetRequest, options?: RawAxiosRequestConfig) {
        return AuthorPropertyReferenceControllerApiFp(this.configuration).followPropertyReferenceAuthorGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-bookmaster-by-author-Id
     * @param {AuthorPropertyReferenceControllerApiFollowPropertyReferenceAuthorGet1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorPropertyReferenceControllerApi
     */
    public followPropertyReferenceAuthorGet1(requestParameters: AuthorPropertyReferenceControllerApiFollowPropertyReferenceAuthorGet1Request, options?: RawAxiosRequestConfig) {
        return AuthorPropertyReferenceControllerApiFp(this.configuration).followPropertyReferenceAuthorGet1(requestParameters.id, requestParameters.propertyId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthorSearchControllerApi - axios parameter creator
 * @export
 */
export const AuthorSearchControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {string} [name] 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeSearchAuthorGet: async (id?: number, name?: string, page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/authors/search/findByComplexConditions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthorSearchControllerApi - functional programming interface
 * @export
 */
export const AuthorSearchControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthorSearchControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {string} [name] 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async executeSearchAuthorGet(id?: number, name?: string, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedModelEntityModelAuthor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.executeSearchAuthorGet(id, name, page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorSearchControllerApi.executeSearchAuthorGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthorSearchControllerApi - factory interface
 * @export
 */
export const AuthorSearchControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthorSearchControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {AuthorSearchControllerApiExecuteSearchAuthorGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeSearchAuthorGet(requestParameters: AuthorSearchControllerApiExecuteSearchAuthorGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PagedModelEntityModelAuthor> {
            return localVarFp.executeSearchAuthorGet(requestParameters.id, requestParameters.name, requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthorSearchControllerApi - interface
 * @export
 * @interface AuthorSearchControllerApi
 */
export interface AuthorSearchControllerApiInterface {
    /**
     * 
     * @param {AuthorSearchControllerApiExecuteSearchAuthorGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorSearchControllerApiInterface
     */
    executeSearchAuthorGet(requestParameters?: AuthorSearchControllerApiExecuteSearchAuthorGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<PagedModelEntityModelAuthor>;

}

/**
 * Request parameters for executeSearchAuthorGet operation in AuthorSearchControllerApi.
 * @export
 * @interface AuthorSearchControllerApiExecuteSearchAuthorGetRequest
 */
export interface AuthorSearchControllerApiExecuteSearchAuthorGetRequest {
    /**
     * 
     * @type {number}
     * @memberof AuthorSearchControllerApiExecuteSearchAuthorGet
     */
    readonly id?: number

    /**
     * 
     * @type {string}
     * @memberof AuthorSearchControllerApiExecuteSearchAuthorGet
     */
    readonly name?: string

    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof AuthorSearchControllerApiExecuteSearchAuthorGet
     */
    readonly page?: number

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof AuthorSearchControllerApiExecuteSearchAuthorGet
     */
    readonly size?: number

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof AuthorSearchControllerApiExecuteSearchAuthorGet
     */
    readonly sort?: Array<string>
}

/**
 * AuthorSearchControllerApi - object-oriented interface
 * @export
 * @class AuthorSearchControllerApi
 * @extends {BaseAPI}
 */
export class AuthorSearchControllerApi extends BaseAPI implements AuthorSearchControllerApiInterface {
    /**
     * 
     * @param {AuthorSearchControllerApiExecuteSearchAuthorGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorSearchControllerApi
     */
    public executeSearchAuthorGet(requestParameters: AuthorSearchControllerApiExecuteSearchAuthorGetRequest = {}, options?: RawAxiosRequestConfig) {
        return AuthorSearchControllerApiFp(this.configuration).executeSearchAuthorGet(requestParameters.id, requestParameters.name, requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BookMasterAuthorRelationshipEntityControllerApi - axios parameter creator
 * @export
 */
export const BookMasterAuthorRelationshipEntityControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * delete-bookmasterauthorrelationship
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemResourceBookmasterauthorrelationshipDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteItemResourceBookmasterauthorrelationshipDelete', 'id', id)
            const localVarPath = `/bookMasterAuthorRelationships/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-bookmasterauthorrelationship
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionResourceBookmasterauthorrelationshipGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bookMasterAuthorRelationships`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-bookmasterauthorrelationship
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemResourceBookmasterauthorrelationshipGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getItemResourceBookmasterauthorrelationshipGet', 'id', id)
            const localVarPath = `/bookMasterAuthorRelationships/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * patch-bookmasterauthorrelationship
         * @param {string} id 
         * @param {BookMasterAuthorRelationshipRequestBody} bookMasterAuthorRelationshipRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchItemResourceBookmasterauthorrelationshipPatch: async (id: string, bookMasterAuthorRelationshipRequestBody: BookMasterAuthorRelationshipRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchItemResourceBookmasterauthorrelationshipPatch', 'id', id)
            // verify required parameter 'bookMasterAuthorRelationshipRequestBody' is not null or undefined
            assertParamExists('patchItemResourceBookmasterauthorrelationshipPatch', 'bookMasterAuthorRelationshipRequestBody', bookMasterAuthorRelationshipRequestBody)
            const localVarPath = `/bookMasterAuthorRelationships/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookMasterAuthorRelationshipRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * create-bookmasterauthorrelationship
         * @param {BookMasterAuthorRelationshipRequestBody} bookMasterAuthorRelationshipRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCollectionResourceBookmasterauthorrelationshipPost: async (bookMasterAuthorRelationshipRequestBody: BookMasterAuthorRelationshipRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookMasterAuthorRelationshipRequestBody' is not null or undefined
            assertParamExists('postCollectionResourceBookmasterauthorrelationshipPost', 'bookMasterAuthorRelationshipRequestBody', bookMasterAuthorRelationshipRequestBody)
            const localVarPath = `/bookMasterAuthorRelationships`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookMasterAuthorRelationshipRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update-bookmasterauthorrelationship
         * @param {string} id 
         * @param {BookMasterAuthorRelationshipRequestBody} bookMasterAuthorRelationshipRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putItemResourceBookmasterauthorrelationshipPut: async (id: string, bookMasterAuthorRelationshipRequestBody: BookMasterAuthorRelationshipRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putItemResourceBookmasterauthorrelationshipPut', 'id', id)
            // verify required parameter 'bookMasterAuthorRelationshipRequestBody' is not null or undefined
            assertParamExists('putItemResourceBookmasterauthorrelationshipPut', 'bookMasterAuthorRelationshipRequestBody', bookMasterAuthorRelationshipRequestBody)
            const localVarPath = `/bookMasterAuthorRelationships/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookMasterAuthorRelationshipRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BookMasterAuthorRelationshipEntityControllerApi - functional programming interface
 * @export
 */
export const BookMasterAuthorRelationshipEntityControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BookMasterAuthorRelationshipEntityControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * delete-bookmasterauthorrelationship
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteItemResourceBookmasterauthorrelationshipDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteItemResourceBookmasterauthorrelationshipDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterAuthorRelationshipEntityControllerApi.deleteItemResourceBookmasterauthorrelationshipDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-bookmasterauthorrelationship
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollectionResourceBookmasterauthorrelationshipGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelEntityModelBookMasterAuthorRelationship>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCollectionResourceBookmasterauthorrelationshipGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterAuthorRelationshipEntityControllerApi.getCollectionResourceBookmasterauthorrelationshipGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-bookmasterauthorrelationship
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemResourceBookmasterauthorrelationshipGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelBookMasterAuthorRelationship>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemResourceBookmasterauthorrelationshipGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterAuthorRelationshipEntityControllerApi.getItemResourceBookmasterauthorrelationshipGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * patch-bookmasterauthorrelationship
         * @param {string} id 
         * @param {BookMasterAuthorRelationshipRequestBody} bookMasterAuthorRelationshipRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchItemResourceBookmasterauthorrelationshipPatch(id: string, bookMasterAuthorRelationshipRequestBody: BookMasterAuthorRelationshipRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelBookMasterAuthorRelationship>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchItemResourceBookmasterauthorrelationshipPatch(id, bookMasterAuthorRelationshipRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterAuthorRelationshipEntityControllerApi.patchItemResourceBookmasterauthorrelationshipPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * create-bookmasterauthorrelationship
         * @param {BookMasterAuthorRelationshipRequestBody} bookMasterAuthorRelationshipRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCollectionResourceBookmasterauthorrelationshipPost(bookMasterAuthorRelationshipRequestBody: BookMasterAuthorRelationshipRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelBookMasterAuthorRelationship>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCollectionResourceBookmasterauthorrelationshipPost(bookMasterAuthorRelationshipRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterAuthorRelationshipEntityControllerApi.postCollectionResourceBookmasterauthorrelationshipPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * update-bookmasterauthorrelationship
         * @param {string} id 
         * @param {BookMasterAuthorRelationshipRequestBody} bookMasterAuthorRelationshipRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putItemResourceBookmasterauthorrelationshipPut(id: string, bookMasterAuthorRelationshipRequestBody: BookMasterAuthorRelationshipRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelBookMasterAuthorRelationship>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putItemResourceBookmasterauthorrelationshipPut(id, bookMasterAuthorRelationshipRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterAuthorRelationshipEntityControllerApi.putItemResourceBookmasterauthorrelationshipPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BookMasterAuthorRelationshipEntityControllerApi - factory interface
 * @export
 */
export const BookMasterAuthorRelationshipEntityControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BookMasterAuthorRelationshipEntityControllerApiFp(configuration)
    return {
        /**
         * delete-bookmasterauthorrelationship
         * @param {BookMasterAuthorRelationshipEntityControllerApiDeleteItemResourceBookmasterauthorrelationshipDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemResourceBookmasterauthorrelationshipDelete(requestParameters: BookMasterAuthorRelationshipEntityControllerApiDeleteItemResourceBookmasterauthorrelationshipDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteItemResourceBookmasterauthorrelationshipDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * get-bookmasterauthorrelationship
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionResourceBookmasterauthorrelationshipGet(options?: RawAxiosRequestConfig): AxiosPromise<CollectionModelEntityModelBookMasterAuthorRelationship> {
            return localVarFp.getCollectionResourceBookmasterauthorrelationshipGet(options).then((request) => request(axios, basePath));
        },
        /**
         * get-bookmasterauthorrelationship
         * @param {BookMasterAuthorRelationshipEntityControllerApiGetItemResourceBookmasterauthorrelationshipGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemResourceBookmasterauthorrelationshipGet(requestParameters: BookMasterAuthorRelationshipEntityControllerApiGetItemResourceBookmasterauthorrelationshipGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookMasterAuthorRelationship> {
            return localVarFp.getItemResourceBookmasterauthorrelationshipGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * patch-bookmasterauthorrelationship
         * @param {BookMasterAuthorRelationshipEntityControllerApiPatchItemResourceBookmasterauthorrelationshipPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchItemResourceBookmasterauthorrelationshipPatch(requestParameters: BookMasterAuthorRelationshipEntityControllerApiPatchItemResourceBookmasterauthorrelationshipPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookMasterAuthorRelationship> {
            return localVarFp.patchItemResourceBookmasterauthorrelationshipPatch(requestParameters.id, requestParameters.bookMasterAuthorRelationshipRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * create-bookmasterauthorrelationship
         * @param {BookMasterAuthorRelationshipEntityControllerApiPostCollectionResourceBookmasterauthorrelationshipPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCollectionResourceBookmasterauthorrelationshipPost(requestParameters: BookMasterAuthorRelationshipEntityControllerApiPostCollectionResourceBookmasterauthorrelationshipPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookMasterAuthorRelationship> {
            return localVarFp.postCollectionResourceBookmasterauthorrelationshipPost(requestParameters.bookMasterAuthorRelationshipRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * update-bookmasterauthorrelationship
         * @param {BookMasterAuthorRelationshipEntityControllerApiPutItemResourceBookmasterauthorrelationshipPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putItemResourceBookmasterauthorrelationshipPut(requestParameters: BookMasterAuthorRelationshipEntityControllerApiPutItemResourceBookmasterauthorrelationshipPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookMasterAuthorRelationship> {
            return localVarFp.putItemResourceBookmasterauthorrelationshipPut(requestParameters.id, requestParameters.bookMasterAuthorRelationshipRequestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BookMasterAuthorRelationshipEntityControllerApi - interface
 * @export
 * @interface BookMasterAuthorRelationshipEntityControllerApi
 */
export interface BookMasterAuthorRelationshipEntityControllerApiInterface {
    /**
     * delete-bookmasterauthorrelationship
     * @param {BookMasterAuthorRelationshipEntityControllerApiDeleteItemResourceBookmasterauthorrelationshipDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipEntityControllerApiInterface
     */
    deleteItemResourceBookmasterauthorrelationshipDelete(requestParameters: BookMasterAuthorRelationshipEntityControllerApiDeleteItemResourceBookmasterauthorrelationshipDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * get-bookmasterauthorrelationship
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipEntityControllerApiInterface
     */
    getCollectionResourceBookmasterauthorrelationshipGet(options?: RawAxiosRequestConfig): AxiosPromise<CollectionModelEntityModelBookMasterAuthorRelationship>;

    /**
     * get-bookmasterauthorrelationship
     * @param {BookMasterAuthorRelationshipEntityControllerApiGetItemResourceBookmasterauthorrelationshipGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipEntityControllerApiInterface
     */
    getItemResourceBookmasterauthorrelationshipGet(requestParameters: BookMasterAuthorRelationshipEntityControllerApiGetItemResourceBookmasterauthorrelationshipGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookMasterAuthorRelationship>;

    /**
     * patch-bookmasterauthorrelationship
     * @param {BookMasterAuthorRelationshipEntityControllerApiPatchItemResourceBookmasterauthorrelationshipPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipEntityControllerApiInterface
     */
    patchItemResourceBookmasterauthorrelationshipPatch(requestParameters: BookMasterAuthorRelationshipEntityControllerApiPatchItemResourceBookmasterauthorrelationshipPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookMasterAuthorRelationship>;

    /**
     * create-bookmasterauthorrelationship
     * @param {BookMasterAuthorRelationshipEntityControllerApiPostCollectionResourceBookmasterauthorrelationshipPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipEntityControllerApiInterface
     */
    postCollectionResourceBookmasterauthorrelationshipPost(requestParameters: BookMasterAuthorRelationshipEntityControllerApiPostCollectionResourceBookmasterauthorrelationshipPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookMasterAuthorRelationship>;

    /**
     * update-bookmasterauthorrelationship
     * @param {BookMasterAuthorRelationshipEntityControllerApiPutItemResourceBookmasterauthorrelationshipPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipEntityControllerApiInterface
     */
    putItemResourceBookmasterauthorrelationshipPut(requestParameters: BookMasterAuthorRelationshipEntityControllerApiPutItemResourceBookmasterauthorrelationshipPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookMasterAuthorRelationship>;

}

/**
 * Request parameters for deleteItemResourceBookmasterauthorrelationshipDelete operation in BookMasterAuthorRelationshipEntityControllerApi.
 * @export
 * @interface BookMasterAuthorRelationshipEntityControllerApiDeleteItemResourceBookmasterauthorrelationshipDeleteRequest
 */
export interface BookMasterAuthorRelationshipEntityControllerApiDeleteItemResourceBookmasterauthorrelationshipDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof BookMasterAuthorRelationshipEntityControllerApiDeleteItemResourceBookmasterauthorrelationshipDelete
     */
    readonly id: string
}

/**
 * Request parameters for getItemResourceBookmasterauthorrelationshipGet operation in BookMasterAuthorRelationshipEntityControllerApi.
 * @export
 * @interface BookMasterAuthorRelationshipEntityControllerApiGetItemResourceBookmasterauthorrelationshipGetRequest
 */
export interface BookMasterAuthorRelationshipEntityControllerApiGetItemResourceBookmasterauthorrelationshipGetRequest {
    /**
     * 
     * @type {string}
     * @memberof BookMasterAuthorRelationshipEntityControllerApiGetItemResourceBookmasterauthorrelationshipGet
     */
    readonly id: string
}

/**
 * Request parameters for patchItemResourceBookmasterauthorrelationshipPatch operation in BookMasterAuthorRelationshipEntityControllerApi.
 * @export
 * @interface BookMasterAuthorRelationshipEntityControllerApiPatchItemResourceBookmasterauthorrelationshipPatchRequest
 */
export interface BookMasterAuthorRelationshipEntityControllerApiPatchItemResourceBookmasterauthorrelationshipPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof BookMasterAuthorRelationshipEntityControllerApiPatchItemResourceBookmasterauthorrelationshipPatch
     */
    readonly id: string

    /**
     * 
     * @type {BookMasterAuthorRelationshipRequestBody}
     * @memberof BookMasterAuthorRelationshipEntityControllerApiPatchItemResourceBookmasterauthorrelationshipPatch
     */
    readonly bookMasterAuthorRelationshipRequestBody: BookMasterAuthorRelationshipRequestBody
}

/**
 * Request parameters for postCollectionResourceBookmasterauthorrelationshipPost operation in BookMasterAuthorRelationshipEntityControllerApi.
 * @export
 * @interface BookMasterAuthorRelationshipEntityControllerApiPostCollectionResourceBookmasterauthorrelationshipPostRequest
 */
export interface BookMasterAuthorRelationshipEntityControllerApiPostCollectionResourceBookmasterauthorrelationshipPostRequest {
    /**
     * 
     * @type {BookMasterAuthorRelationshipRequestBody}
     * @memberof BookMasterAuthorRelationshipEntityControllerApiPostCollectionResourceBookmasterauthorrelationshipPost
     */
    readonly bookMasterAuthorRelationshipRequestBody: BookMasterAuthorRelationshipRequestBody
}

/**
 * Request parameters for putItemResourceBookmasterauthorrelationshipPut operation in BookMasterAuthorRelationshipEntityControllerApi.
 * @export
 * @interface BookMasterAuthorRelationshipEntityControllerApiPutItemResourceBookmasterauthorrelationshipPutRequest
 */
export interface BookMasterAuthorRelationshipEntityControllerApiPutItemResourceBookmasterauthorrelationshipPutRequest {
    /**
     * 
     * @type {string}
     * @memberof BookMasterAuthorRelationshipEntityControllerApiPutItemResourceBookmasterauthorrelationshipPut
     */
    readonly id: string

    /**
     * 
     * @type {BookMasterAuthorRelationshipRequestBody}
     * @memberof BookMasterAuthorRelationshipEntityControllerApiPutItemResourceBookmasterauthorrelationshipPut
     */
    readonly bookMasterAuthorRelationshipRequestBody: BookMasterAuthorRelationshipRequestBody
}

/**
 * BookMasterAuthorRelationshipEntityControllerApi - object-oriented interface
 * @export
 * @class BookMasterAuthorRelationshipEntityControllerApi
 * @extends {BaseAPI}
 */
export class BookMasterAuthorRelationshipEntityControllerApi extends BaseAPI implements BookMasterAuthorRelationshipEntityControllerApiInterface {
    /**
     * delete-bookmasterauthorrelationship
     * @param {BookMasterAuthorRelationshipEntityControllerApiDeleteItemResourceBookmasterauthorrelationshipDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipEntityControllerApi
     */
    public deleteItemResourceBookmasterauthorrelationshipDelete(requestParameters: BookMasterAuthorRelationshipEntityControllerApiDeleteItemResourceBookmasterauthorrelationshipDeleteRequest, options?: RawAxiosRequestConfig) {
        return BookMasterAuthorRelationshipEntityControllerApiFp(this.configuration).deleteItemResourceBookmasterauthorrelationshipDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-bookmasterauthorrelationship
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipEntityControllerApi
     */
    public getCollectionResourceBookmasterauthorrelationshipGet(options?: RawAxiosRequestConfig) {
        return BookMasterAuthorRelationshipEntityControllerApiFp(this.configuration).getCollectionResourceBookmasterauthorrelationshipGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-bookmasterauthorrelationship
     * @param {BookMasterAuthorRelationshipEntityControllerApiGetItemResourceBookmasterauthorrelationshipGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipEntityControllerApi
     */
    public getItemResourceBookmasterauthorrelationshipGet(requestParameters: BookMasterAuthorRelationshipEntityControllerApiGetItemResourceBookmasterauthorrelationshipGetRequest, options?: RawAxiosRequestConfig) {
        return BookMasterAuthorRelationshipEntityControllerApiFp(this.configuration).getItemResourceBookmasterauthorrelationshipGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * patch-bookmasterauthorrelationship
     * @param {BookMasterAuthorRelationshipEntityControllerApiPatchItemResourceBookmasterauthorrelationshipPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipEntityControllerApi
     */
    public patchItemResourceBookmasterauthorrelationshipPatch(requestParameters: BookMasterAuthorRelationshipEntityControllerApiPatchItemResourceBookmasterauthorrelationshipPatchRequest, options?: RawAxiosRequestConfig) {
        return BookMasterAuthorRelationshipEntityControllerApiFp(this.configuration).patchItemResourceBookmasterauthorrelationshipPatch(requestParameters.id, requestParameters.bookMasterAuthorRelationshipRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * create-bookmasterauthorrelationship
     * @param {BookMasterAuthorRelationshipEntityControllerApiPostCollectionResourceBookmasterauthorrelationshipPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipEntityControllerApi
     */
    public postCollectionResourceBookmasterauthorrelationshipPost(requestParameters: BookMasterAuthorRelationshipEntityControllerApiPostCollectionResourceBookmasterauthorrelationshipPostRequest, options?: RawAxiosRequestConfig) {
        return BookMasterAuthorRelationshipEntityControllerApiFp(this.configuration).postCollectionResourceBookmasterauthorrelationshipPost(requestParameters.bookMasterAuthorRelationshipRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update-bookmasterauthorrelationship
     * @param {BookMasterAuthorRelationshipEntityControllerApiPutItemResourceBookmasterauthorrelationshipPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipEntityControllerApi
     */
    public putItemResourceBookmasterauthorrelationshipPut(requestParameters: BookMasterAuthorRelationshipEntityControllerApiPutItemResourceBookmasterauthorrelationshipPutRequest, options?: RawAxiosRequestConfig) {
        return BookMasterAuthorRelationshipEntityControllerApiFp(this.configuration).putItemResourceBookmasterauthorrelationshipPut(requestParameters.id, requestParameters.bookMasterAuthorRelationshipRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BookMasterAuthorRelationshipPropertyReferenceControllerApi - axios parameter creator
 * @export
 */
export const BookMasterAuthorRelationshipPropertyReferenceControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * patch-author-by-bookmasterauthorrelationship-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceBookmasterauthorrelationshipPatch: async (id: string, collectionModelObject: CollectionModelObject, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createPropertyReferenceBookmasterauthorrelationshipPatch', 'id', id)
            // verify required parameter 'collectionModelObject' is not null or undefined
            assertParamExists('createPropertyReferenceBookmasterauthorrelationshipPatch', 'collectionModelObject', collectionModelObject)
            const localVarPath = `/bookMasterAuthorRelationships/{id}/author`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(collectionModelObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * patch-bookmaster-by-bookmasterauthorrelationship-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceBookmasterauthorrelationshipPatch1: async (id: string, collectionModelObject: CollectionModelObject, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createPropertyReferenceBookmasterauthorrelationshipPatch1', 'id', id)
            // verify required parameter 'collectionModelObject' is not null or undefined
            assertParamExists('createPropertyReferenceBookmasterauthorrelationshipPatch1', 'collectionModelObject', collectionModelObject)
            const localVarPath = `/bookMasterAuthorRelationships/{id}/bookMaster`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(collectionModelObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update-author-by-bookmasterauthorrelationship-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceBookmasterauthorrelationshipPut: async (id: string, collectionModelObject: CollectionModelObject, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createPropertyReferenceBookmasterauthorrelationshipPut', 'id', id)
            // verify required parameter 'collectionModelObject' is not null or undefined
            assertParamExists('createPropertyReferenceBookmasterauthorrelationshipPut', 'collectionModelObject', collectionModelObject)
            const localVarPath = `/bookMasterAuthorRelationships/{id}/author`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(collectionModelObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update-bookmaster-by-bookmasterauthorrelationship-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceBookmasterauthorrelationshipPut1: async (id: string, collectionModelObject: CollectionModelObject, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createPropertyReferenceBookmasterauthorrelationshipPut1', 'id', id)
            // verify required parameter 'collectionModelObject' is not null or undefined
            assertParamExists('createPropertyReferenceBookmasterauthorrelationshipPut1', 'collectionModelObject', collectionModelObject)
            const localVarPath = `/bookMasterAuthorRelationships/{id}/bookMaster`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(collectionModelObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete-author-by-bookmasterauthorrelationship-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceBookmasterauthorrelationshipDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePropertyReferenceBookmasterauthorrelationshipDelete', 'id', id)
            const localVarPath = `/bookMasterAuthorRelationships/{id}/author`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete-bookmaster-by-bookmasterauthorrelationship-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceBookmasterauthorrelationshipDelete1: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePropertyReferenceBookmasterauthorrelationshipDelete1', 'id', id)
            const localVarPath = `/bookMasterAuthorRelationships/{id}/bookMaster`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete-author-by-bookmasterauthorrelationship-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceIdBookmasterauthorrelationshipDelete: async (id: string, propertyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePropertyReferenceIdBookmasterauthorrelationshipDelete', 'id', id)
            // verify required parameter 'propertyId' is not null or undefined
            assertParamExists('deletePropertyReferenceIdBookmasterauthorrelationshipDelete', 'propertyId', propertyId)
            const localVarPath = `/bookMasterAuthorRelationships/{id}/author/{propertyId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete-bookmaster-by-bookmasterauthorrelationship-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceIdBookmasterauthorrelationshipDelete1: async (id: string, propertyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePropertyReferenceIdBookmasterauthorrelationshipDelete1', 'id', id)
            // verify required parameter 'propertyId' is not null or undefined
            assertParamExists('deletePropertyReferenceIdBookmasterauthorrelationshipDelete1', 'propertyId', propertyId)
            const localVarPath = `/bookMasterAuthorRelationships/{id}/bookMaster/{propertyId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-author-by-bookmasterauthorrelationship-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceBookmasterauthorrelationshipGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('followPropertyReferenceBookmasterauthorrelationshipGet', 'id', id)
            const localVarPath = `/bookMasterAuthorRelationships/{id}/author`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-author-by-bookmasterauthorrelationship-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceBookmasterauthorrelationshipGet1: async (id: string, propertyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('followPropertyReferenceBookmasterauthorrelationshipGet1', 'id', id)
            // verify required parameter 'propertyId' is not null or undefined
            assertParamExists('followPropertyReferenceBookmasterauthorrelationshipGet1', 'propertyId', propertyId)
            const localVarPath = `/bookMasterAuthorRelationships/{id}/author/{propertyId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-bookmaster-by-bookmasterauthorrelationship-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceBookmasterauthorrelationshipGet2: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('followPropertyReferenceBookmasterauthorrelationshipGet2', 'id', id)
            const localVarPath = `/bookMasterAuthorRelationships/{id}/bookMaster`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-bookmaster-by-bookmasterauthorrelationship-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceBookmasterauthorrelationshipGet3: async (id: string, propertyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('followPropertyReferenceBookmasterauthorrelationshipGet3', 'id', id)
            // verify required parameter 'propertyId' is not null or undefined
            assertParamExists('followPropertyReferenceBookmasterauthorrelationshipGet3', 'propertyId', propertyId)
            const localVarPath = `/bookMasterAuthorRelationships/{id}/bookMaster/{propertyId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BookMasterAuthorRelationshipPropertyReferenceControllerApi - functional programming interface
 * @export
 */
export const BookMasterAuthorRelationshipPropertyReferenceControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BookMasterAuthorRelationshipPropertyReferenceControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * patch-author-by-bookmasterauthorrelationship-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPropertyReferenceBookmasterauthorrelationshipPatch(id: string, collectionModelObject: CollectionModelObject, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelAuthor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPropertyReferenceBookmasterauthorrelationshipPatch(id, collectionModelObject, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterAuthorRelationshipPropertyReferenceControllerApi.createPropertyReferenceBookmasterauthorrelationshipPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * patch-bookmaster-by-bookmasterauthorrelationship-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPropertyReferenceBookmasterauthorrelationshipPatch1(id: string, collectionModelObject: CollectionModelObject, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelBookMaster>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPropertyReferenceBookmasterauthorrelationshipPatch1(id, collectionModelObject, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterAuthorRelationshipPropertyReferenceControllerApi.createPropertyReferenceBookmasterauthorrelationshipPatch1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * update-author-by-bookmasterauthorrelationship-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPropertyReferenceBookmasterauthorrelationshipPut(id: string, collectionModelObject: CollectionModelObject, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelAuthor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPropertyReferenceBookmasterauthorrelationshipPut(id, collectionModelObject, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterAuthorRelationshipPropertyReferenceControllerApi.createPropertyReferenceBookmasterauthorrelationshipPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * update-bookmaster-by-bookmasterauthorrelationship-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPropertyReferenceBookmasterauthorrelationshipPut1(id: string, collectionModelObject: CollectionModelObject, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelBookMaster>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPropertyReferenceBookmasterauthorrelationshipPut1(id, collectionModelObject, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterAuthorRelationshipPropertyReferenceControllerApi.createPropertyReferenceBookmasterauthorrelationshipPut1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * delete-author-by-bookmasterauthorrelationship-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePropertyReferenceBookmasterauthorrelationshipDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePropertyReferenceBookmasterauthorrelationshipDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterAuthorRelationshipPropertyReferenceControllerApi.deletePropertyReferenceBookmasterauthorrelationshipDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * delete-bookmaster-by-bookmasterauthorrelationship-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePropertyReferenceBookmasterauthorrelationshipDelete1(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePropertyReferenceBookmasterauthorrelationshipDelete1(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterAuthorRelationshipPropertyReferenceControllerApi.deletePropertyReferenceBookmasterauthorrelationshipDelete1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * delete-author-by-bookmasterauthorrelationship-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePropertyReferenceIdBookmasterauthorrelationshipDelete(id: string, propertyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePropertyReferenceIdBookmasterauthorrelationshipDelete(id, propertyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterAuthorRelationshipPropertyReferenceControllerApi.deletePropertyReferenceIdBookmasterauthorrelationshipDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * delete-bookmaster-by-bookmasterauthorrelationship-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePropertyReferenceIdBookmasterauthorrelationshipDelete1(id: string, propertyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePropertyReferenceIdBookmasterauthorrelationshipDelete1(id, propertyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterAuthorRelationshipPropertyReferenceControllerApi.deletePropertyReferenceIdBookmasterauthorrelationshipDelete1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-author-by-bookmasterauthorrelationship-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followPropertyReferenceBookmasterauthorrelationshipGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelAuthor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followPropertyReferenceBookmasterauthorrelationshipGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterAuthorRelationshipPropertyReferenceControllerApi.followPropertyReferenceBookmasterauthorrelationshipGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-author-by-bookmasterauthorrelationship-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followPropertyReferenceBookmasterauthorrelationshipGet1(id: string, propertyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelAuthor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followPropertyReferenceBookmasterauthorrelationshipGet1(id, propertyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterAuthorRelationshipPropertyReferenceControllerApi.followPropertyReferenceBookmasterauthorrelationshipGet1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-bookmaster-by-bookmasterauthorrelationship-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followPropertyReferenceBookmasterauthorrelationshipGet2(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelBookMaster>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followPropertyReferenceBookmasterauthorrelationshipGet2(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterAuthorRelationshipPropertyReferenceControllerApi.followPropertyReferenceBookmasterauthorrelationshipGet2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-bookmaster-by-bookmasterauthorrelationship-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followPropertyReferenceBookmasterauthorrelationshipGet3(id: string, propertyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelBookMaster>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followPropertyReferenceBookmasterauthorrelationshipGet3(id, propertyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterAuthorRelationshipPropertyReferenceControllerApi.followPropertyReferenceBookmasterauthorrelationshipGet3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BookMasterAuthorRelationshipPropertyReferenceControllerApi - factory interface
 * @export
 */
export const BookMasterAuthorRelationshipPropertyReferenceControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BookMasterAuthorRelationshipPropertyReferenceControllerApiFp(configuration)
    return {
        /**
         * patch-author-by-bookmasterauthorrelationship-Id
         * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceBookmasterauthorrelationshipPatch(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelAuthor> {
            return localVarFp.createPropertyReferenceBookmasterauthorrelationshipPatch(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(axios, basePath));
        },
        /**
         * patch-bookmaster-by-bookmasterauthorrelationship-Id
         * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPatch1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceBookmasterauthorrelationshipPatch1(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPatch1Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookMaster> {
            return localVarFp.createPropertyReferenceBookmasterauthorrelationshipPatch1(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(axios, basePath));
        },
        /**
         * update-author-by-bookmasterauthorrelationship-Id
         * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceBookmasterauthorrelationshipPut(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelAuthor> {
            return localVarFp.createPropertyReferenceBookmasterauthorrelationshipPut(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(axios, basePath));
        },
        /**
         * update-bookmaster-by-bookmasterauthorrelationship-Id
         * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPut1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceBookmasterauthorrelationshipPut1(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPut1Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookMaster> {
            return localVarFp.createPropertyReferenceBookmasterauthorrelationshipPut1(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(axios, basePath));
        },
        /**
         * delete-author-by-bookmasterauthorrelationship-Id
         * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceBookmasterauthorrelationshipDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceBookmasterauthorrelationshipDelete(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceBookmasterauthorrelationshipDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePropertyReferenceBookmasterauthorrelationshipDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * delete-bookmaster-by-bookmasterauthorrelationship-Id
         * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceBookmasterauthorrelationshipDelete1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceBookmasterauthorrelationshipDelete1(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceBookmasterauthorrelationshipDelete1Request, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePropertyReferenceBookmasterauthorrelationshipDelete1(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * delete-author-by-bookmasterauthorrelationship-Id
         * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterauthorrelationshipDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceIdBookmasterauthorrelationshipDelete(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterauthorrelationshipDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePropertyReferenceIdBookmasterauthorrelationshipDelete(requestParameters.id, requestParameters.propertyId, options).then((request) => request(axios, basePath));
        },
        /**
         * delete-bookmaster-by-bookmasterauthorrelationship-Id
         * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterauthorrelationshipDelete1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceIdBookmasterauthorrelationshipDelete1(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterauthorrelationshipDelete1Request, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePropertyReferenceIdBookmasterauthorrelationshipDelete1(requestParameters.id, requestParameters.propertyId, options).then((request) => request(axios, basePath));
        },
        /**
         * get-author-by-bookmasterauthorrelationship-Id
         * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceBookmasterauthorrelationshipGet(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelAuthor> {
            return localVarFp.followPropertyReferenceBookmasterauthorrelationshipGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * get-author-by-bookmasterauthorrelationship-Id
         * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceBookmasterauthorrelationshipGet1(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet1Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelAuthor> {
            return localVarFp.followPropertyReferenceBookmasterauthorrelationshipGet1(requestParameters.id, requestParameters.propertyId, options).then((request) => request(axios, basePath));
        },
        /**
         * get-bookmaster-by-bookmasterauthorrelationship-Id
         * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceBookmasterauthorrelationshipGet2(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet2Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookMaster> {
            return localVarFp.followPropertyReferenceBookmasterauthorrelationshipGet2(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * get-bookmaster-by-bookmasterauthorrelationship-Id
         * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceBookmasterauthorrelationshipGet3(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet3Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookMaster> {
            return localVarFp.followPropertyReferenceBookmasterauthorrelationshipGet3(requestParameters.id, requestParameters.propertyId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BookMasterAuthorRelationshipPropertyReferenceControllerApi - interface
 * @export
 * @interface BookMasterAuthorRelationshipPropertyReferenceControllerApi
 */
export interface BookMasterAuthorRelationshipPropertyReferenceControllerApiInterface {
    /**
     * patch-author-by-bookmasterauthorrelationship-Id
     * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiInterface
     */
    createPropertyReferenceBookmasterauthorrelationshipPatch(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelAuthor>;

    /**
     * patch-bookmaster-by-bookmasterauthorrelationship-Id
     * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPatch1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiInterface
     */
    createPropertyReferenceBookmasterauthorrelationshipPatch1(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPatch1Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookMaster>;

    /**
     * update-author-by-bookmasterauthorrelationship-Id
     * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiInterface
     */
    createPropertyReferenceBookmasterauthorrelationshipPut(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelAuthor>;

    /**
     * update-bookmaster-by-bookmasterauthorrelationship-Id
     * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPut1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiInterface
     */
    createPropertyReferenceBookmasterauthorrelationshipPut1(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPut1Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookMaster>;

    /**
     * delete-author-by-bookmasterauthorrelationship-Id
     * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceBookmasterauthorrelationshipDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiInterface
     */
    deletePropertyReferenceBookmasterauthorrelationshipDelete(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceBookmasterauthorrelationshipDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * delete-bookmaster-by-bookmasterauthorrelationship-Id
     * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceBookmasterauthorrelationshipDelete1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiInterface
     */
    deletePropertyReferenceBookmasterauthorrelationshipDelete1(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceBookmasterauthorrelationshipDelete1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * delete-author-by-bookmasterauthorrelationship-Id
     * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterauthorrelationshipDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiInterface
     */
    deletePropertyReferenceIdBookmasterauthorrelationshipDelete(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterauthorrelationshipDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * delete-bookmaster-by-bookmasterauthorrelationship-Id
     * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterauthorrelationshipDelete1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiInterface
     */
    deletePropertyReferenceIdBookmasterauthorrelationshipDelete1(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterauthorrelationshipDelete1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * get-author-by-bookmasterauthorrelationship-Id
     * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiInterface
     */
    followPropertyReferenceBookmasterauthorrelationshipGet(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelAuthor>;

    /**
     * get-author-by-bookmasterauthorrelationship-Id
     * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiInterface
     */
    followPropertyReferenceBookmasterauthorrelationshipGet1(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet1Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelAuthor>;

    /**
     * get-bookmaster-by-bookmasterauthorrelationship-Id
     * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiInterface
     */
    followPropertyReferenceBookmasterauthorrelationshipGet2(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet2Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookMaster>;

    /**
     * get-bookmaster-by-bookmasterauthorrelationship-Id
     * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiInterface
     */
    followPropertyReferenceBookmasterauthorrelationshipGet3(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet3Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookMaster>;

}

/**
 * Request parameters for createPropertyReferenceBookmasterauthorrelationshipPatch operation in BookMasterAuthorRelationshipPropertyReferenceControllerApi.
 * @export
 * @interface BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPatchRequest
 */
export interface BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPatch
     */
    readonly id: string

    /**
     * 
     * @type {CollectionModelObject}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPatch
     */
    readonly collectionModelObject: CollectionModelObject
}

/**
 * Request parameters for createPropertyReferenceBookmasterauthorrelationshipPatch1 operation in BookMasterAuthorRelationshipPropertyReferenceControllerApi.
 * @export
 * @interface BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPatch1Request
 */
export interface BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPatch1Request {
    /**
     * 
     * @type {string}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPatch1
     */
    readonly id: string

    /**
     * 
     * @type {CollectionModelObject}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPatch1
     */
    readonly collectionModelObject: CollectionModelObject
}

/**
 * Request parameters for createPropertyReferenceBookmasterauthorrelationshipPut operation in BookMasterAuthorRelationshipPropertyReferenceControllerApi.
 * @export
 * @interface BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPutRequest
 */
export interface BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPutRequest {
    /**
     * 
     * @type {string}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPut
     */
    readonly id: string

    /**
     * 
     * @type {CollectionModelObject}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPut
     */
    readonly collectionModelObject: CollectionModelObject
}

/**
 * Request parameters for createPropertyReferenceBookmasterauthorrelationshipPut1 operation in BookMasterAuthorRelationshipPropertyReferenceControllerApi.
 * @export
 * @interface BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPut1Request
 */
export interface BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPut1Request {
    /**
     * 
     * @type {string}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPut1
     */
    readonly id: string

    /**
     * 
     * @type {CollectionModelObject}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPut1
     */
    readonly collectionModelObject: CollectionModelObject
}

/**
 * Request parameters for deletePropertyReferenceBookmasterauthorrelationshipDelete operation in BookMasterAuthorRelationshipPropertyReferenceControllerApi.
 * @export
 * @interface BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceBookmasterauthorrelationshipDeleteRequest
 */
export interface BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceBookmasterauthorrelationshipDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceBookmasterauthorrelationshipDelete
     */
    readonly id: string
}

/**
 * Request parameters for deletePropertyReferenceBookmasterauthorrelationshipDelete1 operation in BookMasterAuthorRelationshipPropertyReferenceControllerApi.
 * @export
 * @interface BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceBookmasterauthorrelationshipDelete1Request
 */
export interface BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceBookmasterauthorrelationshipDelete1Request {
    /**
     * 
     * @type {string}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceBookmasterauthorrelationshipDelete1
     */
    readonly id: string
}

/**
 * Request parameters for deletePropertyReferenceIdBookmasterauthorrelationshipDelete operation in BookMasterAuthorRelationshipPropertyReferenceControllerApi.
 * @export
 * @interface BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterauthorrelationshipDeleteRequest
 */
export interface BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterauthorrelationshipDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterauthorrelationshipDelete
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterauthorrelationshipDelete
     */
    readonly propertyId: string
}

/**
 * Request parameters for deletePropertyReferenceIdBookmasterauthorrelationshipDelete1 operation in BookMasterAuthorRelationshipPropertyReferenceControllerApi.
 * @export
 * @interface BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterauthorrelationshipDelete1Request
 */
export interface BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterauthorrelationshipDelete1Request {
    /**
     * 
     * @type {string}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterauthorrelationshipDelete1
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterauthorrelationshipDelete1
     */
    readonly propertyId: string
}

/**
 * Request parameters for followPropertyReferenceBookmasterauthorrelationshipGet operation in BookMasterAuthorRelationshipPropertyReferenceControllerApi.
 * @export
 * @interface BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGetRequest
 */
export interface BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGetRequest {
    /**
     * 
     * @type {string}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet
     */
    readonly id: string
}

/**
 * Request parameters for followPropertyReferenceBookmasterauthorrelationshipGet1 operation in BookMasterAuthorRelationshipPropertyReferenceControllerApi.
 * @export
 * @interface BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet1Request
 */
export interface BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet1Request {
    /**
     * 
     * @type {string}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet1
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet1
     */
    readonly propertyId: string
}

/**
 * Request parameters for followPropertyReferenceBookmasterauthorrelationshipGet2 operation in BookMasterAuthorRelationshipPropertyReferenceControllerApi.
 * @export
 * @interface BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet2Request
 */
export interface BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet2Request {
    /**
     * 
     * @type {string}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet2
     */
    readonly id: string
}

/**
 * Request parameters for followPropertyReferenceBookmasterauthorrelationshipGet3 operation in BookMasterAuthorRelationshipPropertyReferenceControllerApi.
 * @export
 * @interface BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet3Request
 */
export interface BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet3Request {
    /**
     * 
     * @type {string}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet3
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet3
     */
    readonly propertyId: string
}

/**
 * BookMasterAuthorRelationshipPropertyReferenceControllerApi - object-oriented interface
 * @export
 * @class BookMasterAuthorRelationshipPropertyReferenceControllerApi
 * @extends {BaseAPI}
 */
export class BookMasterAuthorRelationshipPropertyReferenceControllerApi extends BaseAPI implements BookMasterAuthorRelationshipPropertyReferenceControllerApiInterface {
    /**
     * patch-author-by-bookmasterauthorrelationship-Id
     * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApi
     */
    public createPropertyReferenceBookmasterauthorrelationshipPatch(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPatchRequest, options?: RawAxiosRequestConfig) {
        return BookMasterAuthorRelationshipPropertyReferenceControllerApiFp(this.configuration).createPropertyReferenceBookmasterauthorrelationshipPatch(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * patch-bookmaster-by-bookmasterauthorrelationship-Id
     * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPatch1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApi
     */
    public createPropertyReferenceBookmasterauthorrelationshipPatch1(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPatch1Request, options?: RawAxiosRequestConfig) {
        return BookMasterAuthorRelationshipPropertyReferenceControllerApiFp(this.configuration).createPropertyReferenceBookmasterauthorrelationshipPatch1(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update-author-by-bookmasterauthorrelationship-Id
     * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApi
     */
    public createPropertyReferenceBookmasterauthorrelationshipPut(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPutRequest, options?: RawAxiosRequestConfig) {
        return BookMasterAuthorRelationshipPropertyReferenceControllerApiFp(this.configuration).createPropertyReferenceBookmasterauthorrelationshipPut(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update-bookmaster-by-bookmasterauthorrelationship-Id
     * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPut1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApi
     */
    public createPropertyReferenceBookmasterauthorrelationshipPut1(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPut1Request, options?: RawAxiosRequestConfig) {
        return BookMasterAuthorRelationshipPropertyReferenceControllerApiFp(this.configuration).createPropertyReferenceBookmasterauthorrelationshipPut1(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete-author-by-bookmasterauthorrelationship-Id
     * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceBookmasterauthorrelationshipDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApi
     */
    public deletePropertyReferenceBookmasterauthorrelationshipDelete(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceBookmasterauthorrelationshipDeleteRequest, options?: RawAxiosRequestConfig) {
        return BookMasterAuthorRelationshipPropertyReferenceControllerApiFp(this.configuration).deletePropertyReferenceBookmasterauthorrelationshipDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete-bookmaster-by-bookmasterauthorrelationship-Id
     * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceBookmasterauthorrelationshipDelete1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApi
     */
    public deletePropertyReferenceBookmasterauthorrelationshipDelete1(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceBookmasterauthorrelationshipDelete1Request, options?: RawAxiosRequestConfig) {
        return BookMasterAuthorRelationshipPropertyReferenceControllerApiFp(this.configuration).deletePropertyReferenceBookmasterauthorrelationshipDelete1(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete-author-by-bookmasterauthorrelationship-Id
     * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterauthorrelationshipDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApi
     */
    public deletePropertyReferenceIdBookmasterauthorrelationshipDelete(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterauthorrelationshipDeleteRequest, options?: RawAxiosRequestConfig) {
        return BookMasterAuthorRelationshipPropertyReferenceControllerApiFp(this.configuration).deletePropertyReferenceIdBookmasterauthorrelationshipDelete(requestParameters.id, requestParameters.propertyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete-bookmaster-by-bookmasterauthorrelationship-Id
     * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterauthorrelationshipDelete1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApi
     */
    public deletePropertyReferenceIdBookmasterauthorrelationshipDelete1(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterauthorrelationshipDelete1Request, options?: RawAxiosRequestConfig) {
        return BookMasterAuthorRelationshipPropertyReferenceControllerApiFp(this.configuration).deletePropertyReferenceIdBookmasterauthorrelationshipDelete1(requestParameters.id, requestParameters.propertyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-author-by-bookmasterauthorrelationship-Id
     * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApi
     */
    public followPropertyReferenceBookmasterauthorrelationshipGet(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGetRequest, options?: RawAxiosRequestConfig) {
        return BookMasterAuthorRelationshipPropertyReferenceControllerApiFp(this.configuration).followPropertyReferenceBookmasterauthorrelationshipGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-author-by-bookmasterauthorrelationship-Id
     * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApi
     */
    public followPropertyReferenceBookmasterauthorrelationshipGet1(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet1Request, options?: RawAxiosRequestConfig) {
        return BookMasterAuthorRelationshipPropertyReferenceControllerApiFp(this.configuration).followPropertyReferenceBookmasterauthorrelationshipGet1(requestParameters.id, requestParameters.propertyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-bookmaster-by-bookmasterauthorrelationship-Id
     * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApi
     */
    public followPropertyReferenceBookmasterauthorrelationshipGet2(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet2Request, options?: RawAxiosRequestConfig) {
        return BookMasterAuthorRelationshipPropertyReferenceControllerApiFp(this.configuration).followPropertyReferenceBookmasterauthorrelationshipGet2(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-bookmaster-by-bookmasterauthorrelationship-Id
     * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApi
     */
    public followPropertyReferenceBookmasterauthorrelationshipGet3(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet3Request, options?: RawAxiosRequestConfig) {
        return BookMasterAuthorRelationshipPropertyReferenceControllerApiFp(this.configuration).followPropertyReferenceBookmasterauthorrelationshipGet3(requestParameters.id, requestParameters.propertyId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BookMasterEntityControllerApi - axios parameter creator
 * @export
 */
export const BookMasterEntityControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * delete-bookmaster
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemResourceBookmasterDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteItemResourceBookmasterDelete', 'id', id)
            const localVarPath = `/bookMasters/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-bookmaster
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionResourceBookmasterGet: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bookMasters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-bookmaster
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemResourceBookmasterGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getItemResourceBookmasterGet', 'id', id)
            const localVarPath = `/bookMasters/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * patch-bookmaster
         * @param {string} id 
         * @param {BookMasterRequestBody} bookMasterRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchItemResourceBookmasterPatch: async (id: string, bookMasterRequestBody: BookMasterRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchItemResourceBookmasterPatch', 'id', id)
            // verify required parameter 'bookMasterRequestBody' is not null or undefined
            assertParamExists('patchItemResourceBookmasterPatch', 'bookMasterRequestBody', bookMasterRequestBody)
            const localVarPath = `/bookMasters/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookMasterRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * create-bookmaster
         * @param {BookMasterRequestBody} bookMasterRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCollectionResourceBookmasterPost: async (bookMasterRequestBody: BookMasterRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookMasterRequestBody' is not null or undefined
            assertParamExists('postCollectionResourceBookmasterPost', 'bookMasterRequestBody', bookMasterRequestBody)
            const localVarPath = `/bookMasters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookMasterRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update-bookmaster
         * @param {string} id 
         * @param {BookMasterRequestBody} bookMasterRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putItemResourceBookmasterPut: async (id: string, bookMasterRequestBody: BookMasterRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putItemResourceBookmasterPut', 'id', id)
            // verify required parameter 'bookMasterRequestBody' is not null or undefined
            assertParamExists('putItemResourceBookmasterPut', 'bookMasterRequestBody', bookMasterRequestBody)
            const localVarPath = `/bookMasters/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookMasterRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BookMasterEntityControllerApi - functional programming interface
 * @export
 */
export const BookMasterEntityControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BookMasterEntityControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * delete-bookmaster
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteItemResourceBookmasterDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteItemResourceBookmasterDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterEntityControllerApi.deleteItemResourceBookmasterDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-bookmaster
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollectionResourceBookmasterGet(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedModelEntityModelBookMaster>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCollectionResourceBookmasterGet(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterEntityControllerApi.getCollectionResourceBookmasterGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-bookmaster
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemResourceBookmasterGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelBookMaster>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemResourceBookmasterGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterEntityControllerApi.getItemResourceBookmasterGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * patch-bookmaster
         * @param {string} id 
         * @param {BookMasterRequestBody} bookMasterRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchItemResourceBookmasterPatch(id: string, bookMasterRequestBody: BookMasterRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelBookMaster>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchItemResourceBookmasterPatch(id, bookMasterRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterEntityControllerApi.patchItemResourceBookmasterPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * create-bookmaster
         * @param {BookMasterRequestBody} bookMasterRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCollectionResourceBookmasterPost(bookMasterRequestBody: BookMasterRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelBookMaster>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCollectionResourceBookmasterPost(bookMasterRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterEntityControllerApi.postCollectionResourceBookmasterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * update-bookmaster
         * @param {string} id 
         * @param {BookMasterRequestBody} bookMasterRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putItemResourceBookmasterPut(id: string, bookMasterRequestBody: BookMasterRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelBookMaster>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putItemResourceBookmasterPut(id, bookMasterRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterEntityControllerApi.putItemResourceBookmasterPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BookMasterEntityControllerApi - factory interface
 * @export
 */
export const BookMasterEntityControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BookMasterEntityControllerApiFp(configuration)
    return {
        /**
         * delete-bookmaster
         * @param {BookMasterEntityControllerApiDeleteItemResourceBookmasterDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemResourceBookmasterDelete(requestParameters: BookMasterEntityControllerApiDeleteItemResourceBookmasterDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteItemResourceBookmasterDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * get-bookmaster
         * @param {BookMasterEntityControllerApiGetCollectionResourceBookmasterGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionResourceBookmasterGet(requestParameters: BookMasterEntityControllerApiGetCollectionResourceBookmasterGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PagedModelEntityModelBookMaster> {
            return localVarFp.getCollectionResourceBookmasterGet(requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * get-bookmaster
         * @param {BookMasterEntityControllerApiGetItemResourceBookmasterGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemResourceBookmasterGet(requestParameters: BookMasterEntityControllerApiGetItemResourceBookmasterGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookMaster> {
            return localVarFp.getItemResourceBookmasterGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * patch-bookmaster
         * @param {BookMasterEntityControllerApiPatchItemResourceBookmasterPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchItemResourceBookmasterPatch(requestParameters: BookMasterEntityControllerApiPatchItemResourceBookmasterPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookMaster> {
            return localVarFp.patchItemResourceBookmasterPatch(requestParameters.id, requestParameters.bookMasterRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * create-bookmaster
         * @param {BookMasterEntityControllerApiPostCollectionResourceBookmasterPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCollectionResourceBookmasterPost(requestParameters: BookMasterEntityControllerApiPostCollectionResourceBookmasterPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookMaster> {
            return localVarFp.postCollectionResourceBookmasterPost(requestParameters.bookMasterRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * update-bookmaster
         * @param {BookMasterEntityControllerApiPutItemResourceBookmasterPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putItemResourceBookmasterPut(requestParameters: BookMasterEntityControllerApiPutItemResourceBookmasterPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookMaster> {
            return localVarFp.putItemResourceBookmasterPut(requestParameters.id, requestParameters.bookMasterRequestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BookMasterEntityControllerApi - interface
 * @export
 * @interface BookMasterEntityControllerApi
 */
export interface BookMasterEntityControllerApiInterface {
    /**
     * delete-bookmaster
     * @param {BookMasterEntityControllerApiDeleteItemResourceBookmasterDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterEntityControllerApiInterface
     */
    deleteItemResourceBookmasterDelete(requestParameters: BookMasterEntityControllerApiDeleteItemResourceBookmasterDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * get-bookmaster
     * @param {BookMasterEntityControllerApiGetCollectionResourceBookmasterGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterEntityControllerApiInterface
     */
    getCollectionResourceBookmasterGet(requestParameters?: BookMasterEntityControllerApiGetCollectionResourceBookmasterGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<PagedModelEntityModelBookMaster>;

    /**
     * get-bookmaster
     * @param {BookMasterEntityControllerApiGetItemResourceBookmasterGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterEntityControllerApiInterface
     */
    getItemResourceBookmasterGet(requestParameters: BookMasterEntityControllerApiGetItemResourceBookmasterGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookMaster>;

    /**
     * patch-bookmaster
     * @param {BookMasterEntityControllerApiPatchItemResourceBookmasterPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterEntityControllerApiInterface
     */
    patchItemResourceBookmasterPatch(requestParameters: BookMasterEntityControllerApiPatchItemResourceBookmasterPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookMaster>;

    /**
     * create-bookmaster
     * @param {BookMasterEntityControllerApiPostCollectionResourceBookmasterPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterEntityControllerApiInterface
     */
    postCollectionResourceBookmasterPost(requestParameters: BookMasterEntityControllerApiPostCollectionResourceBookmasterPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookMaster>;

    /**
     * update-bookmaster
     * @param {BookMasterEntityControllerApiPutItemResourceBookmasterPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterEntityControllerApiInterface
     */
    putItemResourceBookmasterPut(requestParameters: BookMasterEntityControllerApiPutItemResourceBookmasterPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookMaster>;

}

/**
 * Request parameters for deleteItemResourceBookmasterDelete operation in BookMasterEntityControllerApi.
 * @export
 * @interface BookMasterEntityControllerApiDeleteItemResourceBookmasterDeleteRequest
 */
export interface BookMasterEntityControllerApiDeleteItemResourceBookmasterDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof BookMasterEntityControllerApiDeleteItemResourceBookmasterDelete
     */
    readonly id: string
}

/**
 * Request parameters for getCollectionResourceBookmasterGet operation in BookMasterEntityControllerApi.
 * @export
 * @interface BookMasterEntityControllerApiGetCollectionResourceBookmasterGetRequest
 */
export interface BookMasterEntityControllerApiGetCollectionResourceBookmasterGetRequest {
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof BookMasterEntityControllerApiGetCollectionResourceBookmasterGet
     */
    readonly page?: number

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof BookMasterEntityControllerApiGetCollectionResourceBookmasterGet
     */
    readonly size?: number

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof BookMasterEntityControllerApiGetCollectionResourceBookmasterGet
     */
    readonly sort?: Array<string>
}

/**
 * Request parameters for getItemResourceBookmasterGet operation in BookMasterEntityControllerApi.
 * @export
 * @interface BookMasterEntityControllerApiGetItemResourceBookmasterGetRequest
 */
export interface BookMasterEntityControllerApiGetItemResourceBookmasterGetRequest {
    /**
     * 
     * @type {string}
     * @memberof BookMasterEntityControllerApiGetItemResourceBookmasterGet
     */
    readonly id: string
}

/**
 * Request parameters for patchItemResourceBookmasterPatch operation in BookMasterEntityControllerApi.
 * @export
 * @interface BookMasterEntityControllerApiPatchItemResourceBookmasterPatchRequest
 */
export interface BookMasterEntityControllerApiPatchItemResourceBookmasterPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof BookMasterEntityControllerApiPatchItemResourceBookmasterPatch
     */
    readonly id: string

    /**
     * 
     * @type {BookMasterRequestBody}
     * @memberof BookMasterEntityControllerApiPatchItemResourceBookmasterPatch
     */
    readonly bookMasterRequestBody: BookMasterRequestBody
}

/**
 * Request parameters for postCollectionResourceBookmasterPost operation in BookMasterEntityControllerApi.
 * @export
 * @interface BookMasterEntityControllerApiPostCollectionResourceBookmasterPostRequest
 */
export interface BookMasterEntityControllerApiPostCollectionResourceBookmasterPostRequest {
    /**
     * 
     * @type {BookMasterRequestBody}
     * @memberof BookMasterEntityControllerApiPostCollectionResourceBookmasterPost
     */
    readonly bookMasterRequestBody: BookMasterRequestBody
}

/**
 * Request parameters for putItemResourceBookmasterPut operation in BookMasterEntityControllerApi.
 * @export
 * @interface BookMasterEntityControllerApiPutItemResourceBookmasterPutRequest
 */
export interface BookMasterEntityControllerApiPutItemResourceBookmasterPutRequest {
    /**
     * 
     * @type {string}
     * @memberof BookMasterEntityControllerApiPutItemResourceBookmasterPut
     */
    readonly id: string

    /**
     * 
     * @type {BookMasterRequestBody}
     * @memberof BookMasterEntityControllerApiPutItemResourceBookmasterPut
     */
    readonly bookMasterRequestBody: BookMasterRequestBody
}

/**
 * BookMasterEntityControllerApi - object-oriented interface
 * @export
 * @class BookMasterEntityControllerApi
 * @extends {BaseAPI}
 */
export class BookMasterEntityControllerApi extends BaseAPI implements BookMasterEntityControllerApiInterface {
    /**
     * delete-bookmaster
     * @param {BookMasterEntityControllerApiDeleteItemResourceBookmasterDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterEntityControllerApi
     */
    public deleteItemResourceBookmasterDelete(requestParameters: BookMasterEntityControllerApiDeleteItemResourceBookmasterDeleteRequest, options?: RawAxiosRequestConfig) {
        return BookMasterEntityControllerApiFp(this.configuration).deleteItemResourceBookmasterDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-bookmaster
     * @param {BookMasterEntityControllerApiGetCollectionResourceBookmasterGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterEntityControllerApi
     */
    public getCollectionResourceBookmasterGet(requestParameters: BookMasterEntityControllerApiGetCollectionResourceBookmasterGetRequest = {}, options?: RawAxiosRequestConfig) {
        return BookMasterEntityControllerApiFp(this.configuration).getCollectionResourceBookmasterGet(requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-bookmaster
     * @param {BookMasterEntityControllerApiGetItemResourceBookmasterGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterEntityControllerApi
     */
    public getItemResourceBookmasterGet(requestParameters: BookMasterEntityControllerApiGetItemResourceBookmasterGetRequest, options?: RawAxiosRequestConfig) {
        return BookMasterEntityControllerApiFp(this.configuration).getItemResourceBookmasterGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * patch-bookmaster
     * @param {BookMasterEntityControllerApiPatchItemResourceBookmasterPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterEntityControllerApi
     */
    public patchItemResourceBookmasterPatch(requestParameters: BookMasterEntityControllerApiPatchItemResourceBookmasterPatchRequest, options?: RawAxiosRequestConfig) {
        return BookMasterEntityControllerApiFp(this.configuration).patchItemResourceBookmasterPatch(requestParameters.id, requestParameters.bookMasterRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * create-bookmaster
     * @param {BookMasterEntityControllerApiPostCollectionResourceBookmasterPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterEntityControllerApi
     */
    public postCollectionResourceBookmasterPost(requestParameters: BookMasterEntityControllerApiPostCollectionResourceBookmasterPostRequest, options?: RawAxiosRequestConfig) {
        return BookMasterEntityControllerApiFp(this.configuration).postCollectionResourceBookmasterPost(requestParameters.bookMasterRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update-bookmaster
     * @param {BookMasterEntityControllerApiPutItemResourceBookmasterPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterEntityControllerApi
     */
    public putItemResourceBookmasterPut(requestParameters: BookMasterEntityControllerApiPutItemResourceBookmasterPutRequest, options?: RawAxiosRequestConfig) {
        return BookMasterEntityControllerApiFp(this.configuration).putItemResourceBookmasterPut(requestParameters.id, requestParameters.bookMasterRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BookMasterPropertyReferenceControllerApi - axios parameter creator
 * @export
 */
export const BookMasterPropertyReferenceControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * patch-author-by-bookmaster-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceBookmasterPatch: async (id: string, collectionModelObject: CollectionModelObject, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createPropertyReferenceBookmasterPatch', 'id', id)
            // verify required parameter 'collectionModelObject' is not null or undefined
            assertParamExists('createPropertyReferenceBookmasterPatch', 'collectionModelObject', collectionModelObject)
            const localVarPath = `/bookMasters/{id}/author`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(collectionModelObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * patch-ndccategory-by-bookmaster-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceBookmasterPatch1: async (id: string, collectionModelObject: CollectionModelObject, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createPropertyReferenceBookmasterPatch1', 'id', id)
            // verify required parameter 'collectionModelObject' is not null or undefined
            assertParamExists('createPropertyReferenceBookmasterPatch1', 'collectionModelObject', collectionModelObject)
            const localVarPath = `/bookMasters/{id}/ndcCategory`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(collectionModelObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update-author-by-bookmaster-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceBookmasterPut: async (id: string, collectionModelObject: CollectionModelObject, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createPropertyReferenceBookmasterPut', 'id', id)
            // verify required parameter 'collectionModelObject' is not null or undefined
            assertParamExists('createPropertyReferenceBookmasterPut', 'collectionModelObject', collectionModelObject)
            const localVarPath = `/bookMasters/{id}/author`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(collectionModelObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update-ndccategory-by-bookmaster-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceBookmasterPut1: async (id: string, collectionModelObject: CollectionModelObject, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createPropertyReferenceBookmasterPut1', 'id', id)
            // verify required parameter 'collectionModelObject' is not null or undefined
            assertParamExists('createPropertyReferenceBookmasterPut1', 'collectionModelObject', collectionModelObject)
            const localVarPath = `/bookMasters/{id}/ndcCategory`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(collectionModelObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete-author-by-bookmaster-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceBookmasterDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePropertyReferenceBookmasterDelete', 'id', id)
            const localVarPath = `/bookMasters/{id}/author`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete-ndccategory-by-bookmaster-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceBookmasterDelete1: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePropertyReferenceBookmasterDelete1', 'id', id)
            const localVarPath = `/bookMasters/{id}/ndcCategory`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete-author-by-bookmaster-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceIdBookmasterDelete: async (id: string, propertyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePropertyReferenceIdBookmasterDelete', 'id', id)
            // verify required parameter 'propertyId' is not null or undefined
            assertParamExists('deletePropertyReferenceIdBookmasterDelete', 'propertyId', propertyId)
            const localVarPath = `/bookMasters/{id}/author/{propertyId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete-ndccategory-by-bookmaster-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceIdBookmasterDelete1: async (id: string, propertyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePropertyReferenceIdBookmasterDelete1', 'id', id)
            // verify required parameter 'propertyId' is not null or undefined
            assertParamExists('deletePropertyReferenceIdBookmasterDelete1', 'propertyId', propertyId)
            const localVarPath = `/bookMasters/{id}/ndcCategory/{propertyId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-author-by-bookmaster-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceBookmasterGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('followPropertyReferenceBookmasterGet', 'id', id)
            const localVarPath = `/bookMasters/{id}/author`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-author-by-bookmaster-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceBookmasterGet1: async (id: string, propertyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('followPropertyReferenceBookmasterGet1', 'id', id)
            // verify required parameter 'propertyId' is not null or undefined
            assertParamExists('followPropertyReferenceBookmasterGet1', 'propertyId', propertyId)
            const localVarPath = `/bookMasters/{id}/author/{propertyId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-ndccategory-by-bookmaster-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceBookmasterGet2: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('followPropertyReferenceBookmasterGet2', 'id', id)
            const localVarPath = `/bookMasters/{id}/ndcCategory`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-ndccategory-by-bookmaster-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceBookmasterGet3: async (id: string, propertyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('followPropertyReferenceBookmasterGet3', 'id', id)
            // verify required parameter 'propertyId' is not null or undefined
            assertParamExists('followPropertyReferenceBookmasterGet3', 'propertyId', propertyId)
            const localVarPath = `/bookMasters/{id}/ndcCategory/{propertyId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BookMasterPropertyReferenceControllerApi - functional programming interface
 * @export
 */
export const BookMasterPropertyReferenceControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BookMasterPropertyReferenceControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * patch-author-by-bookmaster-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPropertyReferenceBookmasterPatch(id: string, collectionModelObject: CollectionModelObject, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelAuthor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPropertyReferenceBookmasterPatch(id, collectionModelObject, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterPropertyReferenceControllerApi.createPropertyReferenceBookmasterPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * patch-ndccategory-by-bookmaster-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPropertyReferenceBookmasterPatch1(id: string, collectionModelObject: CollectionModelObject, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelNdcCategory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPropertyReferenceBookmasterPatch1(id, collectionModelObject, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterPropertyReferenceControllerApi.createPropertyReferenceBookmasterPatch1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * update-author-by-bookmaster-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPropertyReferenceBookmasterPut(id: string, collectionModelObject: CollectionModelObject, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelAuthor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPropertyReferenceBookmasterPut(id, collectionModelObject, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterPropertyReferenceControllerApi.createPropertyReferenceBookmasterPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * update-ndccategory-by-bookmaster-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPropertyReferenceBookmasterPut1(id: string, collectionModelObject: CollectionModelObject, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelNdcCategory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPropertyReferenceBookmasterPut1(id, collectionModelObject, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterPropertyReferenceControllerApi.createPropertyReferenceBookmasterPut1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * delete-author-by-bookmaster-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePropertyReferenceBookmasterDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePropertyReferenceBookmasterDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterPropertyReferenceControllerApi.deletePropertyReferenceBookmasterDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * delete-ndccategory-by-bookmaster-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePropertyReferenceBookmasterDelete1(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePropertyReferenceBookmasterDelete1(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterPropertyReferenceControllerApi.deletePropertyReferenceBookmasterDelete1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * delete-author-by-bookmaster-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePropertyReferenceIdBookmasterDelete(id: string, propertyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePropertyReferenceIdBookmasterDelete(id, propertyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterPropertyReferenceControllerApi.deletePropertyReferenceIdBookmasterDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * delete-ndccategory-by-bookmaster-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePropertyReferenceIdBookmasterDelete1(id: string, propertyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePropertyReferenceIdBookmasterDelete1(id, propertyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterPropertyReferenceControllerApi.deletePropertyReferenceIdBookmasterDelete1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-author-by-bookmaster-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followPropertyReferenceBookmasterGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelAuthor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followPropertyReferenceBookmasterGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterPropertyReferenceControllerApi.followPropertyReferenceBookmasterGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-author-by-bookmaster-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followPropertyReferenceBookmasterGet1(id: string, propertyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelAuthor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followPropertyReferenceBookmasterGet1(id, propertyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterPropertyReferenceControllerApi.followPropertyReferenceBookmasterGet1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-ndccategory-by-bookmaster-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followPropertyReferenceBookmasterGet2(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelNdcCategory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followPropertyReferenceBookmasterGet2(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterPropertyReferenceControllerApi.followPropertyReferenceBookmasterGet2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-ndccategory-by-bookmaster-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followPropertyReferenceBookmasterGet3(id: string, propertyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelNdcCategory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followPropertyReferenceBookmasterGet3(id, propertyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterPropertyReferenceControllerApi.followPropertyReferenceBookmasterGet3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BookMasterPropertyReferenceControllerApi - factory interface
 * @export
 */
export const BookMasterPropertyReferenceControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BookMasterPropertyReferenceControllerApiFp(configuration)
    return {
        /**
         * patch-author-by-bookmaster-Id
         * @param {BookMasterPropertyReferenceControllerApiCreatePropertyReferenceBookmasterPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceBookmasterPatch(requestParameters: BookMasterPropertyReferenceControllerApiCreatePropertyReferenceBookmasterPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<CollectionModelAuthor> {
            return localVarFp.createPropertyReferenceBookmasterPatch(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(axios, basePath));
        },
        /**
         * patch-ndccategory-by-bookmaster-Id
         * @param {BookMasterPropertyReferenceControllerApiCreatePropertyReferenceBookmasterPatch1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceBookmasterPatch1(requestParameters: BookMasterPropertyReferenceControllerApiCreatePropertyReferenceBookmasterPatch1Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelNdcCategory> {
            return localVarFp.createPropertyReferenceBookmasterPatch1(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(axios, basePath));
        },
        /**
         * update-author-by-bookmaster-Id
         * @param {BookMasterPropertyReferenceControllerApiCreatePropertyReferenceBookmasterPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceBookmasterPut(requestParameters: BookMasterPropertyReferenceControllerApiCreatePropertyReferenceBookmasterPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<CollectionModelAuthor> {
            return localVarFp.createPropertyReferenceBookmasterPut(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(axios, basePath));
        },
        /**
         * update-ndccategory-by-bookmaster-Id
         * @param {BookMasterPropertyReferenceControllerApiCreatePropertyReferenceBookmasterPut1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceBookmasterPut1(requestParameters: BookMasterPropertyReferenceControllerApiCreatePropertyReferenceBookmasterPut1Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelNdcCategory> {
            return localVarFp.createPropertyReferenceBookmasterPut1(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(axios, basePath));
        },
        /**
         * delete-author-by-bookmaster-Id
         * @param {BookMasterPropertyReferenceControllerApiDeletePropertyReferenceBookmasterDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceBookmasterDelete(requestParameters: BookMasterPropertyReferenceControllerApiDeletePropertyReferenceBookmasterDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePropertyReferenceBookmasterDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * delete-ndccategory-by-bookmaster-Id
         * @param {BookMasterPropertyReferenceControllerApiDeletePropertyReferenceBookmasterDelete1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceBookmasterDelete1(requestParameters: BookMasterPropertyReferenceControllerApiDeletePropertyReferenceBookmasterDelete1Request, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePropertyReferenceBookmasterDelete1(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * delete-author-by-bookmaster-Id
         * @param {BookMasterPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceIdBookmasterDelete(requestParameters: BookMasterPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePropertyReferenceIdBookmasterDelete(requestParameters.id, requestParameters.propertyId, options).then((request) => request(axios, basePath));
        },
        /**
         * delete-ndccategory-by-bookmaster-Id
         * @param {BookMasterPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterDelete1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceIdBookmasterDelete1(requestParameters: BookMasterPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterDelete1Request, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePropertyReferenceIdBookmasterDelete1(requestParameters.id, requestParameters.propertyId, options).then((request) => request(axios, basePath));
        },
        /**
         * get-author-by-bookmaster-Id
         * @param {BookMasterPropertyReferenceControllerApiFollowPropertyReferenceBookmasterGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceBookmasterGet(requestParameters: BookMasterPropertyReferenceControllerApiFollowPropertyReferenceBookmasterGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<CollectionModelAuthor> {
            return localVarFp.followPropertyReferenceBookmasterGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * get-author-by-bookmaster-Id
         * @param {BookMasterPropertyReferenceControllerApiFollowPropertyReferenceBookmasterGet1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceBookmasterGet1(requestParameters: BookMasterPropertyReferenceControllerApiFollowPropertyReferenceBookmasterGet1Request, options?: RawAxiosRequestConfig): AxiosPromise<CollectionModelAuthor> {
            return localVarFp.followPropertyReferenceBookmasterGet1(requestParameters.id, requestParameters.propertyId, options).then((request) => request(axios, basePath));
        },
        /**
         * get-ndccategory-by-bookmaster-Id
         * @param {BookMasterPropertyReferenceControllerApiFollowPropertyReferenceBookmasterGet2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceBookmasterGet2(requestParameters: BookMasterPropertyReferenceControllerApiFollowPropertyReferenceBookmasterGet2Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelNdcCategory> {
            return localVarFp.followPropertyReferenceBookmasterGet2(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * get-ndccategory-by-bookmaster-Id
         * @param {BookMasterPropertyReferenceControllerApiFollowPropertyReferenceBookmasterGet3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceBookmasterGet3(requestParameters: BookMasterPropertyReferenceControllerApiFollowPropertyReferenceBookmasterGet3Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelNdcCategory> {
            return localVarFp.followPropertyReferenceBookmasterGet3(requestParameters.id, requestParameters.propertyId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BookMasterPropertyReferenceControllerApi - interface
 * @export
 * @interface BookMasterPropertyReferenceControllerApi
 */
export interface BookMasterPropertyReferenceControllerApiInterface {
    /**
     * patch-author-by-bookmaster-Id
     * @param {BookMasterPropertyReferenceControllerApiCreatePropertyReferenceBookmasterPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterPropertyReferenceControllerApiInterface
     */
    createPropertyReferenceBookmasterPatch(requestParameters: BookMasterPropertyReferenceControllerApiCreatePropertyReferenceBookmasterPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<CollectionModelAuthor>;

    /**
     * patch-ndccategory-by-bookmaster-Id
     * @param {BookMasterPropertyReferenceControllerApiCreatePropertyReferenceBookmasterPatch1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterPropertyReferenceControllerApiInterface
     */
    createPropertyReferenceBookmasterPatch1(requestParameters: BookMasterPropertyReferenceControllerApiCreatePropertyReferenceBookmasterPatch1Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelNdcCategory>;

    /**
     * update-author-by-bookmaster-Id
     * @param {BookMasterPropertyReferenceControllerApiCreatePropertyReferenceBookmasterPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterPropertyReferenceControllerApiInterface
     */
    createPropertyReferenceBookmasterPut(requestParameters: BookMasterPropertyReferenceControllerApiCreatePropertyReferenceBookmasterPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<CollectionModelAuthor>;

    /**
     * update-ndccategory-by-bookmaster-Id
     * @param {BookMasterPropertyReferenceControllerApiCreatePropertyReferenceBookmasterPut1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterPropertyReferenceControllerApiInterface
     */
    createPropertyReferenceBookmasterPut1(requestParameters: BookMasterPropertyReferenceControllerApiCreatePropertyReferenceBookmasterPut1Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelNdcCategory>;

    /**
     * delete-author-by-bookmaster-Id
     * @param {BookMasterPropertyReferenceControllerApiDeletePropertyReferenceBookmasterDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterPropertyReferenceControllerApiInterface
     */
    deletePropertyReferenceBookmasterDelete(requestParameters: BookMasterPropertyReferenceControllerApiDeletePropertyReferenceBookmasterDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * delete-ndccategory-by-bookmaster-Id
     * @param {BookMasterPropertyReferenceControllerApiDeletePropertyReferenceBookmasterDelete1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterPropertyReferenceControllerApiInterface
     */
    deletePropertyReferenceBookmasterDelete1(requestParameters: BookMasterPropertyReferenceControllerApiDeletePropertyReferenceBookmasterDelete1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * delete-author-by-bookmaster-Id
     * @param {BookMasterPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterPropertyReferenceControllerApiInterface
     */
    deletePropertyReferenceIdBookmasterDelete(requestParameters: BookMasterPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * delete-ndccategory-by-bookmaster-Id
     * @param {BookMasterPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterDelete1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterPropertyReferenceControllerApiInterface
     */
    deletePropertyReferenceIdBookmasterDelete1(requestParameters: BookMasterPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterDelete1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * get-author-by-bookmaster-Id
     * @param {BookMasterPropertyReferenceControllerApiFollowPropertyReferenceBookmasterGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterPropertyReferenceControllerApiInterface
     */
    followPropertyReferenceBookmasterGet(requestParameters: BookMasterPropertyReferenceControllerApiFollowPropertyReferenceBookmasterGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<CollectionModelAuthor>;

    /**
     * get-author-by-bookmaster-Id
     * @param {BookMasterPropertyReferenceControllerApiFollowPropertyReferenceBookmasterGet1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterPropertyReferenceControllerApiInterface
     */
    followPropertyReferenceBookmasterGet1(requestParameters: BookMasterPropertyReferenceControllerApiFollowPropertyReferenceBookmasterGet1Request, options?: RawAxiosRequestConfig): AxiosPromise<CollectionModelAuthor>;

    /**
     * get-ndccategory-by-bookmaster-Id
     * @param {BookMasterPropertyReferenceControllerApiFollowPropertyReferenceBookmasterGet2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterPropertyReferenceControllerApiInterface
     */
    followPropertyReferenceBookmasterGet2(requestParameters: BookMasterPropertyReferenceControllerApiFollowPropertyReferenceBookmasterGet2Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelNdcCategory>;

    /**
     * get-ndccategory-by-bookmaster-Id
     * @param {BookMasterPropertyReferenceControllerApiFollowPropertyReferenceBookmasterGet3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterPropertyReferenceControllerApiInterface
     */
    followPropertyReferenceBookmasterGet3(requestParameters: BookMasterPropertyReferenceControllerApiFollowPropertyReferenceBookmasterGet3Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelNdcCategory>;

}

/**
 * Request parameters for createPropertyReferenceBookmasterPatch operation in BookMasterPropertyReferenceControllerApi.
 * @export
 * @interface BookMasterPropertyReferenceControllerApiCreatePropertyReferenceBookmasterPatchRequest
 */
export interface BookMasterPropertyReferenceControllerApiCreatePropertyReferenceBookmasterPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof BookMasterPropertyReferenceControllerApiCreatePropertyReferenceBookmasterPatch
     */
    readonly id: string

    /**
     * 
     * @type {CollectionModelObject}
     * @memberof BookMasterPropertyReferenceControllerApiCreatePropertyReferenceBookmasterPatch
     */
    readonly collectionModelObject: CollectionModelObject
}

/**
 * Request parameters for createPropertyReferenceBookmasterPatch1 operation in BookMasterPropertyReferenceControllerApi.
 * @export
 * @interface BookMasterPropertyReferenceControllerApiCreatePropertyReferenceBookmasterPatch1Request
 */
export interface BookMasterPropertyReferenceControllerApiCreatePropertyReferenceBookmasterPatch1Request {
    /**
     * 
     * @type {string}
     * @memberof BookMasterPropertyReferenceControllerApiCreatePropertyReferenceBookmasterPatch1
     */
    readonly id: string

    /**
     * 
     * @type {CollectionModelObject}
     * @memberof BookMasterPropertyReferenceControllerApiCreatePropertyReferenceBookmasterPatch1
     */
    readonly collectionModelObject: CollectionModelObject
}

/**
 * Request parameters for createPropertyReferenceBookmasterPut operation in BookMasterPropertyReferenceControllerApi.
 * @export
 * @interface BookMasterPropertyReferenceControllerApiCreatePropertyReferenceBookmasterPutRequest
 */
export interface BookMasterPropertyReferenceControllerApiCreatePropertyReferenceBookmasterPutRequest {
    /**
     * 
     * @type {string}
     * @memberof BookMasterPropertyReferenceControllerApiCreatePropertyReferenceBookmasterPut
     */
    readonly id: string

    /**
     * 
     * @type {CollectionModelObject}
     * @memberof BookMasterPropertyReferenceControllerApiCreatePropertyReferenceBookmasterPut
     */
    readonly collectionModelObject: CollectionModelObject
}

/**
 * Request parameters for createPropertyReferenceBookmasterPut1 operation in BookMasterPropertyReferenceControllerApi.
 * @export
 * @interface BookMasterPropertyReferenceControllerApiCreatePropertyReferenceBookmasterPut1Request
 */
export interface BookMasterPropertyReferenceControllerApiCreatePropertyReferenceBookmasterPut1Request {
    /**
     * 
     * @type {string}
     * @memberof BookMasterPropertyReferenceControllerApiCreatePropertyReferenceBookmasterPut1
     */
    readonly id: string

    /**
     * 
     * @type {CollectionModelObject}
     * @memberof BookMasterPropertyReferenceControllerApiCreatePropertyReferenceBookmasterPut1
     */
    readonly collectionModelObject: CollectionModelObject
}

/**
 * Request parameters for deletePropertyReferenceBookmasterDelete operation in BookMasterPropertyReferenceControllerApi.
 * @export
 * @interface BookMasterPropertyReferenceControllerApiDeletePropertyReferenceBookmasterDeleteRequest
 */
export interface BookMasterPropertyReferenceControllerApiDeletePropertyReferenceBookmasterDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof BookMasterPropertyReferenceControllerApiDeletePropertyReferenceBookmasterDelete
     */
    readonly id: string
}

/**
 * Request parameters for deletePropertyReferenceBookmasterDelete1 operation in BookMasterPropertyReferenceControllerApi.
 * @export
 * @interface BookMasterPropertyReferenceControllerApiDeletePropertyReferenceBookmasterDelete1Request
 */
export interface BookMasterPropertyReferenceControllerApiDeletePropertyReferenceBookmasterDelete1Request {
    /**
     * 
     * @type {string}
     * @memberof BookMasterPropertyReferenceControllerApiDeletePropertyReferenceBookmasterDelete1
     */
    readonly id: string
}

/**
 * Request parameters for deletePropertyReferenceIdBookmasterDelete operation in BookMasterPropertyReferenceControllerApi.
 * @export
 * @interface BookMasterPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterDeleteRequest
 */
export interface BookMasterPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof BookMasterPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterDelete
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof BookMasterPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterDelete
     */
    readonly propertyId: string
}

/**
 * Request parameters for deletePropertyReferenceIdBookmasterDelete1 operation in BookMasterPropertyReferenceControllerApi.
 * @export
 * @interface BookMasterPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterDelete1Request
 */
export interface BookMasterPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterDelete1Request {
    /**
     * 
     * @type {string}
     * @memberof BookMasterPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterDelete1
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof BookMasterPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterDelete1
     */
    readonly propertyId: string
}

/**
 * Request parameters for followPropertyReferenceBookmasterGet operation in BookMasterPropertyReferenceControllerApi.
 * @export
 * @interface BookMasterPropertyReferenceControllerApiFollowPropertyReferenceBookmasterGetRequest
 */
export interface BookMasterPropertyReferenceControllerApiFollowPropertyReferenceBookmasterGetRequest {
    /**
     * 
     * @type {string}
     * @memberof BookMasterPropertyReferenceControllerApiFollowPropertyReferenceBookmasterGet
     */
    readonly id: string
}

/**
 * Request parameters for followPropertyReferenceBookmasterGet1 operation in BookMasterPropertyReferenceControllerApi.
 * @export
 * @interface BookMasterPropertyReferenceControllerApiFollowPropertyReferenceBookmasterGet1Request
 */
export interface BookMasterPropertyReferenceControllerApiFollowPropertyReferenceBookmasterGet1Request {
    /**
     * 
     * @type {string}
     * @memberof BookMasterPropertyReferenceControllerApiFollowPropertyReferenceBookmasterGet1
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof BookMasterPropertyReferenceControllerApiFollowPropertyReferenceBookmasterGet1
     */
    readonly propertyId: string
}

/**
 * Request parameters for followPropertyReferenceBookmasterGet2 operation in BookMasterPropertyReferenceControllerApi.
 * @export
 * @interface BookMasterPropertyReferenceControllerApiFollowPropertyReferenceBookmasterGet2Request
 */
export interface BookMasterPropertyReferenceControllerApiFollowPropertyReferenceBookmasterGet2Request {
    /**
     * 
     * @type {string}
     * @memberof BookMasterPropertyReferenceControllerApiFollowPropertyReferenceBookmasterGet2
     */
    readonly id: string
}

/**
 * Request parameters for followPropertyReferenceBookmasterGet3 operation in BookMasterPropertyReferenceControllerApi.
 * @export
 * @interface BookMasterPropertyReferenceControllerApiFollowPropertyReferenceBookmasterGet3Request
 */
export interface BookMasterPropertyReferenceControllerApiFollowPropertyReferenceBookmasterGet3Request {
    /**
     * 
     * @type {string}
     * @memberof BookMasterPropertyReferenceControllerApiFollowPropertyReferenceBookmasterGet3
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof BookMasterPropertyReferenceControllerApiFollowPropertyReferenceBookmasterGet3
     */
    readonly propertyId: string
}

/**
 * BookMasterPropertyReferenceControllerApi - object-oriented interface
 * @export
 * @class BookMasterPropertyReferenceControllerApi
 * @extends {BaseAPI}
 */
export class BookMasterPropertyReferenceControllerApi extends BaseAPI implements BookMasterPropertyReferenceControllerApiInterface {
    /**
     * patch-author-by-bookmaster-Id
     * @param {BookMasterPropertyReferenceControllerApiCreatePropertyReferenceBookmasterPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterPropertyReferenceControllerApi
     */
    public createPropertyReferenceBookmasterPatch(requestParameters: BookMasterPropertyReferenceControllerApiCreatePropertyReferenceBookmasterPatchRequest, options?: RawAxiosRequestConfig) {
        return BookMasterPropertyReferenceControllerApiFp(this.configuration).createPropertyReferenceBookmasterPatch(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * patch-ndccategory-by-bookmaster-Id
     * @param {BookMasterPropertyReferenceControllerApiCreatePropertyReferenceBookmasterPatch1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterPropertyReferenceControllerApi
     */
    public createPropertyReferenceBookmasterPatch1(requestParameters: BookMasterPropertyReferenceControllerApiCreatePropertyReferenceBookmasterPatch1Request, options?: RawAxiosRequestConfig) {
        return BookMasterPropertyReferenceControllerApiFp(this.configuration).createPropertyReferenceBookmasterPatch1(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update-author-by-bookmaster-Id
     * @param {BookMasterPropertyReferenceControllerApiCreatePropertyReferenceBookmasterPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterPropertyReferenceControllerApi
     */
    public createPropertyReferenceBookmasterPut(requestParameters: BookMasterPropertyReferenceControllerApiCreatePropertyReferenceBookmasterPutRequest, options?: RawAxiosRequestConfig) {
        return BookMasterPropertyReferenceControllerApiFp(this.configuration).createPropertyReferenceBookmasterPut(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update-ndccategory-by-bookmaster-Id
     * @param {BookMasterPropertyReferenceControllerApiCreatePropertyReferenceBookmasterPut1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterPropertyReferenceControllerApi
     */
    public createPropertyReferenceBookmasterPut1(requestParameters: BookMasterPropertyReferenceControllerApiCreatePropertyReferenceBookmasterPut1Request, options?: RawAxiosRequestConfig) {
        return BookMasterPropertyReferenceControllerApiFp(this.configuration).createPropertyReferenceBookmasterPut1(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete-author-by-bookmaster-Id
     * @param {BookMasterPropertyReferenceControllerApiDeletePropertyReferenceBookmasterDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterPropertyReferenceControllerApi
     */
    public deletePropertyReferenceBookmasterDelete(requestParameters: BookMasterPropertyReferenceControllerApiDeletePropertyReferenceBookmasterDeleteRequest, options?: RawAxiosRequestConfig) {
        return BookMasterPropertyReferenceControllerApiFp(this.configuration).deletePropertyReferenceBookmasterDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete-ndccategory-by-bookmaster-Id
     * @param {BookMasterPropertyReferenceControllerApiDeletePropertyReferenceBookmasterDelete1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterPropertyReferenceControllerApi
     */
    public deletePropertyReferenceBookmasterDelete1(requestParameters: BookMasterPropertyReferenceControllerApiDeletePropertyReferenceBookmasterDelete1Request, options?: RawAxiosRequestConfig) {
        return BookMasterPropertyReferenceControllerApiFp(this.configuration).deletePropertyReferenceBookmasterDelete1(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete-author-by-bookmaster-Id
     * @param {BookMasterPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterPropertyReferenceControllerApi
     */
    public deletePropertyReferenceIdBookmasterDelete(requestParameters: BookMasterPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterDeleteRequest, options?: RawAxiosRequestConfig) {
        return BookMasterPropertyReferenceControllerApiFp(this.configuration).deletePropertyReferenceIdBookmasterDelete(requestParameters.id, requestParameters.propertyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete-ndccategory-by-bookmaster-Id
     * @param {BookMasterPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterDelete1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterPropertyReferenceControllerApi
     */
    public deletePropertyReferenceIdBookmasterDelete1(requestParameters: BookMasterPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterDelete1Request, options?: RawAxiosRequestConfig) {
        return BookMasterPropertyReferenceControllerApiFp(this.configuration).deletePropertyReferenceIdBookmasterDelete1(requestParameters.id, requestParameters.propertyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-author-by-bookmaster-Id
     * @param {BookMasterPropertyReferenceControllerApiFollowPropertyReferenceBookmasterGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterPropertyReferenceControllerApi
     */
    public followPropertyReferenceBookmasterGet(requestParameters: BookMasterPropertyReferenceControllerApiFollowPropertyReferenceBookmasterGetRequest, options?: RawAxiosRequestConfig) {
        return BookMasterPropertyReferenceControllerApiFp(this.configuration).followPropertyReferenceBookmasterGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-author-by-bookmaster-Id
     * @param {BookMasterPropertyReferenceControllerApiFollowPropertyReferenceBookmasterGet1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterPropertyReferenceControllerApi
     */
    public followPropertyReferenceBookmasterGet1(requestParameters: BookMasterPropertyReferenceControllerApiFollowPropertyReferenceBookmasterGet1Request, options?: RawAxiosRequestConfig) {
        return BookMasterPropertyReferenceControllerApiFp(this.configuration).followPropertyReferenceBookmasterGet1(requestParameters.id, requestParameters.propertyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-ndccategory-by-bookmaster-Id
     * @param {BookMasterPropertyReferenceControllerApiFollowPropertyReferenceBookmasterGet2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterPropertyReferenceControllerApi
     */
    public followPropertyReferenceBookmasterGet2(requestParameters: BookMasterPropertyReferenceControllerApiFollowPropertyReferenceBookmasterGet2Request, options?: RawAxiosRequestConfig) {
        return BookMasterPropertyReferenceControllerApiFp(this.configuration).followPropertyReferenceBookmasterGet2(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-ndccategory-by-bookmaster-Id
     * @param {BookMasterPropertyReferenceControllerApiFollowPropertyReferenceBookmasterGet3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterPropertyReferenceControllerApi
     */
    public followPropertyReferenceBookmasterGet3(requestParameters: BookMasterPropertyReferenceControllerApiFollowPropertyReferenceBookmasterGet3Request, options?: RawAxiosRequestConfig) {
        return BookMasterPropertyReferenceControllerApiFp(this.configuration).followPropertyReferenceBookmasterGet3(requestParameters.id, requestParameters.propertyId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EchoControllerApi - axios parameter creator
 * @export
 */
export const EchoControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hello: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/hello`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {string} [name] 
         * @param {string} [publicationDateBegin] 
         * @param {string} [publicationDateEnd] 
         * @param {string} [ndcCategoryName] 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchBookMasters: async (id?: number, name?: string, publicationDateBegin?: string, publicationDateEnd?: string, ndcCategoryName?: string, page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/searchBookMasters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (publicationDateBegin !== undefined) {
                localVarQueryParameter['publicationDateBegin'] = (publicationDateBegin as any instanceof Date) ?
                    (publicationDateBegin as any).toISOString().substring(0,10) :
                    publicationDateBegin;
            }

            if (publicationDateEnd !== undefined) {
                localVarQueryParameter['publicationDateEnd'] = (publicationDateEnd as any instanceof Date) ?
                    (publicationDateEnd as any).toISOString().substring(0,10) :
                    publicationDateEnd;
            }

            if (ndcCategoryName !== undefined) {
                localVarQueryParameter['ndcCategoryName'] = ndcCategoryName;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EchoControllerApi - functional programming interface
 * @export
 */
export const EchoControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EchoControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hello(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hello(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EchoControllerApi.hello']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {string} [name] 
         * @param {string} [publicationDateBegin] 
         * @param {string} [publicationDateEnd] 
         * @param {string} [ndcCategoryName] 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchBookMasters(id?: number, name?: string, publicationDateBegin?: string, publicationDateEnd?: string, ndcCategoryName?: string, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageMapStringObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchBookMasters(id, name, publicationDateBegin, publicationDateEnd, ndcCategoryName, page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EchoControllerApi.searchBookMasters']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EchoControllerApi - factory interface
 * @export
 */
export const EchoControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EchoControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hello(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.hello(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EchoControllerApiSearchBookMastersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchBookMasters(requestParameters: EchoControllerApiSearchBookMastersRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PageMapStringObject> {
            return localVarFp.searchBookMasters(requestParameters.id, requestParameters.name, requestParameters.publicationDateBegin, requestParameters.publicationDateEnd, requestParameters.ndcCategoryName, requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EchoControllerApi - interface
 * @export
 * @interface EchoControllerApi
 */
export interface EchoControllerApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EchoControllerApiInterface
     */
    hello(options?: RawAxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {EchoControllerApiSearchBookMastersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EchoControllerApiInterface
     */
    searchBookMasters(requestParameters?: EchoControllerApiSearchBookMastersRequest, options?: RawAxiosRequestConfig): AxiosPromise<PageMapStringObject>;

}

/**
 * Request parameters for searchBookMasters operation in EchoControllerApi.
 * @export
 * @interface EchoControllerApiSearchBookMastersRequest
 */
export interface EchoControllerApiSearchBookMastersRequest {
    /**
     * 
     * @type {number}
     * @memberof EchoControllerApiSearchBookMasters
     */
    readonly id?: number

    /**
     * 
     * @type {string}
     * @memberof EchoControllerApiSearchBookMasters
     */
    readonly name?: string

    /**
     * 
     * @type {string}
     * @memberof EchoControllerApiSearchBookMasters
     */
    readonly publicationDateBegin?: string

    /**
     * 
     * @type {string}
     * @memberof EchoControllerApiSearchBookMasters
     */
    readonly publicationDateEnd?: string

    /**
     * 
     * @type {string}
     * @memberof EchoControllerApiSearchBookMasters
     */
    readonly ndcCategoryName?: string

    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EchoControllerApiSearchBookMasters
     */
    readonly page?: number

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EchoControllerApiSearchBookMasters
     */
    readonly size?: number

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EchoControllerApiSearchBookMasters
     */
    readonly sort?: Array<string>
}

/**
 * EchoControllerApi - object-oriented interface
 * @export
 * @class EchoControllerApi
 * @extends {BaseAPI}
 */
export class EchoControllerApi extends BaseAPI implements EchoControllerApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EchoControllerApi
     */
    public hello(options?: RawAxiosRequestConfig) {
        return EchoControllerApiFp(this.configuration).hello(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EchoControllerApiSearchBookMastersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EchoControllerApi
     */
    public searchBookMasters(requestParameters: EchoControllerApiSearchBookMastersRequest = {}, options?: RawAxiosRequestConfig) {
        return EchoControllerApiFp(this.configuration).searchBookMasters(requestParameters.id, requestParameters.name, requestParameters.publicationDateBegin, requestParameters.publicationDateEnd, requestParameters.ndcCategoryName, requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * NdcCategoryEntityControllerApi - axios parameter creator
 * @export
 */
export const NdcCategoryEntityControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * delete-ndccategory
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemResourceNdccategoryDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteItemResourceNdccategoryDelete', 'id', id)
            const localVarPath = `/ndcCategories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-ndccategory
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionResourceNdccategoryGet: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ndcCategories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-ndccategory
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemResourceNdccategoryGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getItemResourceNdccategoryGet', 'id', id)
            const localVarPath = `/ndcCategories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * patch-ndccategory
         * @param {string} id 
         * @param {NdcCategoryRequestBody} ndcCategoryRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchItemResourceNdccategoryPatch: async (id: string, ndcCategoryRequestBody: NdcCategoryRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchItemResourceNdccategoryPatch', 'id', id)
            // verify required parameter 'ndcCategoryRequestBody' is not null or undefined
            assertParamExists('patchItemResourceNdccategoryPatch', 'ndcCategoryRequestBody', ndcCategoryRequestBody)
            const localVarPath = `/ndcCategories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ndcCategoryRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * create-ndccategory
         * @param {NdcCategoryRequestBody} ndcCategoryRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCollectionResourceNdccategoryPost: async (ndcCategoryRequestBody: NdcCategoryRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ndcCategoryRequestBody' is not null or undefined
            assertParamExists('postCollectionResourceNdccategoryPost', 'ndcCategoryRequestBody', ndcCategoryRequestBody)
            const localVarPath = `/ndcCategories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ndcCategoryRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update-ndccategory
         * @param {string} id 
         * @param {NdcCategoryRequestBody} ndcCategoryRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putItemResourceNdccategoryPut: async (id: string, ndcCategoryRequestBody: NdcCategoryRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putItemResourceNdccategoryPut', 'id', id)
            // verify required parameter 'ndcCategoryRequestBody' is not null or undefined
            assertParamExists('putItemResourceNdccategoryPut', 'ndcCategoryRequestBody', ndcCategoryRequestBody)
            const localVarPath = `/ndcCategories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ndcCategoryRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NdcCategoryEntityControllerApi - functional programming interface
 * @export
 */
export const NdcCategoryEntityControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NdcCategoryEntityControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * delete-ndccategory
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteItemResourceNdccategoryDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteItemResourceNdccategoryDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NdcCategoryEntityControllerApi.deleteItemResourceNdccategoryDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-ndccategory
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollectionResourceNdccategoryGet(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedModelEntityModelNdcCategory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCollectionResourceNdccategoryGet(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NdcCategoryEntityControllerApi.getCollectionResourceNdccategoryGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-ndccategory
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemResourceNdccategoryGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelNdcCategory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemResourceNdccategoryGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NdcCategoryEntityControllerApi.getItemResourceNdccategoryGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * patch-ndccategory
         * @param {string} id 
         * @param {NdcCategoryRequestBody} ndcCategoryRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchItemResourceNdccategoryPatch(id: string, ndcCategoryRequestBody: NdcCategoryRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelNdcCategory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchItemResourceNdccategoryPatch(id, ndcCategoryRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NdcCategoryEntityControllerApi.patchItemResourceNdccategoryPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * create-ndccategory
         * @param {NdcCategoryRequestBody} ndcCategoryRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCollectionResourceNdccategoryPost(ndcCategoryRequestBody: NdcCategoryRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelNdcCategory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCollectionResourceNdccategoryPost(ndcCategoryRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NdcCategoryEntityControllerApi.postCollectionResourceNdccategoryPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * update-ndccategory
         * @param {string} id 
         * @param {NdcCategoryRequestBody} ndcCategoryRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putItemResourceNdccategoryPut(id: string, ndcCategoryRequestBody: NdcCategoryRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelNdcCategory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putItemResourceNdccategoryPut(id, ndcCategoryRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NdcCategoryEntityControllerApi.putItemResourceNdccategoryPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * NdcCategoryEntityControllerApi - factory interface
 * @export
 */
export const NdcCategoryEntityControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NdcCategoryEntityControllerApiFp(configuration)
    return {
        /**
         * delete-ndccategory
         * @param {NdcCategoryEntityControllerApiDeleteItemResourceNdccategoryDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemResourceNdccategoryDelete(requestParameters: NdcCategoryEntityControllerApiDeleteItemResourceNdccategoryDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteItemResourceNdccategoryDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * get-ndccategory
         * @param {NdcCategoryEntityControllerApiGetCollectionResourceNdccategoryGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionResourceNdccategoryGet(requestParameters: NdcCategoryEntityControllerApiGetCollectionResourceNdccategoryGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PagedModelEntityModelNdcCategory> {
            return localVarFp.getCollectionResourceNdccategoryGet(requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * get-ndccategory
         * @param {NdcCategoryEntityControllerApiGetItemResourceNdccategoryGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemResourceNdccategoryGet(requestParameters: NdcCategoryEntityControllerApiGetItemResourceNdccategoryGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelNdcCategory> {
            return localVarFp.getItemResourceNdccategoryGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * patch-ndccategory
         * @param {NdcCategoryEntityControllerApiPatchItemResourceNdccategoryPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchItemResourceNdccategoryPatch(requestParameters: NdcCategoryEntityControllerApiPatchItemResourceNdccategoryPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelNdcCategory> {
            return localVarFp.patchItemResourceNdccategoryPatch(requestParameters.id, requestParameters.ndcCategoryRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * create-ndccategory
         * @param {NdcCategoryEntityControllerApiPostCollectionResourceNdccategoryPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCollectionResourceNdccategoryPost(requestParameters: NdcCategoryEntityControllerApiPostCollectionResourceNdccategoryPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelNdcCategory> {
            return localVarFp.postCollectionResourceNdccategoryPost(requestParameters.ndcCategoryRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * update-ndccategory
         * @param {NdcCategoryEntityControllerApiPutItemResourceNdccategoryPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putItemResourceNdccategoryPut(requestParameters: NdcCategoryEntityControllerApiPutItemResourceNdccategoryPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelNdcCategory> {
            return localVarFp.putItemResourceNdccategoryPut(requestParameters.id, requestParameters.ndcCategoryRequestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NdcCategoryEntityControllerApi - interface
 * @export
 * @interface NdcCategoryEntityControllerApi
 */
export interface NdcCategoryEntityControllerApiInterface {
    /**
     * delete-ndccategory
     * @param {NdcCategoryEntityControllerApiDeleteItemResourceNdccategoryDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NdcCategoryEntityControllerApiInterface
     */
    deleteItemResourceNdccategoryDelete(requestParameters: NdcCategoryEntityControllerApiDeleteItemResourceNdccategoryDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * get-ndccategory
     * @param {NdcCategoryEntityControllerApiGetCollectionResourceNdccategoryGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NdcCategoryEntityControllerApiInterface
     */
    getCollectionResourceNdccategoryGet(requestParameters?: NdcCategoryEntityControllerApiGetCollectionResourceNdccategoryGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<PagedModelEntityModelNdcCategory>;

    /**
     * get-ndccategory
     * @param {NdcCategoryEntityControllerApiGetItemResourceNdccategoryGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NdcCategoryEntityControllerApiInterface
     */
    getItemResourceNdccategoryGet(requestParameters: NdcCategoryEntityControllerApiGetItemResourceNdccategoryGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelNdcCategory>;

    /**
     * patch-ndccategory
     * @param {NdcCategoryEntityControllerApiPatchItemResourceNdccategoryPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NdcCategoryEntityControllerApiInterface
     */
    patchItemResourceNdccategoryPatch(requestParameters: NdcCategoryEntityControllerApiPatchItemResourceNdccategoryPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelNdcCategory>;

    /**
     * create-ndccategory
     * @param {NdcCategoryEntityControllerApiPostCollectionResourceNdccategoryPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NdcCategoryEntityControllerApiInterface
     */
    postCollectionResourceNdccategoryPost(requestParameters: NdcCategoryEntityControllerApiPostCollectionResourceNdccategoryPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelNdcCategory>;

    /**
     * update-ndccategory
     * @param {NdcCategoryEntityControllerApiPutItemResourceNdccategoryPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NdcCategoryEntityControllerApiInterface
     */
    putItemResourceNdccategoryPut(requestParameters: NdcCategoryEntityControllerApiPutItemResourceNdccategoryPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelNdcCategory>;

}

/**
 * Request parameters for deleteItemResourceNdccategoryDelete operation in NdcCategoryEntityControllerApi.
 * @export
 * @interface NdcCategoryEntityControllerApiDeleteItemResourceNdccategoryDeleteRequest
 */
export interface NdcCategoryEntityControllerApiDeleteItemResourceNdccategoryDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof NdcCategoryEntityControllerApiDeleteItemResourceNdccategoryDelete
     */
    readonly id: string
}

/**
 * Request parameters for getCollectionResourceNdccategoryGet operation in NdcCategoryEntityControllerApi.
 * @export
 * @interface NdcCategoryEntityControllerApiGetCollectionResourceNdccategoryGetRequest
 */
export interface NdcCategoryEntityControllerApiGetCollectionResourceNdccategoryGetRequest {
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof NdcCategoryEntityControllerApiGetCollectionResourceNdccategoryGet
     */
    readonly page?: number

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof NdcCategoryEntityControllerApiGetCollectionResourceNdccategoryGet
     */
    readonly size?: number

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof NdcCategoryEntityControllerApiGetCollectionResourceNdccategoryGet
     */
    readonly sort?: Array<string>
}

/**
 * Request parameters for getItemResourceNdccategoryGet operation in NdcCategoryEntityControllerApi.
 * @export
 * @interface NdcCategoryEntityControllerApiGetItemResourceNdccategoryGetRequest
 */
export interface NdcCategoryEntityControllerApiGetItemResourceNdccategoryGetRequest {
    /**
     * 
     * @type {string}
     * @memberof NdcCategoryEntityControllerApiGetItemResourceNdccategoryGet
     */
    readonly id: string
}

/**
 * Request parameters for patchItemResourceNdccategoryPatch operation in NdcCategoryEntityControllerApi.
 * @export
 * @interface NdcCategoryEntityControllerApiPatchItemResourceNdccategoryPatchRequest
 */
export interface NdcCategoryEntityControllerApiPatchItemResourceNdccategoryPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof NdcCategoryEntityControllerApiPatchItemResourceNdccategoryPatch
     */
    readonly id: string

    /**
     * 
     * @type {NdcCategoryRequestBody}
     * @memberof NdcCategoryEntityControllerApiPatchItemResourceNdccategoryPatch
     */
    readonly ndcCategoryRequestBody: NdcCategoryRequestBody
}

/**
 * Request parameters for postCollectionResourceNdccategoryPost operation in NdcCategoryEntityControllerApi.
 * @export
 * @interface NdcCategoryEntityControllerApiPostCollectionResourceNdccategoryPostRequest
 */
export interface NdcCategoryEntityControllerApiPostCollectionResourceNdccategoryPostRequest {
    /**
     * 
     * @type {NdcCategoryRequestBody}
     * @memberof NdcCategoryEntityControllerApiPostCollectionResourceNdccategoryPost
     */
    readonly ndcCategoryRequestBody: NdcCategoryRequestBody
}

/**
 * Request parameters for putItemResourceNdccategoryPut operation in NdcCategoryEntityControllerApi.
 * @export
 * @interface NdcCategoryEntityControllerApiPutItemResourceNdccategoryPutRequest
 */
export interface NdcCategoryEntityControllerApiPutItemResourceNdccategoryPutRequest {
    /**
     * 
     * @type {string}
     * @memberof NdcCategoryEntityControllerApiPutItemResourceNdccategoryPut
     */
    readonly id: string

    /**
     * 
     * @type {NdcCategoryRequestBody}
     * @memberof NdcCategoryEntityControllerApiPutItemResourceNdccategoryPut
     */
    readonly ndcCategoryRequestBody: NdcCategoryRequestBody
}

/**
 * NdcCategoryEntityControllerApi - object-oriented interface
 * @export
 * @class NdcCategoryEntityControllerApi
 * @extends {BaseAPI}
 */
export class NdcCategoryEntityControllerApi extends BaseAPI implements NdcCategoryEntityControllerApiInterface {
    /**
     * delete-ndccategory
     * @param {NdcCategoryEntityControllerApiDeleteItemResourceNdccategoryDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NdcCategoryEntityControllerApi
     */
    public deleteItemResourceNdccategoryDelete(requestParameters: NdcCategoryEntityControllerApiDeleteItemResourceNdccategoryDeleteRequest, options?: RawAxiosRequestConfig) {
        return NdcCategoryEntityControllerApiFp(this.configuration).deleteItemResourceNdccategoryDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-ndccategory
     * @param {NdcCategoryEntityControllerApiGetCollectionResourceNdccategoryGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NdcCategoryEntityControllerApi
     */
    public getCollectionResourceNdccategoryGet(requestParameters: NdcCategoryEntityControllerApiGetCollectionResourceNdccategoryGetRequest = {}, options?: RawAxiosRequestConfig) {
        return NdcCategoryEntityControllerApiFp(this.configuration).getCollectionResourceNdccategoryGet(requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-ndccategory
     * @param {NdcCategoryEntityControllerApiGetItemResourceNdccategoryGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NdcCategoryEntityControllerApi
     */
    public getItemResourceNdccategoryGet(requestParameters: NdcCategoryEntityControllerApiGetItemResourceNdccategoryGetRequest, options?: RawAxiosRequestConfig) {
        return NdcCategoryEntityControllerApiFp(this.configuration).getItemResourceNdccategoryGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * patch-ndccategory
     * @param {NdcCategoryEntityControllerApiPatchItemResourceNdccategoryPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NdcCategoryEntityControllerApi
     */
    public patchItemResourceNdccategoryPatch(requestParameters: NdcCategoryEntityControllerApiPatchItemResourceNdccategoryPatchRequest, options?: RawAxiosRequestConfig) {
        return NdcCategoryEntityControllerApiFp(this.configuration).patchItemResourceNdccategoryPatch(requestParameters.id, requestParameters.ndcCategoryRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * create-ndccategory
     * @param {NdcCategoryEntityControllerApiPostCollectionResourceNdccategoryPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NdcCategoryEntityControllerApi
     */
    public postCollectionResourceNdccategoryPost(requestParameters: NdcCategoryEntityControllerApiPostCollectionResourceNdccategoryPostRequest, options?: RawAxiosRequestConfig) {
        return NdcCategoryEntityControllerApiFp(this.configuration).postCollectionResourceNdccategoryPost(requestParameters.ndcCategoryRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update-ndccategory
     * @param {NdcCategoryEntityControllerApiPutItemResourceNdccategoryPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NdcCategoryEntityControllerApi
     */
    public putItemResourceNdccategoryPut(requestParameters: NdcCategoryEntityControllerApiPutItemResourceNdccategoryPutRequest, options?: RawAxiosRequestConfig) {
        return NdcCategoryEntityControllerApiFp(this.configuration).putItemResourceNdccategoryPut(requestParameters.id, requestParameters.ndcCategoryRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProfileControllerApi - axios parameter creator
 * @export
 */
export const ProfileControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        descriptor: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/profile/authors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        descriptor1: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/profile/bookMasterAuthorRelationships`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        descriptor2: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/profile/bookMasters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        descriptor3: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/profile/ndcCategories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllFormsOfMetadata: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfileControllerApi - functional programming interface
 * @export
 */
export const ProfileControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProfileControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async descriptor(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.descriptor(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProfileControllerApi.descriptor']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async descriptor1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.descriptor1(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProfileControllerApi.descriptor1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async descriptor2(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.descriptor2(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProfileControllerApi.descriptor2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async descriptor3(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.descriptor3(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProfileControllerApi.descriptor3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllFormsOfMetadata(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RepresentationModelObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllFormsOfMetadata(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProfileControllerApi.listAllFormsOfMetadata']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProfileControllerApi - factory interface
 * @export
 */
export const ProfileControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProfileControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        descriptor(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.descriptor(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        descriptor1(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.descriptor1(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        descriptor2(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.descriptor2(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        descriptor3(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.descriptor3(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllFormsOfMetadata(options?: RawAxiosRequestConfig): AxiosPromise<RepresentationModelObject> {
            return localVarFp.listAllFormsOfMetadata(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProfileControllerApi - interface
 * @export
 * @interface ProfileControllerApi
 */
export interface ProfileControllerApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileControllerApiInterface
     */
    descriptor(options?: RawAxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileControllerApiInterface
     */
    descriptor1(options?: RawAxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileControllerApiInterface
     */
    descriptor2(options?: RawAxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileControllerApiInterface
     */
    descriptor3(options?: RawAxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileControllerApiInterface
     */
    listAllFormsOfMetadata(options?: RawAxiosRequestConfig): AxiosPromise<RepresentationModelObject>;

}

/**
 * ProfileControllerApi - object-oriented interface
 * @export
 * @class ProfileControllerApi
 * @extends {BaseAPI}
 */
export class ProfileControllerApi extends BaseAPI implements ProfileControllerApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileControllerApi
     */
    public descriptor(options?: RawAxiosRequestConfig) {
        return ProfileControllerApiFp(this.configuration).descriptor(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileControllerApi
     */
    public descriptor1(options?: RawAxiosRequestConfig) {
        return ProfileControllerApiFp(this.configuration).descriptor1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileControllerApi
     */
    public descriptor2(options?: RawAxiosRequestConfig) {
        return ProfileControllerApiFp(this.configuration).descriptor2(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileControllerApi
     */
    public descriptor3(options?: RawAxiosRequestConfig) {
        return ProfileControllerApiFp(this.configuration).descriptor3(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileControllerApi
     */
    public listAllFormsOfMetadata(options?: RawAxiosRequestConfig) {
        return ProfileControllerApiFp(this.configuration).listAllFormsOfMetadata(options).then((request) => request(this.axios, this.basePath));
    }
}




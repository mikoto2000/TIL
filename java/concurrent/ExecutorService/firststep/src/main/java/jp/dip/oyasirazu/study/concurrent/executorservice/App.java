/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package jp.dip.oyasirazu.study.concurrent.executorservice;

import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class App {

    public static void main(String[] args) throws InterruptedException {
        {
            System.out.println("Executors.newFixedThreadPool(10)");

            // 10 個のスレッドを使いまわす ExecutorService を作成
            var executor = Executors.newFixedThreadPool(10);

            // 10 回 print する
            for (int i = 0; i < 10; i++) {
                final int number = i;
                executor.execute(() -> {
                    try {
                        Thread.sleep((long)(Math.random() * 1000));
                        System.out.printf("{ Thread No: %d, index number: %d }\n",
                                Thread.currentThread().getId(), number);
                    } catch (Exception e) {
                    }
                });
            }

            // シャットダウンして、現在実行中のスレッドが全部終わるまで待つ
            executor.shutdown();
            executor.awaitTermination(1, TimeUnit.DAYS);
        }

        {
            System.out.println("Executors.newFixedThreadPool(5)");

            // 5 個のスレッドを使いまわす ExecutorService を作成
            var executor = Executors.newFixedThreadPool(5);

            // 10 回 print する
            for (int i = 0; i < 10; i++) {
                final int number = i;
                executor.execute(() -> {
                    try {
                        Thread.sleep((long)(Math.random() * 1000));
                        System.out.printf("{ Thread No: %d, index number: %d }\n",
                                Thread.currentThread().getId(), number);
                    } catch (Exception e) {
                    }
                });
            }

            // シャットダウンして、現在実行中のスレッドが全部終わるまで待つ
            executor.shutdown();
            executor.awaitTermination(1, TimeUnit.DAYS);
        }
    }
}

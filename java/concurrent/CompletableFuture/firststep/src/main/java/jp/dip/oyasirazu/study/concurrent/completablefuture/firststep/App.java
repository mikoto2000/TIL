/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package jp.dip.oyasirazu.study.concurrent.completablefuture.firststep;

import java.util.ArrayList;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

public class App {
    public static void main(String[] args) throws InterruptedException, ExecutionException, TimeoutException {

        {
            System.out.println("1 回目");
            var completableFutures = new ArrayList<CompletableFuture<Void>>();
            for (int i = 0; i < 10; i++) {
                final int number = i;
                completableFutures.add(CompletableFuture.runAsync(() -> {
                        try {
                            Thread.sleep((long)(Math.random() * 1000));
                            System.out.printf("{ Thread No: %d, index number: %d }\n",
                                    Thread.currentThread().getId(), number);
                        } catch (Exception e) {
                        }
                }));
            }

            // 全 completableFutures が完了するまで待つ(CompletableFuture#get が同期的結果取得)
            CompletableFuture.allOf(completableFutures.toArray(new CompletableFuture[0])).get(1, TimeUnit.DAYS);
        }

        {
            System.out.println("2 回目");
            var completableFutures = new ArrayList<CompletableFuture<Void>>();
            for (int i = 0; i < 10; i++) {
                final int number = i;
                completableFutures.add(CompletableFuture.runAsync(() -> {
                        try {
                            Thread.sleep((long)(Math.random() * 1000));
                            System.out.printf("{ Thread No: %d, index number: %d }\n",
                                    Thread.currentThread().getId(), number);
                        } catch (Exception e) {
                        }
                }));
            }

            // 全 completableFutures が完了するまで待つ(CompletableFuture#get が同期的結果取得)
            CompletableFuture.allOf(completableFutures.toArray(new CompletableFuture[0])).get(1, TimeUnit.DAYS);
        }
    }
}

"use strict";
/******************************************************************************
 * Copyright 2022 TypeFox GmbH
 * This program and the accompanying materials are made available under the
 * terms of the MIT License, which is available in the project root.
 ******************************************************************************/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeFileSystemProvider = void 0;
const fs_1 = __importDefault(require("fs"));
const vscode_uri_1 = require("vscode-uri");
class NodeFileSystemProvider {
    constructor() {
        this.encoding = 'utf-8';
    }
    readFile(uri) {
        return fs_1.default.promises.readFile(uri.fsPath, this.encoding);
    }
    readFileSync(uri) {
        return fs_1.default.readFileSync(uri.fsPath, this.encoding);
    }
    readDirectory(folderPath) {
        return __awaiter(this, void 0, void 0, function* () {
            const dirents = yield fs_1.default.promises.readdir(folderPath.fsPath, { withFileTypes: true });
            return dirents.map(dirent => ({
                dirent,
                isFile: dirent.isFile(),
                isDirectory: dirent.isDirectory(),
                uri: vscode_uri_1.Utils.joinPath(folderPath, dirent.name)
            }));
        });
    }
}
exports.NodeFileSystemProvider = NodeFileSystemProvider;
//# sourceMappingURL=file-system-provider.js.map
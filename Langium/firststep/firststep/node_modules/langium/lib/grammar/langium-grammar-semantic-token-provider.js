"use strict";
/******************************************************************************
 * Copyright 2022 TypeFox GmbH
 * This program and the accompanying materials are made available under the
 * terms of the MIT License, which is available in the project root.
 ******************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
exports.LangiumGrammarSemanticTokenProvider = void 0;
const vscode_languageserver_1 = require("vscode-languageserver");
const semantic_token_provider_1 = require("../lsp/semantic-token-provider");
const ast_1 = require("./generated/ast");
class LangiumGrammarSemanticTokenProvider extends semantic_token_provider_1.AbstractSemanticTokenProvider {
    highlightElement(node, acceptor) {
        if ((0, ast_1.isAssignment)(node)) {
            acceptor({
                node,
                feature: 'feature',
                type: vscode_languageserver_1.SemanticTokenTypes.property
            });
        }
        else if ((0, ast_1.isAction)(node)) {
            if (node.feature) {
                acceptor({
                    node,
                    feature: 'feature',
                    type: vscode_languageserver_1.SemanticTokenTypes.property
                });
            }
        }
        else if ((0, ast_1.isReturnType)(node)) {
            acceptor({
                node,
                feature: 'name',
                type: vscode_languageserver_1.SemanticTokenTypes.type
            });
        }
        else if ((0, ast_1.isAtomType)(node)) {
            acceptor({
                node,
                feature: 'primitiveType',
                type: vscode_languageserver_1.SemanticTokenTypes.type
            });
        }
        else if ((0, ast_1.isParameter)(node)) {
            acceptor({
                node,
                feature: 'name',
                type: vscode_languageserver_1.SemanticTokenTypes.parameter
            });
        }
        else if ((0, ast_1.isParameterReference)(node)) {
            acceptor({
                node,
                feature: 'parameter',
                type: vscode_languageserver_1.SemanticTokenTypes.parameter
            });
        }
    }
}
exports.LangiumGrammarSemanticTokenProvider = LangiumGrammarSemanticTokenProvider;
//# sourceMappingURL=langium-grammar-semantic-token-provider.js.map
"use strict";
/******************************************************************************
 * Copyright 2021 TypeFox GmbH
 * This program and the accompanying materials are made available under the
 * terms of the MIT License, which is available in the project root.
 ******************************************************************************/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.processActionNodeWithNodeDescriptionProvider = exports.processTypeNodeWithNodeLocator = exports.computeGrammarScope = exports.loadGrammar = exports.resolveTransitiveImports = exports.resolveImport = exports.getEntryRule = exports.getRuleType = exports.getTypeName = exports.terminalRegex = exports.getActionAtElement = exports.getTypeNameAtElement = exports.findAssignment = exports.findNodesForFeature = exports.findKeywordNodeInternal = exports.findKeywordNode = exports.findNodeForFeature = exports.isCommentTerminal = exports.findNameAssignment = exports.isDataTypeRule = exports.isArrayOperator = exports.isArray = exports.isOptional = void 0;
const vscode_languageserver_textdocument_1 = require("vscode-languageserver-textdocument");
const vscode_uri_1 = require("vscode-uri");
const ast = __importStar(require("../grammar/generated/ast"));
const cst_node_builder_1 = require("../parser/cst-node-builder");
const ast_util_1 = require("../utils/ast-util");
const collections_1 = require("../utils/collections");
const cst_util_1 = require("../utils/cst-util");
const regex_util_1 = require("../utils/regex-util");
const documents_1 = require("../workspace/documents");
const langium_grammar_module_1 = require("./langium-grammar-module");
function isOptional(cardinality) {
    return cardinality === '?' || cardinality === '*';
}
exports.isOptional = isOptional;
function isArray(cardinality) {
    return cardinality === '*' || cardinality === '+';
}
exports.isArray = isArray;
function isArrayOperator(operator) {
    return operator === '+=';
}
exports.isArrayOperator = isArrayOperator;
function isDataTypeRule(rule) {
    return isDataTypeRuleInternal(rule, new Set());
}
exports.isDataTypeRule = isDataTypeRule;
function isDataTypeRuleInternal(rule, visited) {
    if (visited.has(rule)) {
        return true;
    }
    visited.add(rule);
    for (const node of (0, ast_util_1.streamAllContents)(rule)) {
        if (ast.isRuleCall(node) && ast.isParserRule(node.rule.ref)) {
            if (!isDataTypeRuleInternal(node.rule.ref, visited)) {
                return false;
            }
        }
        else if (ast.isAssignment(node)) {
            return false;
        }
        else if (ast.isAction(node)) {
            return false;
        }
    }
    return true;
}
function findNameAssignment(type) {
    return findNameAssignmentInternal(type, new Map());
}
exports.findNameAssignment = findNameAssignment;
function findNameAssignmentInternal(type, cashed) {
    function go(node, refType) {
        let childAssignment = undefined;
        const parentAssignment = (0, ast_util_1.getContainerOfType)(node, ast.isAssignment);
        // No parent assignment implies unassigned rule call
        if (!parentAssignment) {
            childAssignment = findNameAssignmentInternal(refType, cashed);
        }
        cashed.set(type, childAssignment);
        return childAssignment;
    }
    if (cashed.has(type))
        return cashed.get(type);
    cashed.set(type, undefined);
    for (const node of (0, ast_util_1.streamAllContents)(type)) {
        if (ast.isAssignment(node) && node.feature.toLowerCase() === 'name') {
            cashed.set(type, node);
            return node;
        }
        else if (ast.isRuleCall(node) && ast.isParserRule(node.rule.ref)) {
            return go(node, node.rule.ref);
        }
        else if (ast.isAtomType(node) && node.refType.ref) {
            return go(node, node.refType.ref);
        }
    }
    return undefined;
}
function isCommentTerminal(terminalRule) {
    return terminalRule.hidden && !' '.match(terminalRegex(terminalRule));
}
exports.isCommentTerminal = isCommentTerminal;
function findNodeForFeature(node, feature, index) {
    const nodes = findNodesForFeature(node, feature);
    if (nodes.length === 0) {
        return undefined;
    }
    if (index !== undefined) {
        index = Math.max(0, Math.min(index, nodes.length - 1));
    }
    else {
        index = 0;
    }
    return nodes[index];
}
exports.findNodeForFeature = findNodeForFeature;
function findKeywordNode(node, keyword) {
    if (node && ast.isKeyword(node.feature) && node.feature.value === keyword) {
        return node;
    }
    return findKeywordNodeInternal(node, keyword, node === null || node === void 0 ? void 0 : node.element);
}
exports.findKeywordNode = findKeywordNode;
function findKeywordNodeInternal(node, keyword, element) {
    if (!node || !element) {
        return undefined;
    }
    const treeIterator = (0, cst_util_1.streamCst)(node).iterator();
    let result;
    do {
        result = treeIterator.next();
        if (!result.done) {
            const childNode = result.value;
            if (childNode.element === element) {
                if (ast.isKeyword(childNode.feature) && childNode.feature.value === keyword) {
                    return childNode;
                }
            }
            else {
                treeIterator.prune();
            }
        }
    } while (!result.done);
    return undefined;
}
exports.findKeywordNodeInternal = findKeywordNodeInternal;
/**
 * This `internal` declared method exists, as we want to find the first child with the specified feature.
 * When the own feature is named the same by accident, we will instead return the input value.
 * Therefore, we skip the first assignment check.
 * @param node The node to traverse/check for the specified feature
 * @param feature The specified feature to find
 * @param element The element of the initial node. Do not process nodes of other elements.
 * @param first Whether this is the first node of the whole check.
 * @returns A list of all nodes within this node that belong to the specified feature.
 */
function findNodesForFeatureInternal(node, feature, element, first) {
    if (!node || !feature || node.element !== element) {
        return [];
    }
    const nodeFeature = (0, ast_util_1.getContainerOfType)(node.feature, ast.isAssignment);
    if (!first && nodeFeature && nodeFeature.feature === feature) {
        return [node];
    }
    else if (node instanceof cst_node_builder_1.CompositeCstNodeImpl) {
        return node.children.flatMap(e => findNodesForFeatureInternal(e, feature, element, false));
    }
    return [];
}
function findNodesForFeature(node, feature) {
    return findNodesForFeatureInternal(node, feature, node === null || node === void 0 ? void 0 : node.element, true);
}
exports.findNodesForFeature = findNodesForFeature;
function findAssignment(cstNode) {
    let n = cstNode;
    do {
        const assignment = (0, ast_util_1.getContainerOfType)(n.feature, ast.isAssignment);
        if (assignment) {
            return assignment;
        }
        n = n.parent;
    } while (n);
    return undefined;
}
exports.findAssignment = findAssignment;
function getTypeNameAtElement(rule, element) {
    var _a;
    const action = getActionAtElement(element);
    return (_a = action === null || action === void 0 ? void 0 : action.type) !== null && _a !== void 0 ? _a : getTypeName(rule);
}
exports.getTypeNameAtElement = getTypeNameAtElement;
function getActionAtElement(element) {
    const parent = element.$container;
    if (ast.isGroup(parent)) {
        const elements = parent.elements;
        const index = elements.indexOf(element);
        for (let i = index - 1; i >= 0; i--) {
            const item = elements[i];
            if (ast.isAction(item)) {
                return item;
            }
            else {
                const action = (0, ast_util_1.streamAllContents)(elements[i]).find(ast.isAction);
                if (action) {
                    return action;
                }
            }
        }
    }
    if (ast.isAbstractElement(parent)) {
        return getActionAtElement(parent);
    }
    else {
        return undefined;
    }
}
exports.getActionAtElement = getActionAtElement;
function terminalRegex(terminalRule) {
    return abstractElementToRegex(terminalRule.terminal);
}
exports.terminalRegex = terminalRegex;
// Using [\s\S]* allows to match everything, compared to . which doesn't match line terminators
const WILDCARD = /[\s\S]/.source;
function abstractElementToRegex(element) {
    if (ast.isTerminalAlternatives(element)) {
        return terminalAlternativesToRegex(element);
    }
    else if (ast.isTerminalGroup(element)) {
        return terminalGroupToRegex(element);
    }
    else if (ast.isCharacterRange(element)) {
        return characterRangeToRegex(element);
    }
    else if (ast.isTerminalRuleCall(element)) {
        const rule = element.rule.ref;
        if (!rule) {
            throw new Error('Missing rule reference.');
        }
        return withCardinality(terminalRegex(rule), element.cardinality, true);
    }
    else if (ast.isNegatedToken(element)) {
        return negateTokenToRegex(element);
    }
    else if (ast.isUntilToken(element)) {
        return untilTokenToRegex(element);
    }
    else if (ast.isRegexToken(element)) {
        return withCardinality(element.regex, element.cardinality, true);
    }
    else if (ast.isWildcard(element)) {
        return withCardinality(WILDCARD, element.cardinality);
    }
    else {
        throw new Error('Invalid terminal element.');
    }
}
function terminalAlternativesToRegex(alternatives) {
    return withCardinality(`(${alternatives.elements.map(abstractElementToRegex).join('|')})`, alternatives.cardinality);
}
function terminalGroupToRegex(group) {
    return withCardinality(group.elements.map(abstractElementToRegex).join(''), group.cardinality);
}
function untilTokenToRegex(until) {
    return withCardinality(`${WILDCARD}*?${abstractElementToRegex(until.terminal)}`, until.cardinality);
}
function negateTokenToRegex(negate) {
    return withCardinality(`(?!${abstractElementToRegex(negate.terminal)})${WILDCARD}*?`, negate.cardinality, true);
}
function characterRangeToRegex(range) {
    if (range.right) {
        return withCardinality(`[${keywordToRegex(range.left)}-${keywordToRegex(range.right)}]`, range.cardinality);
    }
    return withCardinality(keywordToRegex(range.left), range.cardinality, true);
}
function keywordToRegex(keyword) {
    return (0, regex_util_1.escapeRegExp)(keyword.value);
}
function withCardinality(regex, cardinality, wrap = false) {
    if (cardinality) {
        if (wrap) {
            regex = `(${regex})`;
        }
        return `${regex}${cardinality}`;
    }
    return regex;
}
function getTypeName(type) {
    var _a, _b;
    if (ast.isParserRule(type)) {
        return (_b = (_a = type.type) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : type.name;
    }
    else if (ast.isInterface(type) || ast.isType(type) || ast.isReturnType(type)) {
        return type.name;
    }
    else if (ast.isAction(type)) {
        return type.type;
    }
    throw new Error('Unknown type');
}
exports.getTypeName = getTypeName;
function getRuleType(rule) {
    var _a, _b, _c, _d;
    if (ast.isTerminalRule(rule)) {
        return (_b = (_a = rule.type) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : 'string';
    }
    else if (ast.isParserRule(rule)) {
        return isDataTypeRule(rule) ? rule.name : ((_d = (_c = rule.type) === null || _c === void 0 ? void 0 : _c.name) !== null && _d !== void 0 ? _d : rule.name);
    }
    throw new Error('Unknown rule type');
}
exports.getRuleType = getRuleType;
function getEntryRule(grammar) {
    return grammar.rules.find(e => ast.isParserRule(e) && e.entry);
}
exports.getEntryRule = getEntryRule;
function resolveImport(documents, imp) {
    if (imp.path === undefined || imp.path.length === 0) {
        return undefined;
    }
    const uri = vscode_uri_1.Utils.dirname((0, ast_util_1.getDocument)(imp).uri);
    let grammarPath = imp.path;
    if (!grammarPath.endsWith('.langium')) {
        grammarPath += '.langium';
    }
    const resolvedUri = vscode_uri_1.Utils.resolvePath(uri, grammarPath);
    try {
        const resolvedDocument = documents.getOrCreateDocument(resolvedUri);
        const node = resolvedDocument.parseResult.value;
        if (ast.isGrammar(node)) {
            return node;
        }
    }
    catch (_a) {
        // NOOP
    }
    return undefined;
}
exports.resolveImport = resolveImport;
function resolveTransitiveImports(documents, grammar) {
    if (ast.isGrammarImport(grammar)) {
        const resolvedGrammar = resolveImport(documents, grammar);
        if (resolvedGrammar) {
            const transitiveGrammars = resolveTransitiveImportsInternal(documents, resolvedGrammar);
            transitiveGrammars.push(resolvedGrammar);
            return transitiveGrammars;
        }
        return [];
    }
    else {
        return resolveTransitiveImportsInternal(documents, grammar);
    }
}
exports.resolveTransitiveImports = resolveTransitiveImports;
function resolveTransitiveImportsInternal(documents, grammar, initialGrammar = grammar, visited = new Set(), grammars = new Set()) {
    const doc = (0, ast_util_1.getDocument)(grammar);
    if (initialGrammar !== grammar) {
        grammars.add(grammar);
    }
    if (!visited.has(doc.uri)) {
        visited.add(doc.uri);
        for (const imp of grammar.imports) {
            const importedGrammar = resolveImport(documents, imp);
            if (importedGrammar) {
                resolveTransitiveImportsInternal(documents, importedGrammar, initialGrammar, visited, grammars);
            }
        }
    }
    return Array.from(grammars);
}
function loadGrammar(json) {
    const services = (0, langium_grammar_module_1.createLangiumGrammarServices)().grammar;
    const astNode = services.serializer.JsonSerializer.deserialize(json);
    if (!ast.isGrammar(astNode)) {
        throw new Error('Could not load grammar from specified json input.');
    }
    const grammar = astNode;
    const textDocument = vscode_languageserver_textdocument_1.TextDocument.create('memory://grammar.langium', 'langium', 0, '');
    const document = (0, documents_1.documentFromText)(textDocument, {
        lexerErrors: [],
        parserErrors: [],
        value: grammar
    });
    grammar.$document = document;
    document.precomputedScopes = computeGrammarScope(services, grammar);
    return grammar;
}
exports.loadGrammar = loadGrammar;
function computeGrammarScope(services, grammar) {
    const nameProvider = services.references.NameProvider;
    const descriptions = services.index.AstNodeDescriptionProvider;
    const document = (0, ast_util_1.getDocument)(grammar);
    const scopes = new collections_1.MultiMap();
    const processTypeNode = processTypeNodeWithNodeLocator(services.index.AstNodeLocator);
    const processActionNode = processActionNodeWithNodeDescriptionProvider(descriptions);
    for (const node of (0, ast_util_1.streamAllContents)(grammar)) {
        if (ast.isReturnType(node))
            continue;
        processActionNode(node, document, scopes);
        processTypeNode(node, document, scopes);
        const container = node.$container;
        if (container) {
            const name = nameProvider.getName(node);
            if (name) {
                scopes.add(container, descriptions.createDescription(node, name, document));
            }
        }
    }
    return scopes;
}
exports.computeGrammarScope = computeGrammarScope;
function processTypeNodeWithNodeLocator(astNodeLocator) {
    return (node, document, scopes) => {
        var _a;
        const container = node.$container;
        if (container && ast.isParserRule(node)) {
            const typeNode = (_a = node.type) !== null && _a !== void 0 ? _a : node;
            scopes.add(container, {
                node: typeNode,
                name: typeNode.name,
                type: 'Interface',
                documentUri: document.uri,
                path: astNodeLocator.getAstNodePath(typeNode)
            });
        }
    };
}
exports.processTypeNodeWithNodeLocator = processTypeNodeWithNodeLocator;
function processActionNodeWithNodeDescriptionProvider(descriptions) {
    return (node, document, scopes) => {
        const container = (0, ast_util_1.extractRootNode)(node);
        if (container && ast.isAction(node)) {
            scopes.add(container, descriptions.createDescription(node, node.type, document));
        }
    };
}
exports.processActionNodeWithNodeDescriptionProvider = processActionNodeWithNodeDescriptionProvider;
//# sourceMappingURL=grammar-util.js.map
/******************************************************************************
 * Copyright 2022 TypeFox GmbH
 * This program and the accompanying materials are made available under the
 * terms of the MIT License, which is available in the project root.
 ******************************************************************************/
import { URI } from 'vscode-uri';
import { Grammar, Interface, ParserRule, Type } from '../generated/ast';
import { LangiumDocuments } from '../../workspace/documents';
export declare type Property = {
    name: string;
    optional: boolean;
    typeAlternatives: PropertyType[];
};
export declare type PropertyType = {
    types: string[];
    reference: boolean;
    array: boolean;
};
export declare type AstTypes = {
    interfaces: InterfaceType[];
    types: TypeType[];
};
export declare class TypeType {
    name: string;
    alternatives: PropertyType[];
    reflection: boolean;
    superTypes: string[];
    constructor(name: string, alternatives: PropertyType[], options?: {
        reflection: boolean;
    });
    toString(): string;
}
export declare class InterfaceType {
    name: string;
    superTypes: string[];
    printingSuperTypes: string[];
    subTypes: string[];
    containerTypes: string[];
    properties: Property[];
    constructor(name: string, superTypes: string[], properties: Property[]);
    toString(): string;
}
export declare type AstResources = {
    parserRules: Set<ParserRule>;
    datatypeRules: Set<ParserRule>;
    interfaces: Set<Interface>;
    types: Set<Type>;
};
export declare function collectAllAstResources(grammars: Grammar[], documents?: LangiumDocuments, visited?: Set<URI>, astResources?: AstResources): AstResources;
export declare function propertyTypeArrayToString(alternatives: PropertyType[]): string;
export declare function distictAndSorted<T>(list: T[], compareFn?: (a: T, b: T) => number): T[];
export declare function typePropertyToString(propertyType: PropertyType): string;
//# sourceMappingURL=types-util.d.ts.map
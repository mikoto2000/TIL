/******************************************************************************
 * Copyright 2021 TypeFox GmbH
 * This program and the accompanying materials are made available under the
 * terms of the MIT License, which is available in the project root.
 ******************************************************************************/
import * as ast from '../grammar/generated/ast';
import { AstNode, AstNodeDescription, LinkingError, Reference, ReferenceInfo } from '../syntax-tree';
import { Stream, TreeStream } from '../utils/stream';
import { LangiumDocument } from '../workspace/documents';
export declare type Mutable<T> = {
    -readonly [P in keyof T]: T[P];
};
export declare function isAstNode(obj: unknown): obj is AstNode;
/**
 * Link the `$container` and other related properties of every AST node that is directly contained
 * in the given `node`.
 */
export declare function linkContentToContainer(node: AstNode): void;
export declare function isReference(obj: unknown): obj is Reference;
export declare function isAstNodeDescription(obj: unknown): obj is AstNodeDescription;
export declare function isLinkingError(obj: unknown): obj is LinkingError;
/**
 * Walk along the hierarchy of containers from the given AST node to the root and return the first
 * node that matches the type predicate. If the start node itself matches, it is returned.
 * If no container matches, `undefined` is returned.
 */
export declare function getContainerOfType<T extends AstNode>(node: AstNode | undefined, typePredicate: (n: AstNode) => n is T): T | undefined;
/**
 * Walk along the hierarchy of containers from the given AST node to the root and check for existence
 * of a container that matches the given predicate. The start node is included in the checks.
 */
export declare function hasContainerOfType(node: AstNode | undefined, predicate: (n: AstNode) => boolean): boolean;
/**
 * Retrieve the document in which the given AST node is contained. A reference to the document is
 * usually held by the root node of the AST.
 *
 * @throws an error if the node is not contained in a document.
 */
export declare function getDocument<T extends AstNode = AstNode>(node: AstNode): LangiumDocument<T>;
/**
 * Create a stream of all AST nodes that are directly contained in the given node. This includes
 * single-valued as well as multi-valued (array) properties.
 */
export declare function streamContents(node: AstNode): Stream<AstNode>;
/**
 * Create a stream of all AST nodes that are directly and indirectly contained in the given root node.
 */
export declare function streamAllContents(root: AstNode): TreeStream<AstNode>;
/**
 * Create a stream of all cross-references that are held by the given AST node. This includes
 * single-valued as well as multi-valued (array) properties.
 */
export declare function streamReferences(node: AstNode): Stream<ReferenceInfo>;
/**
 * Returns a Stream of references to the target node from the AstNode tree
 *
 * @param targetNode AstNode we are looking for
 * @param lookup AstNode where we search for references. If not provided, the root node of the document is used as the default value
 */
export declare function findLocalReferences(targetNode: AstNode, lookup?: AstNode): Stream<Reference>;
export declare function extractRootNode(node: AstNode): AstNode | undefined;
export declare function extractAssignments(element: ast.AbstractElement): ast.Assignment[];
//# sourceMappingURL=ast-util.d.ts.map
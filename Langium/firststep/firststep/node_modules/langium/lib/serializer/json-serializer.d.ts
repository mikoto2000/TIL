/******************************************************************************
 * Copyright 2021 TypeFox GmbH
 * This program and the accompanying materials are made available under the
 * terms of the MIT License, which is available in the project root.
 ******************************************************************************/
import { AstNode } from '../syntax-tree';
import { LangiumServices } from '../services';
/**
 * Utility service for transforming an `AstNode` into a JSON string and vice versa.
 */
export interface JsonSerializer {
    /**
     * Serialize an `AstNode` into a JSON `string`.
     * @param node The `AstNode` to be serialized.
     * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.
     */
    serialize(node: AstNode, space?: string | number): string;
    /**
     * Deserialize (parse) a JSON `string` into an `AstNode`.
     */
    deserialize(content: string): AstNode;
}
export declare class DefaultJsonSerializer {
    private readonly linker;
    protected ignoreProperties: string[];
    constructor(services: LangiumServices);
    serialize(node: AstNode, space?: string | number): string;
    deserialize(content: string): AstNode;
    protected decycle(object: AstNode, ignore: string[]): unknown;
    protected revive(object: AstNode): AstNode;
}
//# sourceMappingURL=json-serializer.d.ts.map
"use strict";
/******************************************************************************
 * Copyright 2021 TypeFox GmbH
 * This program and the accompanying materials are made available under the
 * terms of the MIT License, which is available in the project root.
 ******************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultTokenBuilder = void 0;
const chevrotain_1 = require("chevrotain");
const ast_1 = require("../grammar/generated/ast");
const grammar_util_1 = require("../grammar/grammar-util");
const ast_util_1 = require("../utils/ast-util");
const regex_util_1 = require("../utils/regex-util");
const stream_1 = require("../utils/stream");
class DefaultTokenBuilder {
    buildTokens(grammar, options) {
        const terminalTokens = this.buildTerminalTokens(grammar);
        const tokens = this.buildKeywordTokens(grammar, terminalTokens, options);
        terminalTokens.forEach(terminalToken => {
            const pattern = terminalToken.PATTERN;
            if (typeof pattern === 'object' && pattern && 'test' in pattern && pattern.test(' ')) {
                tokens.unshift(terminalToken);
            }
            else {
                tokens.push(terminalToken);
            }
        });
        return tokens;
    }
    buildTerminalTokens(grammar) {
        return grammar.rules.filter(ast_1.isTerminalRule).filter(e => !e.fragment)
            .map(terminal => this.buildTerminalToken(terminal));
    }
    buildTerminalToken(terminal) {
        let group;
        const regex = (0, grammar_util_1.terminalRegex)(terminal);
        if (terminal.hidden) {
            // Only skip tokens that are able to accept whitespace
            group = new RegExp(regex).test(' ') ? chevrotain_1.Lexer.SKIPPED : 'hidden';
        }
        const token = { name: terminal.name, GROUP: group, PATTERN: new RegExp(regex) };
        if (!group) {
            // 'undefined' is not a valid value for `GROUP`; therefore, we have to delete it
            delete token.GROUP;
        }
        return token;
    }
    buildKeywordTokens(grammar, terminalTokens, options) {
        return (0, stream_1.stream)(grammar.rules)
            // We filter by parser rules, since keywords in terminal rules get transformed into regex and are not actual tokens
            .filter(ast_1.isParserRule)
            .flatMap(rule => (0, ast_util_1.streamAllContents)(rule).filter(ast_1.isKeyword))
            .distinct(e => e.value).toArray()
            // Sort keywords by descending length
            .sort((a, b) => b.value.length - a.value.length)
            .map(keyword => this.buildKeywordToken(keyword, terminalTokens, !!(options === null || options === void 0 ? void 0 : options.caseInsensitive)));
    }
    buildKeywordToken(keyword, terminalTokens, caseInsensitive) {
        return {
            name: keyword.value,
            PATTERN: this.buildKeywordPattern(keyword, caseInsensitive),
            LONGER_ALT: this.findLongerAlt(keyword, terminalTokens)
        };
    }
    buildKeywordPattern(keyword, caseInsensitive) {
        return caseInsensitive ?
            new RegExp((0, regex_util_1.getCaseInsensitivePattern)(keyword.value)) :
            keyword.value;
    }
    findLongerAlt(keyword, terminalTokens) {
        return terminalTokens.reduce((longerAlts, token) => {
            const pattern = token === null || token === void 0 ? void 0 : token.PATTERN;
            if ((pattern === null || pattern === void 0 ? void 0 : pattern.source) && (0, regex_util_1.partialMatches)('^' + pattern.source + '$', keyword.value)) {
                longerAlts.push(token);
            }
            return longerAlts;
        }, []);
    }
}
exports.DefaultTokenBuilder = DefaultTokenBuilder;
//# sourceMappingURL=token-builder.js.map
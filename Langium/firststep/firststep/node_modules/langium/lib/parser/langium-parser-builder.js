"use strict";
/******************************************************************************
 * Copyright 2021 TypeFox GmbH
 * This program and the accompanying materials are made available under the
 * terms of the MIT License, which is available in the project root.
 ******************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareLangiumParser = exports.createLangiumParser = void 0;
const chevrotain_1 = require("chevrotain");
const ast_1 = require("../grammar/generated/ast");
const grammar_util_1 = require("../grammar/grammar-util");
const ast_util_1 = require("../utils/ast-util");
const stream_1 = require("../utils/stream");
const langium_parser_1 = require("./langium-parser");
/**
 * Create and finalize a Langium parser. The parser rules are derived from the grammar, which is
 * available at `services.Grammar`.
 */
function createLangiumParser(services) {
    const parser = prepareLangiumParser(services);
    parser.finalize();
    return parser;
}
exports.createLangiumParser = createLangiumParser;
/**
 * Create a Langium parser without finalizing it. This is used to extract more detailed error
 * information when the parser is initially validated.
 */
function prepareLangiumParser(services) {
    const grammar = services.Grammar;
    const buildTokens = services.parser.TokenBuilder.buildTokens(grammar, { caseInsensitive: services.LanguageMetaData.caseInsensitive });
    const tokens = toTokenTypeDictionary(buildTokens);
    const rules = new Map();
    const parser = new langium_parser_1.LangiumParser(services, buildTokens);
    const parserContext = {
        parser,
        tokens,
        rules
    };
    buildParserRules(parserContext, grammar);
    return parser;
}
exports.prepareLangiumParser = prepareLangiumParser;
function toTokenTypeDictionary(buildTokens) {
    if ((0, langium_parser_1.isTokenTypeDictionary)(buildTokens))
        return buildTokens;
    const tokens = (0, langium_parser_1.isIMultiModeLexerDefinition)(buildTokens) ? Object.values(buildTokens.modes).flat() : buildTokens;
    const res = {};
    tokens.forEach(token => res[token.name] = token);
    return res;
}
function getRule(ctx, name) {
    const rule = ctx.rules.get(name);
    if (!rule)
        throw new Error(`Rule "${name}" not found."`);
    return rule;
}
function getToken(ctx, name) {
    const token = ctx.tokens[name];
    if (!token)
        throw new Error(`Token "${name}" not found."`);
    return token;
}
function buildParserRules(parserContext, grammar) {
    for (const rule of (0, stream_1.stream)(grammar.rules).filter(ast_1.isParserRule)) {
        const ctx = Object.assign(Object.assign({}, parserContext), { consume: 1, optional: 1, subrule: 1, many: 1, or: 1 });
        const method = (rule.entry ? ctx.parser.MAIN_RULE : ctx.parser.DEFINE_RULE).bind(ctx.parser);
        const type = rule.fragment ? undefined : (0, grammar_util_1.isDataTypeRule)(rule) ? langium_parser_1.DatatypeSymbol : (0, grammar_util_1.getTypeName)(rule);
        ctx.rules.set(rule.name, method(rule.name, type, buildRuleContent(ctx, rule)));
    }
}
function buildRuleContent(ctx, rule) {
    const method = buildElement(ctx, rule.alternatives);
    const arrays = [];
    (0, ast_util_1.streamAllContents)(rule.alternatives).forEach(item => {
        if ((0, ast_1.isAssignment)(item) && (0, grammar_util_1.isArrayOperator)(item.operator)) {
            arrays.push(item.feature);
        }
    });
    return (args) => {
        ctx.parser.initializeElement(arrays);
        method(args);
        return ctx.parser.construct();
    };
}
function buildElement(ctx, element, ignoreGuard = false) {
    let method;
    if ((0, ast_1.isKeyword)(element)) {
        method = buildKeyword(ctx, element);
    }
    else if ((0, ast_1.isAction)(element)) {
        method = buildAction(ctx, element);
    }
    else if ((0, ast_1.isAssignment)(element)) {
        method = buildElement(ctx, element.terminal);
    }
    else if ((0, ast_1.isCrossReference)(element)) {
        method = buildCrossReference(ctx, element);
    }
    else if ((0, ast_1.isRuleCall)(element)) {
        method = buildRuleCall(ctx, element);
    }
    else if ((0, ast_1.isAlternatives)(element)) {
        method = buildAlternatives(ctx, element);
    }
    else if ((0, ast_1.isUnorderedGroup)(element)) {
        method = buildUnorderedGroup(ctx, element);
    }
    else if ((0, ast_1.isGroup)(element)) {
        method = buildGroup(ctx, element);
    }
    else {
        throw new Error();
    }
    return wrap(ctx, ignoreGuard ? undefined : getGuardCondition(element), method, element.cardinality);
}
function buildRuleCall(ctx, ruleCall) {
    const rule = ruleCall.rule.ref;
    if ((0, ast_1.isParserRule)(rule)) {
        const idx = ctx.subrule++;
        const predicate = ruleCall.arguments.length > 0 ? buildRuleCallPredicate(rule, ruleCall.arguments) : () => ({});
        if ((0, ast_util_1.hasContainerOfType)(ruleCall, ast_1.isAssignment)) {
            return (args) => ctx.parser.subrule(idx, getRule(ctx, rule.name), ruleCall, predicate(args));
        }
        else {
            return (args) => ctx.parser.unassignedSubrule(idx, getRule(ctx, rule.name), ruleCall, predicate(args));
        }
    }
    else if ((0, ast_1.isTerminalRule)(rule)) {
        const idx = ctx.consume++;
        const method = getToken(ctx, rule.name);
        return () => ctx.parser.consume(idx, method, ruleCall);
    }
    else {
        throw new Error();
    }
}
function buildRuleCallPredicate(rule, namedArgs) {
    const predicates = namedArgs.map(e => buildPredicate(e.value));
    return (args) => {
        const ruleArgs = {};
        for (let i = 0; i < predicates.length; i++) {
            const ruleTarget = rule.parameters[i];
            const predicate = predicates[i];
            ruleArgs[ruleTarget.name] = predicate(args);
        }
        return ruleArgs;
    };
}
function buildPredicate(condition) {
    if ((0, ast_1.isDisjunction)(condition)) {
        const left = buildPredicate(condition.left);
        const right = buildPredicate(condition.right);
        return (args) => (left(args) || right(args));
    }
    else if ((0, ast_1.isConjunction)(condition)) {
        const left = buildPredicate(condition.left);
        const right = buildPredicate(condition.right);
        return (args) => (left(args) && right(args));
    }
    else if ((0, ast_1.isNegation)(condition)) {
        const value = buildPredicate(condition.value);
        return (args) => !value(args);
    }
    else if ((0, ast_1.isParameterReference)(condition)) {
        const name = condition.parameter.ref.name;
        return (args) => args[name] === true;
    }
    else if ((0, ast_1.isLiteralCondition)(condition)) {
        const value = !!condition.true;
        return () => value;
    }
    throw new Error();
}
function buildAlternatives(ctx, alternatives) {
    if (alternatives.elements.length === 1) {
        return buildElement(ctx, alternatives.elements[0]);
    }
    else {
        const methods = [];
        for (const element of alternatives.elements) {
            const predicatedMethod = {
                // Since we handle the guard condition in the alternative already
                // We can ignore the group guard condition inside
                ALT: buildElement(ctx, element, true)
            };
            const guard = getGuardCondition(element);
            if (guard) {
                predicatedMethod.GATE = buildPredicate(guard);
            }
            methods.push(predicatedMethod);
        }
        const idx = ctx.or++;
        return (args) => ctx.parser.alternatives(idx, methods.map(method => {
            const alt = {
                ALT: () => method.ALT(args)
            };
            const gate = method.GATE;
            if (gate) {
                alt.GATE = () => gate(args);
            }
            return alt;
        }));
    }
}
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function buildUnorderedGroup(ctx, group) {
    throw new Error('Unordered groups are not supported (yet)');
}
function buildGroup(ctx, group) {
    const methods = [];
    for (const element of group.elements) {
        methods.push(buildElement(ctx, element));
    }
    return (args) => methods.forEach(e => e(args));
}
function getGuardCondition(element) {
    if ((0, ast_1.isGroup)(element)) {
        return element.guardCondition;
    }
    return undefined;
}
function buildAction(ctx, action) {
    return () => ctx.parser.action(action.type, action);
}
function buildCrossReference(ctx, crossRef, terminal = crossRef.terminal) {
    if (!terminal) {
        if (!crossRef.type.ref) {
            throw new Error('Could not resolve reference to type: ' + crossRef.type.$refText);
        }
        const assignment = (0, grammar_util_1.findNameAssignment)(crossRef.type.ref);
        const assignTerminal = assignment === null || assignment === void 0 ? void 0 : assignment.terminal;
        if (!assignTerminal) {
            throw new Error('Could not find name assignment for type: ' + (0, grammar_util_1.getTypeName)(crossRef.type.ref));
        }
        return buildCrossReference(ctx, crossRef, assignTerminal);
    }
    else if ((0, ast_1.isRuleCall)(terminal) && (0, ast_1.isParserRule)(terminal.rule.ref)) {
        const idx = ctx.subrule++;
        const name = terminal.rule.ref.name;
        return (args) => ctx.parser.subrule(idx, getRule(ctx, name), crossRef, args);
    }
    else if ((0, ast_1.isRuleCall)(terminal) && (0, ast_1.isTerminalRule)(terminal.rule.ref)) {
        const idx = ctx.consume++;
        const terminalRule = getToken(ctx, terminal.rule.ref.name);
        return () => ctx.parser.consume(idx, terminalRule, crossRef);
    }
    else if ((0, ast_1.isKeyword)(terminal)) {
        const idx = ctx.consume++;
        const keyword = getToken(ctx, terminal.value);
        keyword.name = withKeywordSuffix(keyword.name);
        return () => ctx.parser.consume(idx, keyword, crossRef);
    }
    else {
        throw new Error('Could not build cross reference parser');
    }
}
const withKeywordSuffix = (name) => name.endsWith(':KW') ? name : name + ':KW';
function buildKeyword(ctx, keyword) {
    const idx = ctx.consume++;
    const token = ctx.tokens[keyword.value];
    if (!token) {
        throw new Error('Could not find token for keyword: ' + keyword.value);
    }
    token.name = withKeywordSuffix(token.name);
    return () => ctx.parser.consume(idx, token, keyword);
}
function wrap(ctx, guard, method, cardinality) {
    const gate = guard && buildPredicate(guard);
    if (!cardinality) {
        if (gate) {
            const idx = ctx.or++;
            return (args) => ctx.parser.alternatives(idx, [
                {
                    ALT: () => method(args),
                    GATE: () => gate(args)
                },
                {
                    ALT: (0, chevrotain_1.EMPTY_ALT)(),
                    GATE: () => !gate(args)
                }
            ]);
        }
        else {
            return method;
        }
    }
    if (cardinality === '*') {
        const idx = ctx.many++;
        return (args) => ctx.parser.many(idx, {
            DEF: () => method(args),
            GATE: gate ? () => gate(args) : undefined
        });
    }
    else if (cardinality === '+') {
        const idx = ctx.many++;
        if (gate) {
            const orIdx = ctx.or++;
            // In the case of a guard condition for the `+` group
            // We combine it with an empty alternative
            // If the condition returns true, it needs to parse at least a single iteration
            // If its false, it is not allowed to parse anything
            return (args) => ctx.parser.alternatives(orIdx, [
                {
                    ALT: () => ctx.parser.atLeastOne(idx, {
                        DEF: () => method(args)
                    }),
                    GATE: () => gate(args)
                },
                {
                    ALT: (0, chevrotain_1.EMPTY_ALT)(),
                    GATE: () => !gate(args)
                }
            ]);
        }
        else {
            return (args) => ctx.parser.atLeastOne(idx, {
                DEF: () => method(args),
            });
        }
    }
    else if (cardinality === '?') {
        const idx = ctx.optional++;
        return (args) => ctx.parser.optional(idx, {
            DEF: () => method(args),
            GATE: gate ? () => gate(args) : undefined
        });
    }
    else {
        throw new Error();
    }
}
//# sourceMappingURL=langium-parser-builder.js.map
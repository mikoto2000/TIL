/******************************************************************************
 * Copyright 2021 TypeFox GmbH
 * This program and the accompanying materials are made available under the
 * terms of the MIT License, which is available in the project root.
 ******************************************************************************/
import { CancellationToken } from 'vscode-jsonrpc';
import { LangiumServices } from '../services';
import { AstNode, AstNodeDescription, AstReflection } from '../syntax-tree';
import { Stream } from '../utils/stream';
import { AstNodeDescriptionProvider } from '../workspace/ast-descriptions';
import { LangiumDocument, PrecomputedScopes } from '../workspace/documents';
import { IndexManager } from '../workspace/index-manager';
import { NameProvider } from './naming';
/**
 * A scope describes what target elements are visible from a specific cross-reference context.
 */
export interface Scope {
    /**
     * Find a target element matching the given name. If no element is found, `undefined` is returned.
     * If multiple matching elements are present, the selection of the returned element should be done
     * according to the semantics of your language. Usually it is the element that is most closely defined.
     *
     * @param name Name of the cross-reference target as it appears in the source text.
     */
    getElement(name: string): AstNodeDescription | undefined;
    /**
     * Create a stream of all elements in the scope. This is used to compute completion proposals to be
     * shown in the editor.
     */
    getAllElements(): Stream<AstNodeDescription>;
}
/**
 * The default scope implementation is based on a `Stream`. It has an optional _outer scope_ describing
 * the next level of elements, which are queried when a target element is not found in the stream provided
 * to this scope.
 */
export declare class StreamScope implements Scope {
    readonly elements: Stream<AstNodeDescription>;
    readonly outerScope?: Scope;
    readonly caseInsensitive?: boolean;
    constructor(elements: Stream<AstNodeDescription>, outerScope?: Scope, options?: {
        caseInsensitive?: boolean;
    });
    getAllElements(): Stream<AstNodeDescription>;
    getElement(name: string): AstNodeDescription | undefined;
}
export declare const EMPTY_SCOPE: Scope;
/**
 * Language-specific service for determining the scope of target elements visible in a specific cross-reference context.
 */
export interface ScopeProvider {
    /**
     * Return a scope describing what elements are visible for the given AST node and cross-reference
     * identifier.
     *
     * @param node The AST node holding the cross-reference.
     * @param referenceId Identifier of the cross-reference in the form `Type:property` (see
     *     `getReferenceId` utility function).
     */
    getScope(node: AstNode, referenceId: string): Scope;
}
export declare class DefaultScopeProvider implements ScopeProvider {
    protected readonly reflection: AstReflection;
    protected readonly indexManager: IndexManager;
    constructor(services: LangiumServices);
    getScope(node: AstNode, referenceId: string): Scope;
    /**
     * Create a scope for the given precomputed stream of elements.
     */
    protected createScope(elements: Stream<AstNodeDescription>, outerScope: Scope): Scope;
    /**
     * Create a global scope filtered for the given reference type.
     */
    protected getGlobalScope(referenceType: string): Scope;
}
/**
 * Language-specific service for precomputing the scope for a document. This service is executed as part of the _preprocessing_ phase in the `DocumentBuilder`.
 */
export interface ScopeComputation {
    /**
     * Precomputes the scopes for a document. The result is a multimap assigning a set of AST node
     * descriptions to every level of the AST. These data are used by the `ScopeProvider` service
     * to determine which target nodes are visible in the context of a specific cross-reference.
     *
     * _Note:_ You should not resolve any cross-references in this service method. Cross-reference
     * resolution depends on the preprocessing phase to be completed.
     *
     * @param document The document in which to compute scopes.
     * @param cancelToken Indicates when to cancel the current operation.
     * @throws `OperationCanceled` if a user action occurs during execution
     */
    computeScope(document: LangiumDocument, cancelToken?: CancellationToken): Promise<PrecomputedScopes>;
}
/**
 * The default scope computation gathers all AST nodes that have a name (according to the `NameProvider`
 * service) and makes them available in their container node. As a result, from every cross-reference in
 * the AST, target elements from the same level and further up towards the root are visible. Elements that
 * are nested inside lower levels are not visible by default, but that can be changed by customizing this
 * service.
 */
export declare class DefaultScopeComputation implements ScopeComputation {
    protected readonly nameProvider: NameProvider;
    protected readonly descriptions: AstNodeDescriptionProvider;
    constructor(services: LangiumServices);
    computeScope(document: LangiumDocument, cancelToken?: CancellationToken): Promise<PrecomputedScopes>;
    protected processNode(node: AstNode, document: LangiumDocument, scopes: PrecomputedScopes): void;
}
//# sourceMappingURL=scope.d.ts.map
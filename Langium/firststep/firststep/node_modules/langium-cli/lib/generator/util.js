"use strict";
/******************************************************************************
 * Copyright 2021 TypeFox GmbH
 * This program and the accompanying materials are made available under the
 * terms of the MIT License, which is available in the project root.
 ******************************************************************************/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.schema = exports.generatedHeader = exports.cliVersion = exports.getUserChoice = exports.getUserInput = exports.collectKeywords = exports.getTime = exports.elapsedTime = exports.log = void 0;
const langium = __importStar(require("langium"));
const langium_1 = require("langium");
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const readline = __importStar(require("readline"));
//eslint-disable-next-line @typescript-eslint/no-explicit-any
function log(level, options, message, ...args) {
    if (options.watch) {
        console[level](getTime() + message, ...args);
    }
    else {
        console[level](message, ...args);
    }
}
exports.log = log;
let start = process.hrtime();
function elapsedTime() {
    const elapsed = process.hrtime(start)[1] / 1000000; // divide by a million to get nano to milli
    start = process.hrtime(); // reset the timer
    return elapsed.toFixed();
}
exports.elapsedTime = elapsedTime;
function getTime() {
    const date = new Date();
    return `[${`${padZeroes(date.getHours())}:${padZeroes(date.getMinutes())}:${padZeroes(date.getSeconds())}`.gray}] `;
}
exports.getTime = getTime;
function padZeroes(i) {
    return i.toString().padStart(2, '0');
}
function getLangiumCliVersion() {
    const ownPackagePath = path_1.default.resolve(__dirname, '..', '..', 'package.json');
    const pack = fs_extra_1.default.readJsonSync(ownPackagePath, { encoding: 'utf-8' });
    return pack.version;
}
function getGeneratedHeader() {
    const node = new langium_1.CompositeGeneratorNode();
    node.contents.push('/******************************************************************************', langium_1.NL, ` * This file was generated by langium-cli ${exports.cliVersion}.`, langium_1.NL, ' * DO NOT EDIT MANUALLY!', langium_1.NL, ' ******************************************************************************/', langium_1.NL, langium_1.NL);
    return node;
}
function collectKeywords(grammar) {
    const keywords = new Set();
    for (const rule of (0, langium_1.stream)(grammar.rules).filter(langium.isParserRule)) {
        collectElementKeywords(rule.alternatives, keywords);
    }
    return Array.from(keywords).sort((a, b) => a.localeCompare(b));
}
exports.collectKeywords = collectKeywords;
function collectElementKeywords(element, keywords) {
    if (langium.isAlternatives(element) || langium.isGroup(element) || langium.isUnorderedGroup(element)) {
        for (const item of element.elements) {
            collectElementKeywords(item, keywords);
        }
    }
    else if (langium.isAssignment(element)) {
        collectElementKeywords(element.terminal, keywords);
    }
    else if (langium.isKeyword(element)) {
        keywords.add(element.value);
    }
}
function getUserInput(text) {
    return new Promise(resolve => {
        const rl = readline.createInterface({ input: process.stdin, output: process.stdout });
        rl.question(text, answer => {
            resolve(answer);
            rl.close();
        });
    });
}
exports.getUserInput = getUserInput;
function getUserChoice(text, values, defaultValue, lowerCase = true) {
    return __awaiter(this, void 0, void 0, function* () {
        const prompt = text + ' ' + values.map(v => v === defaultValue ? `[${v}]` : v).join('/') + ': ';
        const answer = yield getUserInput(prompt);
        if (!answer) {
            return defaultValue;
        }
        const lcAnswer = lowerCase ? answer.toLowerCase() : answer;
        for (const value of values) {
            if (value.startsWith(lcAnswer)) {
                return value;
            }
        }
        return defaultValue;
    });
}
exports.getUserChoice = getUserChoice;
exports.cliVersion = getLangiumCliVersion();
exports.generatedHeader = getGeneratedHeader();
exports.schema = fs_extra_1.default.readJson(path_1.default.resolve(__dirname, '../../langium-config-schema.json'), { encoding: 'utf-8' });
//# sourceMappingURL=util.js.map